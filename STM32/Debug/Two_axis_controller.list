
Two_axis_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800a008  0800a008  0001a008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ec  0800a7ec  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f4  0800a7f4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001f8  0800a9f4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800a9f4  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a38  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002894  00000000  00000000  00031c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000344f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2b  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e0  00000000  00000000  0004f16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b223  00000000  00000000  0006144b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc66e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  000fc6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ff0 	.word	0x08009ff0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08009ff0 	.word	0x08009ff0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f70:	4a36      	ldr	r2, [pc, #216]	; (800104c <MX_ADC1_Init+0xf0>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f82:	4b31      	ldr	r3, [pc, #196]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_ADC1_Init+0xec>)
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <MX_ADC1_Init+0xf4>)
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_ADC1_Init+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_ADC1_Init+0xec>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_ADC1_Init+0xec>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_ADC1_Init+0xec>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <MX_ADC1_Init+0xec>)
 8000fbe:	f001 fc53 	bl	8002868 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 ff82 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481a      	ldr	r0, [pc, #104]	; (8001048 <MX_ADC1_Init+0xec>)
 8000fde:	f001 fd95 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 ff72 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <MX_ADC1_Init+0xec>)
 8000ffa:	f001 fd87 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001004:	f000 ff64 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001008:	2303      	movs	r3, #3
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800100c:	2303      	movs	r3, #3
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_ADC1_Init+0xec>)
 8001016:	f001 fd79 	bl	8002b0c <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001020:	f000 ff56 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001024:	2304      	movs	r3, #4
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001028:	2304      	movs	r3, #4
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_ADC1_Init+0xec>)
 8001032:	f001 fd6b 	bl	8002b0c <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800103c:	f000 ff48 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000214 	.word	0x20000214
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2f      	ldr	r2, [pc, #188]	; (8001130 <HAL_ADC_MspInit+0xdc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d158      	bne.n	8001128 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 8001080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a26      	ldr	r2, [pc, #152]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_ADC_MspInit+0xe0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80010ae:	231e      	movs	r3, #30
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <HAL_ADC_MspInit+0xe4>)
 80010c2:	f002 fcd7 	bl	8003a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_ADC_MspInit+0xec>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_ADC_MspInit+0xe8>)
 80010f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001104:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_ADC_MspInit+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_ADC_MspInit+0xe8>)
 800110e:	f002 f8af 	bl	8003270 <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001118:	f000 feda 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_ADC_MspInit+0xe8>)
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
 8001122:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_ADC_MspInit+0xe8>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40012000 	.word	0x40012000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000
 800113c:	2000025c 	.word	0x2000025c
 8001140:	40026410 	.word	0x40026410

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_DMA_Init+0x3c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <MX_DMA_Init+0x3c>)
 8001154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_DMA_Init+0x3c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2038      	movs	r0, #56	; 0x38
 800116c:	f002 f849 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001170:	2038      	movs	r0, #56	; 0x38
 8001172:	f002 f862 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <MX_GPIO_Init+0x138>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a46      	ldr	r2, [pc, #280]	; (80012bc <MX_GPIO_Init+0x138>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <MX_GPIO_Init+0x138>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <MX_GPIO_Init+0x138>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <MX_GPIO_Init+0x138>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <MX_GPIO_Init+0x138>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <MX_GPIO_Init+0x138>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <MX_GPIO_Init+0x138>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <MX_GPIO_Init+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <MX_GPIO_Init+0x138>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a31      	ldr	r2, [pc, #196]	; (80012bc <MX_GPIO_Init+0x138>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <MX_GPIO_Init+0x138>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <MX_GPIO_Init+0x13c>)
 8001212:	f002 fdb3 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121c:	4829      	ldr	r0, [pc, #164]	; (80012c4 <MX_GPIO_Init+0x140>)
 800121e:	f002 fdad 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8001228:	4827      	ldr	r0, [pc, #156]	; (80012c8 <MX_GPIO_Init+0x144>)
 800122a:	f002 fda7 	bl	8003d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <MX_GPIO_Init+0x13c>)
 8001248:	f002 fc14 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	; (80012c4 <MX_GPIO_Init+0x140>)
 8001266:	f002 fc05 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800126a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <MX_GPIO_Init+0x144>)
 8001284:	f002 fbf6 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001288:	2310      	movs	r3, #16
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001292:	2301      	movs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_GPIO_Init+0x140>)
 800129e:	f002 fbe9 	bl	8003a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	200a      	movs	r0, #10
 80012a8:	f001 ffab 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f001 ffc4 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020000 	.word	0x40020000

080012cc <Corrector_Init>:
    float b0, b1, b2;
    float a1, a2;
} CorrectorCoefficients;

// �?нициализация коэффициентов корректирующего устройства
static inline void Corrector_Init(CorrectorCoefficients *coeffs) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    coeffs->b0 = 1811.0f;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <Corrector_Init+0x34>)
 80012d8:	601a      	str	r2, [r3, #0]
    coeffs->b1 = -3529.0f;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <Corrector_Init+0x38>)
 80012de:	605a      	str	r2, [r3, #4]
    coeffs->b2 = 1719.0f;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <Corrector_Init+0x3c>)
 80012e4:	609a      	str	r2, [r3, #8]
    coeffs->a1 = -1.188f;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <Corrector_Init+0x40>)
 80012ea:	60da      	str	r2, [r3, #12]
    coeffs->a2 = 0.1896f;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <Corrector_Init+0x44>)
 80012f0:	611a      	str	r2, [r3, #16]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	44e26000 	.word	0x44e26000
 8001304:	c55c9000 	.word	0xc55c9000
 8001308:	44d6e000 	.word	0x44d6e000
 800130c:	bf981062 	.word	0xbf981062
 8001310:	3e422681 	.word	0x3e422681
 8001314:	00000000 	.word	0x00000000

08001318 <GenerateSineValue>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float GenerateSineValue(float freq_hz, float min_val, float max_val)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001322:	edc7 0a02 	vstr	s1, [r7, #8]
 8001326:	ed87 1a01 	vstr	s2, [r7, #4]
    static float time_ms = 0.0f;

    // Амплитуда и смещение
    float amplitude = (max_val - min_val) / 2.0f;
 800132a:	ed97 7a01 	vldr	s14, [r7, #4]
 800132e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001332:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001336:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800133a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133e:	edc7 7a07 	vstr	s15, [r7, #28]
    float offset = (max_val + min_val) / 2.0f;
 8001342:	ed97 7a01 	vldr	s14, [r7, #4]
 8001346:	edd7 7a02 	vldr	s15, [r7, #8]
 800134a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	edc7 7a06 	vstr	s15, [r7, #24]

    // Вычисление значения
    float radians = 2.0f * M_PI * freq_hz * (time_ms / 1000.0f);
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff f8fc 	bl	8000558 <__aeabi_f2d>
 8001360:	a331      	add	r3, pc, #196	; (adr r3, 8001428 <GenerateSineValue+0x110>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f94f 	bl	8000608 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <GenerateSineValue+0x108>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001424 <GenerateSineValue+0x10c>
 800137c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001380:	ee16 0a90 	vmov	r0, s13
 8001384:	f7ff f8e8 	bl	8000558 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f93a 	bl	8000608 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fc0c 	bl	8000bb8 <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	617b      	str	r3, [r7, #20]
    float sine_value = offset + amplitude * sinf(radians);
 80013a4:	ed97 0a05 	vldr	s0, [r7, #20]
 80013a8:	f008 f8c6 	bl	8009538 <sinf>
 80013ac:	eeb0 7a40 	vmov.f32	s14, s0
 80013b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Увеличение времени
    time_ms += 1.0f;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <GenerateSineValue+0x108>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <GenerateSineValue+0x108>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
    if (time_ms >= 1000.0f / freq_hz) {
 80013d8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001424 <GenerateSineValue+0x10c>
 80013dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <GenerateSineValue+0x108>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	d80d      	bhi.n	8001410 <GenerateSineValue+0xf8>
        time_ms -= 1000.0f / freq_hz;  // сброс по периоду
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <GenerateSineValue+0x108>)
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8001424 <GenerateSineValue+0x10c>
 80013fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8001402:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <GenerateSineValue+0x108>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
    }

    return sine_value;
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	ee07 3a90 	vmov	s15, r3
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	20000308 	.word	0x20000308
 8001424:	447a0000 	.word	0x447a0000
 8001428:	54442d18 	.word	0x54442d18
 800142c:	401921fb 	.word	0x401921fb

08001430 <GenerateStepValue>:

float GenerateStepValue(float time, float min_val, float max_val)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a03 	vstr	s0, [r7, #12]
 800143a:	edc7 0a02 	vstr	s1, [r7, #8]
 800143e:	ed87 1a01 	vstr	s2, [r7, #4]

    float step_value = min_val;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	617b      	str	r3, [r7, #20]

    if (step_time >= 0 && step_time <= time/2){
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <GenerateStepValue+0x90>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	db10      	blt.n	8001478 <GenerateStepValue+0x48>
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800145e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <GenerateStepValue+0x90>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	db02      	blt.n	8001478 <GenerateStepValue+0x48>
    	step_value = min_val;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e001      	b.n	800147c <GenerateStepValue+0x4c>
    }
    else{
    	step_value = max_val;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	617b      	str	r3, [r7, #20]
    }

    // Увеличение времени
    step_time += 1.0f;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <GenerateStepValue+0x90>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <GenerateStepValue+0x90>)
 800148c:	edc3 7a00 	vstr	s15, [r3]
    if (step_time >= time) {
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <GenerateStepValue+0x90>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	ed97 7a03 	vldr	s14, [r7, #12]
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	d803      	bhi.n	80014ac <GenerateStepValue+0x7c>
    	step_time = 0;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <GenerateStepValue+0x90>)
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    }

    return step_value;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	ee07 3a90 	vmov	s15, r3
}
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200002f4 	.word	0x200002f4

080014c4 <PID_Compute>:



float PID_Compute(PID_Controller* pid, float setpoint, float measured)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80014d0:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measured;
 80014d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prev_error;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80014fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	edc7 7a06 	vstr	s15, [r7, #24]
    pid->prev_error = error;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	60da      	str	r2, [r3, #12]

    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	edd7 7a07 	vldr	s15, [r7, #28]
 800151a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	edd3 6a01 	vldr	s13, [r3, #4]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a04 	vldr	s15, [r3, #16]
 800152a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	edd3 6a02 	vldr	s13, [r3, #8]
 8001538:	edd7 7a06 	vldr	s15, [r7, #24]
 800153c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001544:	edc7 7a05 	vstr	s15, [r7, #20]



    return output;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3724      	adds	r7, #36	; 0x24
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <Clamp>:


// Ограничение значения в диапазоне [min, max]
static inline float Clamp(float value, float min, float max) {
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	ed87 0a03 	vstr	s0, [r7, #12]
 8001566:	edc7 0a02 	vstr	s1, [r7, #8]
 800156a:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value > max) return max;
 800156e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001572:	edd7 7a01 	vldr	s15, [r7, #4]
 8001576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	dd01      	ble.n	8001584 <Clamp+0x28>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	e00b      	b.n	800159c <Clamp+0x40>
    if (value < min) return min;
 8001584:	ed97 7a03 	vldr	s14, [r7, #12]
 8001588:	edd7 7a02 	vldr	s15, [r7, #8]
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d501      	bpl.n	800159a <Clamp+0x3e>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	e000      	b.n	800159c <Clamp+0x40>
    return value;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <Corrector_Update>:

// Функция обновления корректирующего устройства
static inline int16_t Corrector_Update(CorrectorCoefficients *coeffs, CorrectorState *state, float target_angle, float current_angle) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80015be:	edc7 0a00 	vstr	s1, [r7]
    float error = target_angle - current_angle;
 80015c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c6:	edd7 7a00 	vldr	s15, [r7]
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	edc7 7a05 	vstr	s15, [r7, #20]


    if (error > -0.5f && error < 0.5f) {
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80015da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	dd0a      	ble.n	80015fa <Corrector_Update+0x4a>
 80015e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d501      	bpl.n	80015fa <Corrector_Update+0x4a>
        return 0; // Игнорируем малую ошибку, PWM = 0
 80015f6:	2300      	movs	r3, #0
 80015f8:	e04f      	b.n	800169a <Corrector_Update+0xea>
    }

    // Вычисление выхода
    float output = (coeffs->b0 * error)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	edd7 7a05 	vldr	s15, [r7, #20]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
                 + (coeffs->b1 * state->e1)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 6a01 	vldr	s13, [r3, #4]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
                 + (coeffs->b2 * state->e2)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	edd3 7a01 	vldr	s15, [r3, #4]
 8001628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162c:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - (coeffs->a1 * state->y1)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	edd3 6a03 	vldr	s13, [r3, #12]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	edd3 7a02 	vldr	s15, [r3, #8]
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	ee37 7a67 	vsub.f32	s14, s14, s15
                 - (coeffs->a2 * state->y2);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 6a04 	vldr	s13, [r3, #16]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001650:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float output = (coeffs->b0 * error)
 8001654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001658:	edc7 7a04 	vstr	s15, [r7, #16]

    // Ограничение выхода
    output = Clamp(output, -839.0f, 839.0f);
 800165c:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80016a4 <Corrector_Update+0xf4>
 8001660:	eddf 0a11 	vldr	s1, [pc, #68]	; 80016a8 <Corrector_Update+0xf8>
 8001664:	ed97 0a04 	vldr	s0, [r7, #16]
 8001668:	f7ff ff78 	bl	800155c <Clamp>
 800166c:	ed87 0a04 	vstr	s0, [r7, #16]

    // Обновление состояния
    state->e2 = state->e1;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	605a      	str	r2, [r3, #4]
    state->e1 = error;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]
    state->y2 = state->y1;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	60da      	str	r2, [r3, #12]
    state->y1 = output;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	609a      	str	r2, [r3, #8]

    // Возврат значения в целочисленном формате для Ш�?М
    return (int16_t)output;
 800168c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 3a90 	vmov	r3, s15
 8001698:	b21b      	sxth	r3, r3
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	4451c000 	.word	0x4451c000
 80016a8:	c451c000 	.word	0xc451c000

080016ac <SetDirection1>:


// Мотор 1: PWM на PB13, направление на PA9
void SetDirection1(bool cw)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	cw = !cw;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, cw ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <SetDirection1+0x3c>)
 80016dc:	f002 fb4e 	bl	8003d7c <HAL_GPIO_WritePin>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020000 	.word	0x40020000

080016ec <SetDirection2>:

// Мотор 2: PWM на PB7, направление на PA10
void SetDirection2(bool cw)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, cw ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <SetDirection2+0x20>)
 8001700:	f002 fb3c 	bl	8003d7c <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020000 	.word	0x40020000

08001710 <PWM_Motor1>:

// Установка Ш�?М — ожидается значение от 0 до 839
void PWM_Motor1(uint16_t pwm_value)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
    if (pwm_value > 839) pwm_value = 839;
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001720:	d302      	bcc.n	8001728 <PWM_Motor1+0x18>
 8001722:	f240 3347 	movw	r3, #839	; 0x347
 8001726:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value); // таймер для PB13
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <PWM_Motor1+0x2c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000358 	.word	0x20000358

08001740 <PWM_Motor2>:

void PWM_Motor2(uint16_t pwm_value)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
    if (pwm_value > 839) pwm_value = 839;
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001750:	d302      	bcc.n	8001758 <PWM_Motor2+0x18>
 8001752:	f240 3347 	movw	r3, #839	; 0x347
 8001756:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_value); // таймер для PB7
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <PWM_Motor2+0x2c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200003e8 	.word	0x200003e8

08001770 <ControlMotor2>:


}

void ControlMotor2(float target_angle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
    pwm2 = PID_Compute(&pid2, target_angle, angle_enc1);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <ControlMotor2+0x30>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eef0 0a67 	vmov.f32	s1, s15
 8001784:	ed97 0a01 	vldr	s0, [r7, #4]
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <ControlMotor2+0x34>)
 800178a:	f7ff fe9b 	bl	80014c4 <PID_Compute>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <ControlMotor2+0x38>)
 8001794:	edc3 7a00 	vstr	s15, [r3]


}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002ec 	.word	0x200002ec
 80017a4:	20000000 	.word	0x20000000
 80017a8:	200002fc 	.word	0x200002fc

080017ac <FilterADC>:



void FilterADC(volatile uint32_t adc_input[4])
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    static uint32_t adc_sum[4] = {0};
    static uint8_t sample_count = 0;

    for (int i = 0; i < 4; i++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e010      	b.n	80017dc <FilterADC+0x30>
        adc_sum[i] += adc_input[i];
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	491d      	ldr	r1, [pc, #116]	; (800183c <FilterADC+0x90>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017cc:	441a      	add	r2, r3
 80017ce:	491b      	ldr	r1, [pc, #108]	; (800183c <FilterADC+0x90>)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 4; i++) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	ddeb      	ble.n	80017ba <FilterADC+0xe>
    }

    sample_count++;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <FilterADC+0x94>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <FilterADC+0x94>)
 80017ec:	701a      	strb	r2, [r3, #0]

    if (sample_count >= NUM_SAMPLES) {
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <FilterADC+0x94>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b13      	cmp	r3, #19
 80017f4:	d91c      	bls.n	8001830 <FilterADC+0x84>
        for (int i = 0; i < 4; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	e013      	b.n	8001824 <FilterADC+0x78>
            adc_raw_avg[i] = adc_sum[i] / NUM_SAMPLES;
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <FilterADC+0x90>)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <FilterADC+0x98>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	091a      	lsrs	r2, r3, #4
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <FilterADC+0x9c>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            adc_sum[i] = 0; // сброс суммы
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <FilterADC+0x90>)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2100      	movs	r1, #0
 800181a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < 4; i++) {
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b03      	cmp	r3, #3
 8001828:	dde8      	ble.n	80017fc <FilterADC+0x50>
        }
        sample_count = 0;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <FilterADC+0x94>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    }
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	2000030c 	.word	0x2000030c
 8001840:	2000031c 	.word	0x2000031c
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	200002d0 	.word	0x200002d0

0800184c <ConvertADCToAngles>:

// Вход: adc_values[0] – [3]
// Выход: 4 угла в градусах
void ConvertADCToAngles(uint32_t adc_values[4], float* angle_pot1, float* angle_pot2,
                        float* angle_enc1, float* angle_enc2)
{
 800184c:	b480      	push	{r7}
 800184e:	b08f      	sub	sp, #60	; 0x3c
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
    // ——— Энкодер 1: диапазон 3885 шагов ≈ 337°
    const uint16_t ENC1_ZERO_POS = 2970-15;
 800185a:	f640 338b 	movw	r3, #2955	; 0xb8b
 800185e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    const uint16_t ENC1_STEPS = 3835+15;
 8001860:	f640 730a 	movw	r3, #3850	; 0xf0a
 8001864:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const float ENC1_MAX_DEGREES = 337.0f;
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <ConvertADCToAngles+0x190>)
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28

    // ——— Энкодер 2: диапазон 2088 шагов ≈ 183°
    const uint16_t ENC2_ZERO_POS = 4060-15;
 800186a:	f640 73cd 	movw	r3, #4045	; 0xfcd
 800186e:	84fb      	strh	r3, [r7, #38]	; 0x26
    const uint16_t ENC2_STEPS = 2088+15;
 8001870:	f640 0337 	movw	r3, #2103	; 0x837
 8001874:	84bb      	strh	r3, [r7, #36]	; 0x24
    const float ENC2_MAX_DEGREES = 183.0f;
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <ConvertADCToAngles+0x194>)
 8001878:	623b      	str	r3, [r7, #32]

    // ——— Энкодер 1
    uint32_t raw_enc1 = adc_values[2];
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61fb      	str	r3, [r7, #28]
    int32_t diff1 = (int32_t)raw_enc1 - ENC1_ZERO_POS;
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
    if (diff1 < 0) diff1 += 4096;
 8001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	da03      	bge.n	8001896 <ConvertADCToAngles+0x4a>
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
    if (diff1 > ENC1_STEPS) diff1 = ENC1_STEPS;  // ограничим
 8001896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800189a:	429a      	cmp	r2, r3
 800189c:	dd01      	ble.n	80018a2 <ConvertADCToAngles+0x56>
 800189e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
    *angle_enc1 = ((float)diff1 / ENC1_STEPS) * ENC1_MAX_DEGREES;
 80018a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	edc3 7a00 	vstr	s15, [r3]

    // ——— Энкодер 2
    uint32_t raw_enc2 = adc_values[3];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
    int32_t diff2 = (int32_t)raw_enc2 - ENC2_ZERO_POS;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (diff2 < 0) diff2 += 4096;
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da03      	bge.n	80018e4 <ConvertADCToAngles+0x98>
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (diff2 > ENC2_STEPS) diff2 = ENC2_STEPS;
 80018e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dd01      	ble.n	80018f0 <ConvertADCToAngles+0xa4>
 80018ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
    *angle_enc2 = ((float)diff2 / ENC2_STEPS) * ENC2_MAX_DEGREES;
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001908:	edd7 7a08 	vldr	s15, [r7, #32]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001912:	edc3 7a00 	vstr	s15, [r3]

    // ——— Потенциометры по масштабу энкодеров
    float angle_pot1_tmp = adc_values[0] * (ENC1_MAX_DEGREES / 4095.0f);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001922:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001926:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80019e4 <ConvertADCToAngles+0x198>
 800192a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	edc7 7a05 	vstr	s15, [r7, #20]
	float angle_pot2_tmp = adc_values[1] * (ENC2_MAX_DEGREES / 4095.0f);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3304      	adds	r3, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001944:	edd7 6a08 	vldr	s13, [r7, #32]
 8001948:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80019e4 <ConvertADCToAngles+0x198>
 800194c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	edc7 7a04 	vstr	s15, [r7, #16]


    if (angle_pot1_tmp < 10.0f){
 8001958:	edd7 7a05 	vldr	s15, [r7, #20]
 800195c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001968:	d503      	bpl.n	8001972 <ConvertADCToAngles+0x126>
    	*angle_pot1 = 10.0f;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <ConvertADCToAngles+0x19c>)
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e00f      	b.n	8001992 <ConvertADCToAngles+0x146>
    }
    else if (angle_pot1_tmp > 330.0f){
 8001972:	edd7 7a05 	vldr	s15, [r7, #20]
 8001976:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019ec <ConvertADCToAngles+0x1a0>
 800197a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	dd03      	ble.n	800198c <ConvertADCToAngles+0x140>
    	*angle_pot1 = 330.0f;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <ConvertADCToAngles+0x1a4>)
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e002      	b.n	8001992 <ConvertADCToAngles+0x146>
    }
    else *angle_pot1 = angle_pot1_tmp;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]


    if (angle_pot2_tmp < 8.0f){
 8001992:	edd7 7a04 	vldr	s15, [r7, #16]
 8001996:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d504      	bpl.n	80019ae <ConvertADCToAngles+0x162>
        	*angle_pot2 = 8.0f;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80019aa:	601a      	str	r2, [r3, #0]
        	*angle_pot2 = 179.0f;
    }
    else *angle_pot2 = angle_pot2_tmp;


}
 80019ac:	e00f      	b.n	80019ce <ConvertADCToAngles+0x182>
    else if (angle_pot2_tmp > 179.0f){
 80019ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80019f4 <ConvertADCToAngles+0x1a8>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	dd03      	ble.n	80019c8 <ConvertADCToAngles+0x17c>
        	*angle_pot2 = 179.0f;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <ConvertADCToAngles+0x1ac>)
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	e002      	b.n	80019ce <ConvertADCToAngles+0x182>
    else *angle_pot2 = angle_pot2_tmp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	601a      	str	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	373c      	adds	r7, #60	; 0x3c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	43a88000 	.word	0x43a88000
 80019e0:	43370000 	.word	0x43370000
 80019e4:	457ff000 	.word	0x457ff000
 80019e8:	41200000 	.word	0x41200000
 80019ec:	43a50000 	.word	0x43a50000
 80019f0:	43a50000 	.word	0x43a50000
 80019f4:	43330000 	.word	0x43330000
 80019f8:	43330000 	.word	0x43330000

080019fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d11b      	bne.n	8001a44 <HAL_GPIO_EXTI_Callback+0x48>
	  {
	    uint32_t current_time = HAL_GetTick();
 8001a0c:	f000 ff20 	bl	8002850 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

	    if (current_time - last_button_press > 200) // 100 мс защита от дребезга
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_GPIO_EXTI_Callback+0x50>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2bc8      	cmp	r3, #200	; 0xc8
 8001a1c:	d912      	bls.n	8001a44 <HAL_GPIO_EXTI_Callback+0x48>
	    {
	    	input_mode = !input_mode;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a3c:	701a      	strb	r2, [r3, #0]
	      last_button_press = current_time;
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_GPIO_EXTI_Callback+0x50>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6013      	str	r3, [r2, #0]
	    }
	  }


}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002e0 	.word	0x200002e0
 8001a50:	200002bc 	.word	0x200002bc

08001a54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]



    if (htim->Instance == TIM5) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d167      	bne.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0xe2>
    	tim5_itr = tim5_itr + 1;
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a76:	edc3 7a00 	vstr	s15, [r3]
    	if (pwm1 >= 0) {
 8001a7a:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	db03      	blt.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x3e>
    	        SetDirection1(true);  // CW
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fe0e 	bl	80016ac <SetDirection1>
 8001a90:	e00a      	b.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x54>
    	    } else {
    	        SetDirection1(false); // CCW
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fe0a 	bl	80016ac <SetDirection1>
    	        pwm1 = -pwm1;
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eef1 7a67 	vneg.f32	s15, s15
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
    	    }

    	    if (pwm1 > 839.0f) pwm1 = 839.0f;
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b88 <HAL_TIM_PeriodElapsedCallback+0x134>
 8001ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	dd02      	ble.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001abc:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001abe:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001ac0:	601a      	str	r2, [r3, #0]
    	    PWM_Motor1((uint16_t)pwm1);
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001acc:	ee17 3a90 	vmov	r3, s15
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe1c 	bl	8001710 <PWM_Motor1>

    	    if (pwm2 >= 0) {
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae6:	db03      	blt.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x9c>
    	            SetDirection2(true);  // CW
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fdff 	bl	80016ec <SetDirection2>
 8001aee:	e00a      	b.n	8001b06 <HAL_TIM_PeriodElapsedCallback+0xb2>
    	        } else {
    	            SetDirection2(false); // CCW
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fdfb 	bl	80016ec <SetDirection2>
    	            pwm2 = -pwm2;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eef1 7a67 	vneg.f32	s15, s15
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b02:	edc3 7a00 	vstr	s15, [r3]
    	        }

    	        if (pwm2 > 839.0f) pwm2 = 839.0f;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b88 <HAL_TIM_PeriodElapsedCallback+0x134>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	dd02      	ble.n	8001b20 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001b1e:	601a      	str	r2, [r3, #0]
    	        PWM_Motor2((uint16_t)pwm2);
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2a:	ee17 3a90 	vmov	r3, s15
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe05 	bl	8001740 <PWM_Motor2>


    }

    if (htim->Instance == TIM3) {
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a16      	ldr	r2, [pc, #88]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d119      	bne.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x120>
        	sine_angle_2 = GenerateSineValue(9.0f, 20.0f, 180.0f);
 8001b40:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001b44:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001b48:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8001b4c:	f7ff fbe4 	bl	8001318 <GenerateSineValue>
 8001b50:	eef0 7a40 	vmov.f32	s15, s0
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
        	step_angle_2 = GenerateStepValue(55.0f, 90.0f, 180.0f);
 8001b5a:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001b98 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001b5e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001ba0 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001b62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001ba4 <HAL_TIM_PeriodElapsedCallback+0x150>
 8001b66:	f7ff fc63 	bl	8001430 <GenerateStepValue>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001b70:	edc3 7a00 	vstr	s15, [r3]
        }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40000c00 	.word	0x40000c00
 8001b80:	20000300 	.word	0x20000300
 8001b84:	200002f8 	.word	0x200002f8
 8001b88:	4451c000 	.word	0x4451c000
 8001b8c:	4451c000 	.word	0x4451c000
 8001b90:	200002fc 	.word	0x200002fc
 8001b94:	40000400 	.word	0x40000400
 8001b98:	43340000 	.word	0x43340000
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	42b40000 	.word	0x42b40000
 8001ba4:	425c0000 	.word	0x425c0000
 8001ba8:	20000018 	.word	0x20000018

08001bac <send_data_non_blocking>:
void send_data(float v1, float v2) {
    int len = snprintf(uart_buf, sizeof(uart_buf), "%.3f,%.3f\r\n", v1, v2);
    HAL_UART_Transmit(&huart6, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
}

void send_data_non_blocking(float v1, float v2) {
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	edc7 0a00 	vstr	s1, [r7]
    static char buf[50];

    if (!busy) {
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <send_data_non_blocking+0x64>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d120      	bne.n	8001c06 <send_data_non_blocking+0x5a>
        int len = snprintf(buf, sizeof(buf), "%.2f,%.2f\r\n", v1, v2);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fcc7 	bl	8000558 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	6838      	ldr	r0, [r7, #0]
 8001bd0:	f7fe fcc2 	bl	8000558 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bdc:	e9cd 4500 	strd	r4, r5, [sp]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <send_data_non_blocking+0x68>)
 8001be2:	2132      	movs	r1, #50	; 0x32
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <send_data_non_blocking+0x6c>)
 8001be6:	f005 fa1b 	bl	8007020 <sniprintf>
 8001bea:	60f8      	str	r0, [r7, #12]
        if (HAL_UART_Transmit_IT(&huart6, (uint8_t*)buf, len) == HAL_OK) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4909      	ldr	r1, [pc, #36]	; (8001c18 <send_data_non_blocking+0x6c>)
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <send_data_non_blocking+0x70>)
 8001bf6:	f003 fe75 	bl	80058e4 <HAL_UART_Transmit_IT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <send_data_non_blocking+0x5a>
            busy = 1;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <send_data_non_blocking+0x64>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000304 	.word	0x20000304
 8001c14:	0800a014 	.word	0x0800a014
 8001c18:	20000320 	.word	0x20000320
 8001c1c:	20000478 	.word	0x20000478

08001c20 <HAL_UART_TxCpltCallback>:

// В прерывании окончания передачи:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_UART_TxCpltCallback+0x24>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <HAL_UART_TxCpltCallback+0x18>
        busy = 0;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_UART_TxCpltCallback+0x28>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
    }
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40011400 	.word	0x40011400
 8001c48:	20000304 	.word	0x20000304

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b090      	sub	sp, #64	; 0x40
 8001c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c52:	f000 fd97 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c56:	f000 f8d1 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5a:	f7ff fa93 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c5e:	f7ff fa71 	bl	8001144 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c62:	f7ff f97b 	bl	8000f5c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c66:	f000 fa93 	bl	8002190 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001c6a:	f000 fb63 	bl	8002334 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001c6e:	f000 fb13 	bl	8002298 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001c72:	f000 fce3 	bl	800263c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8001c76:	f000 fbb7 	bl	80023e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	484d      	ldr	r0, [pc, #308]	; (8001db4 <main+0x168>)
 8001c7e:	f002 fe09 	bl	8004894 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001c82:	2100      	movs	r1, #0
 8001c84:	484c      	ldr	r0, [pc, #304]	; (8001db8 <main+0x16c>)
 8001c86:	f003 fc3b 	bl	8005500 <HAL_TIMEx_PWMN_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 4);
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	494b      	ldr	r1, [pc, #300]	; (8001dbc <main+0x170>)
 8001c8e:	484c      	ldr	r0, [pc, #304]	; (8001dc0 <main+0x174>)
 8001c90:	f000 fe2e 	bl	80028f0 <HAL_ADC_Start_DMA>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <main+0x168>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <main+0x16c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim3);
 8001ca4:	4847      	ldr	r0, [pc, #284]	; (8001dc4 <main+0x178>)
 8001ca6:	f002 fd43 	bl	8004730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001caa:	4847      	ldr	r0, [pc, #284]	; (8001dc8 <main+0x17c>)
 8001cac:	f002 fd40 	bl	8004730 <HAL_TIM_Base_Start_IT>

  CorrectorState corrector_state1 = {0};
 8001cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  CorrectorState corrector_state2 = {0};
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  CorrectorCoefficients corrector_coeffs;

  Corrector_Init(&corrector_coeffs);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fafc 	bl	80012cc <Corrector_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FilterADC(adc_values);
 8001cd4:	4839      	ldr	r0, [pc, #228]	; (8001dbc <main+0x170>)
 8001cd6:	f7ff fd69 	bl	80017ac <FilterADC>
	  ConvertADCToAngles(adc_raw_avg, &angle_pot1, &angle_pot2, &angle_enc1, &angle_enc2);
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <main+0x180>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <main+0x184>)
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <main+0x188>)
 8001ce2:	493d      	ldr	r1, [pc, #244]	; (8001dd8 <main+0x18c>)
 8001ce4:	483d      	ldr	r0, [pc, #244]	; (8001ddc <main+0x190>)
 8001ce6:	f7ff fdb1 	bl	800184c <ConvertADCToAngles>


	  if (input_mode) // Если true то используем потенциометры для управления
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <main+0x194>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03e      	beq.n	8001d72 <main+0x126>
	      {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // Включить LED PB12
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	483a      	ldr	r0, [pc, #232]	; (8001de4 <main+0x198>)
 8001cfc:	f002 f83e 	bl	8003d7c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);  // Выключить LED PB3
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d06:	4838      	ldr	r0, [pc, #224]	; (8001de8 <main+0x19c>)
 8001d08:	f002 f838 	bl	8003d7c <HAL_GPIO_WritePin>
	        //ControlMotor2(angle_pot1);
	        //ControlMotor1(angle_pot2);
	        pwm2 = Corrector_Update(&corrector_coeffs, &corrector_state2, angle_pot1, angle_enc1);
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <main+0x18c>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <main+0x184>)
 8001d14:	ed93 7a00 	vldr	s14, [r3]
 8001d18:	f107 0218 	add.w	r2, r7, #24
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	eef0 0a47 	vmov.f32	s1, s14
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fc41 	bl	80015b0 <Corrector_Update>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <main+0x1a0>)
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
	        pwm1 = Corrector_Update(&corrector_coeffs, &corrector_state1, sine_angle_2, angle_enc1);
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <main+0x1a4>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <main+0x184>)
 8001d46:	ed93 7a00 	vldr	s14, [r3]
 8001d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	eef0 0a47 	vmov.f32	s1, s14
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc28 	bl	80015b0 <Corrector_Update>
 8001d60:	4603      	mov	r3, r0
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <main+0x1a8>)
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
 8001d70:	e7b0      	b.n	8001cd4 <main+0x88>
	        //SetDirection2(false); //против часовой

	      }
	      else // Если false то используем заготовленный сигнал sin
	      {
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // Выключить LED PB12
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <main+0x198>)
 8001d7a:	f001 ffff 	bl	8003d7c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);    // Включить LED PB3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d84:	4818      	ldr	r0, [pc, #96]	; (8001de8 <main+0x19c>)
 8001d86:	f001 fff9 	bl	8003d7c <HAL_GPIO_WritePin>
	        ControlMotor2(step_angle_2);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <main+0x1ac>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f7ff fcec 	bl	8001770 <ControlMotor2>
	        //pwm2 = Corrector_Update(&corrector_coeffs, &corrector_state2, sine_angle_2, angle_enc1);
	        //ControlMotor2(sine_angle_2);
	        send_data_non_blocking(step_angle_2, angle_enc1);
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <main+0x1ac>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <main+0x184>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	eef0 0a47 	vmov.f32	s1, s14
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	f7ff fefe 	bl	8001bac <send_data_non_blocking>
	  FilterADC(adc_values);
 8001db0:	e790      	b.n	8001cd4 <main+0x88>
 8001db2:	bf00      	nop
 8001db4:	200003e8 	.word	0x200003e8
 8001db8:	20000358 	.word	0x20000358
 8001dbc:	200002c0 	.word	0x200002c0
 8001dc0:	20000214 	.word	0x20000214
 8001dc4:	200003a0 	.word	0x200003a0
 8001dc8:	20000430 	.word	0x20000430
 8001dcc:	200002f0 	.word	0x200002f0
 8001dd0:	200002ec 	.word	0x200002ec
 8001dd4:	200002e8 	.word	0x200002e8
 8001dd8:	200002e4 	.word	0x200002e4
 8001ddc:	200002d0 	.word	0x200002d0
 8001de0:	200002bc 	.word	0x200002bc
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020000 	.word	0x40020000
 8001dec:	200002fc 	.word	0x200002fc
 8001df0:	20000014 	.word	0x20000014
 8001df4:	200002f8 	.word	0x200002f8
 8001df8:	20000018 	.word	0x20000018

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	; 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	; 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 fc96 	bl	800673c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <SystemClock_Config+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e64:	2310      	movs	r3, #16
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001e74:	2354      	movs	r3, #84	; 0x54
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 ffab 	bl	8003de0 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e90:	f000 f81e 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fa0d 	bl	80042d0 <HAL_RCC_ClockConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ebc:	f000 f808 	bl	8001ed0 <Error_Handler>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3750      	adds	r7, #80	; 0x50
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>
	...

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f78:	f000 fc56 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f84:	2010      	movs	r0, #16
 8001f86:	f001 ff13 	bl	8003db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM3_IRQHandler+0x10>)
 8001f96:	f002 fd2d 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003a0 	.word	0x200003a0

08001fa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM5_IRQHandler+0x10>)
 8001faa:	f002 fd23 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000430 	.word	0x20000430

08001fb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fbe:	f001 faef 	bl	80035a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000025c 	.word	0x2000025c

08001fcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <USART6_IRQHandler+0x10>)
 8001fd2:	f003 fccd 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000478 	.word	0x20000478

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_kill>:

int _kill(int pid, int sig)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffa:	f004 fb75 	bl	80066e8 <__errno>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2216      	movs	r2, #22
 8002002:	601a      	str	r2, [r3, #0]
  return -1;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_exit>:

void _exit (int status)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffe7 	bl	8001ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002022:	e7fe      	b.n	8002022 <_exit+0x12>

08002024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	e00a      	b.n	800204c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002036:	f3af 8000 	nop.w
 800203a:	4601      	mov	r1, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	60ba      	str	r2, [r7, #8]
 8002042:	b2ca      	uxtb	r2, r1
 8002044:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	dbf0      	blt.n	8002036 <_read+0x12>
  }

  return len;
 8002054:	687b      	ldr	r3, [r7, #4]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e009      	b.n	8002084 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbf1      	blt.n	8002070 <_write+0x12>
  }
  return len;
 800208c:	687b      	ldr	r3, [r7, #4]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_close>:

int _close(int file)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	605a      	str	r2, [r3, #4]
  return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_isatty>:

int _isatty(int file)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <_sbrk+0x5c>)
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <_sbrk+0x60>)
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002130:	f004 fada 	bl	80066e8 <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20010000 	.word	0x20010000
 8002160:	00000400 	.word	0x00000400
 8002164:	20000354 	.word	0x20000354
 8002168:	200004d0 	.word	0x200004d0

0800216c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <SystemInit+0x20>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <SystemInit+0x20>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	; 0x48
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2220      	movs	r2, #32
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fabe 	bl	800673c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <MX_TIM1_Init+0x100>)
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <MX_TIM1_Init+0x104>)
 80021c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <MX_TIM1_Init+0x100>)
 80021c8:	2203      	movs	r2, #3
 80021ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <MX_TIM1_Init+0x100>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_TIM1_Init+0x100>)
 80021d4:	f240 3247 	movw	r2, #839	; 0x347
 80021d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <MX_TIM1_Init+0x100>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <MX_TIM1_Init+0x100>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <MX_TIM1_Init+0x100>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <MX_TIM1_Init+0x100>)
 80021ee:	f002 fb01 	bl	80047f4 <HAL_TIM_PWM_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80021f8:	f7ff fe6a 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002208:	4619      	mov	r1, r3
 800220a:	4821      	ldr	r0, [pc, #132]	; (8002290 <MX_TIM1_Init+0x100>)
 800220c:	f003 fa24 	bl	8005658 <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002216:	f7ff fe5b 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800221a:	2360      	movs	r3, #96	; 0x60
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002226:	2308      	movs	r3, #8
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223a:	2200      	movs	r2, #0
 800223c:	4619      	mov	r1, r3
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <MX_TIM1_Init+0x100>)
 8002240:	f002 fce0 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800224a:	f7ff fe41 	bl	8001ed0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002266:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM1_Init+0x100>)
 8002272:	f003 fa5f 	bl	8005734 <HAL_TIMEx_ConfigBreakDeadTime>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800227c:	f7ff fe28 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM1_Init+0x100>)
 8002282:	f000 f97b 	bl	800257c <HAL_TIM_MspPostInit>

}
 8002286:	bf00      	nop
 8002288:	3748      	adds	r7, #72	; 0x48
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000358 	.word	0x20000358
 8002294:	40010000 	.word	0x40010000

08002298 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_TIM3_Init+0x94>)
 80022b6:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <MX_TIM3_Init+0x98>)
 80022b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <MX_TIM3_Init+0x94>)
 80022bc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80022c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <MX_TIM3_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_TIM3_Init+0x94>)
 80022ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <MX_TIM3_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_TIM3_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <MX_TIM3_Init+0x94>)
 80022de:	f002 f9d7 	bl	8004690 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80022e8:	f7ff fdf2 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <MX_TIM3_Init+0x94>)
 80022fa:	f002 fd45 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff fde4 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002310:	463b      	mov	r3, r7
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_TIM3_Init+0x94>)
 8002316:	f003 f99f 	bl	8005658 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002320:	f7ff fdd6 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200003a0 	.word	0x200003a0
 8002330:	40000400 	.word	0x40000400

08002334 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233a:	f107 0320 	add.w	r3, r7, #32
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]
 8002352:	615a      	str	r2, [r3, #20]
 8002354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_TIM4_Init+0xac>)
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <MX_TIM4_Init+0xb0>)
 800235a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_TIM4_Init+0xac>)
 800235e:	2203      	movs	r2, #3
 8002360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_TIM4_Init+0xac>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 839;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_TIM4_Init+0xac>)
 800236a:	f240 3247 	movw	r2, #839	; 0x347
 800236e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_TIM4_Init+0xac>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_TIM4_Init+0xac>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800237c:	4818      	ldr	r0, [pc, #96]	; (80023e0 <MX_TIM4_Init+0xac>)
 800237e:	f002 fa39 	bl	80047f4 <HAL_TIM_PWM_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002388:	f7ff fda2 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002394:	f107 0320 	add.w	r3, r7, #32
 8002398:	4619      	mov	r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	; (80023e0 <MX_TIM4_Init+0xac>)
 800239c:	f003 f95c 	bl	8005658 <HAL_TIMEx_MasterConfigSynchronization>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80023a6:	f7ff fd93 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023aa:	2360      	movs	r3, #96	; 0x60
 80023ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80023b2:	2302      	movs	r3, #2
 80023b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2204      	movs	r2, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4807      	ldr	r0, [pc, #28]	; (80023e0 <MX_TIM4_Init+0xac>)
 80023c2:	f002 fc1f 	bl	8004c04 <HAL_TIM_PWM_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80023cc:	f7ff fd80 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023d0:	4803      	ldr	r0, [pc, #12]	; (80023e0 <MX_TIM4_Init+0xac>)
 80023d2:	f000 f8d3 	bl	800257c <HAL_TIM_MspPostInit>

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200003e8 	.word	0x200003e8
 80023e4:	40000800 	.word	0x40000800

080023e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	463b      	mov	r3, r7
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <MX_TIM5_Init+0x90>)
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <MX_TIM5_Init+0x94>)
 8002408:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <MX_TIM5_Init+0x90>)
 800240c:	2253      	movs	r2, #83	; 0x53
 800240e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <MX_TIM5_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 221;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <MX_TIM5_Init+0x90>)
 8002418:	22dd      	movs	r2, #221	; 0xdd
 800241a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <MX_TIM5_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_TIM5_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <MX_TIM5_Init+0x90>)
 800242a:	f002 f931 	bl	8004690 <HAL_TIM_Base_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002434:	f7ff fd4c 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	4619      	mov	r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <MX_TIM5_Init+0x90>)
 8002446:	f002 fc9f 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002450:	f7ff fd3e 	bl	8001ed0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_TIM5_Init+0x90>)
 8002462:	f003 f8f9 	bl	8005658 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800246c:	f7ff fd30 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000430 	.word	0x20000430
 800247c:	40000c00 	.word	0x40000c00

08002480 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_TIM_PWM_MspInit+0x64>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024ae:	e012      	b.n	80024d6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_TIM_PWM_MspInit+0x6c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10d      	bne.n	80024d6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_TIM_PWM_MspInit+0x68>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40000800 	.word	0x40000800

080024f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_TIM_Base_MspInit+0x80>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d116      	bne.n	8002530 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2101      	movs	r1, #1
 8002522:	201d      	movs	r0, #29
 8002524:	f000 fe6d 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002528:	201d      	movs	r0, #29
 800252a:	f000 fe86 	bl	800323a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800252e:	e01a      	b.n	8002566 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM5)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_TIM_Base_MspInit+0x88>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d115      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_TIM_Base_MspInit+0x84>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2032      	movs	r0, #50	; 0x32
 800255c:	f000 fe51 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f000 fe6a 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40000400 	.word	0x40000400
 8002574:	40023800 	.word	0x40023800
 8002578:	40000c00 	.word	0x40000c00

0800257c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_TIM_MspPostInit+0xb0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d11f      	bne.n	80025de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4817      	ldr	r0, [pc, #92]	; (8002634 <HAL_TIM_MspPostInit+0xb8>)
 80025d8:	f001 fa4c 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025dc:	e022      	b.n	8002624 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <HAL_TIM_MspPostInit+0xbc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d11d      	bne.n	8002624 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_TIM_MspPostInit+0xb4>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002614:	2302      	movs	r3, #2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_TIM_MspPostInit+0xb8>)
 8002620:	f001 fa28 	bl	8003a74 <HAL_GPIO_Init>
}
 8002624:	bf00      	nop
 8002626:	3728      	adds	r7, #40	; 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40010000 	.word	0x40010000
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400
 8002638:	40000800 	.word	0x40000800

0800263c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <MX_USART6_UART_Init+0x50>)
 8002644:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800264c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002662:	220c      	movs	r2, #12
 8002664:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_USART6_UART_Init+0x4c>)
 8002674:	f003 f8e9 	bl	800584a <HAL_UART_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800267e:	f7ff fc27 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000478 	.word	0x20000478
 800268c:	40011400 	.word	0x40011400

08002690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_UART_MspInit+0x94>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d134      	bne.n	800271c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_UART_MspInit+0x98>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026fc:	2308      	movs	r3, #8
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4809      	ldr	r0, [pc, #36]	; (800272c <HAL_UART_MspInit+0x9c>)
 8002708:	f001 f9b4 	bl	8003a74 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	2047      	movs	r0, #71	; 0x47
 8002712:	f000 fd76 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002716:	2047      	movs	r0, #71	; 0x47
 8002718:	f000 fd8f 	bl	800323a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40011400 	.word	0x40011400
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000

08002730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopFillZerobss+0x26>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275a:	f7ff fd07 	bl	800216c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800275e:	f003 ffc9 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002762:	f7ff fa73 	bl	8001c4c <main>
  bx  lr    
 8002766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002774:	0800a7fc 	.word	0x0800a7fc
  ldr r2, =_sbss
 8002778:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800277c:	200004d0 	.word	0x200004d0

08002780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC_IRQHandler>
	...

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 fd1d 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	200f      	movs	r0, #15
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fb90 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fd35 	bl	8003256 <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 fcfd 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000001c 	.word	0x2000001c
 8002820:	20000024 	.word	0x20000024
 8002824:	20000020 	.word	0x20000020

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000024 	.word	0x20000024
 800284c:	200004bc 	.word	0x200004bc

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200004bc 	.word	0x200004bc

08002868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e033      	b.n	80028e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fbe4 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ae:	f023 0302 	bic.w	r3, r3, #2
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa48 	bl	8002d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
 80028d6:	e001      	b.n	80028dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Start_DMA+0x1e>
 800290a:	2302      	movs	r3, #2
 800290c:	e0ce      	b.n	8002aac <HAL_ADC_Start_DMA+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d018      	beq.n	8002956 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002934:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_ADC_Start_DMA+0x1c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5f      	ldr	r2, [pc, #380]	; (8002ab8 <HAL_ADC_Start_DMA+0x1c8>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9a      	lsrs	r2, r3, #18
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002948:	e002      	b.n	8002950 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	3b01      	subs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002964:	d107      	bne.n	8002976 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002974:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 8086 	bne.w	8002a92 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d106      	bne.n	80029d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f023 0206 	bic.w	r2, r3, #6
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
 80029d2:	e002      	b.n	80029da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <HAL_ADC_Start_DMA+0x1cc>)
 80029e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_ADC_Start_DMA+0x1d0>)
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <HAL_ADC_Start_DMA+0x1d4>)
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <HAL_ADC_Start_DMA+0x1d8>)
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a16:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a26:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	334c      	adds	r3, #76	; 0x4c
 8002a32:	4619      	mov	r1, r3
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f000 fcc8 	bl	80033cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d129      	bne.n	8002aaa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	e020      	b.n	8002aaa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_ADC_Start_DMA+0x1dc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11b      	bne.n	8002aaa <HAL_ADC_Start_DMA+0x1ba>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d114      	bne.n	8002aaa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e00b      	b.n	8002aaa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	431bde83 	.word	0x431bde83
 8002abc:	40012300 	.word	0x40012300
 8002ac0:	08002f49 	.word	0x08002f49
 8002ac4:	08003003 	.word	0x08003003
 8002ac8:	0800301f 	.word	0x0800301f
 8002acc:	40012000 	.word	0x40012000

08002ad0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e105      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x228>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d925      	bls.n	8002b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b1e      	subs	r3, #30
 8002b4e:	2207      	movs	r2, #7
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4603      	mov	r3, r0
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4403      	add	r3, r0
 8002b76:	3b1e      	subs	r3, #30
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	e022      	b.n	8002bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	2207      	movs	r2, #7
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4403      	add	r3, r0
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d824      	bhi.n	8002c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b05      	subs	r3, #5
 8002be4:	221f      	movs	r2, #31
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4618      	mov	r0, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b05      	subs	r3, #5
 8002c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1a:	e04c      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d824      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b23      	subs	r3, #35	; 0x23
 8002c36:	221f      	movs	r2, #31
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b23      	subs	r3, #35	; 0x23
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6c:	e023      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b41      	subs	r3, #65	; 0x41
 8002c80:	221f      	movs	r2, #31
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b41      	subs	r3, #65	; 0x41
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_ADC_ConfigChannel+0x234>)
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_ADC_ConfigChannel+0x238>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b12      	cmp	r3, #18
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_ADC_ConfigChannel+0x238>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d123      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d003      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b11      	cmp	r3, #17
 8002cf0:	d11b      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d111      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_ADC_ConfigChannel+0x23c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <HAL_ADC_ConfigChannel+0x240>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9a      	lsrs	r2, r3, #18
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d1c:	e002      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f9      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40012300 	.word	0x40012300
 8002d44:	40012000 	.word	0x40012000
 8002d48:	2000001c 	.word	0x2000001c
 8002d4c:	431bde83 	.word	0x431bde83

08002d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d58:	4b79      	ldr	r3, [pc, #484]	; (8002f40 <ADC_Init+0x1f0>)
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6899      	ldr	r1, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <ADC_Init+0x1f4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6899      	ldr	r1, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	e00f      	b.n	8002e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0202 	bic.w	r2, r2, #2
 8002e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e1b      	ldrb	r3, [r3, #24]
 8002e68:	005a      	lsls	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	035a      	lsls	r2, r3, #13
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e007      	b.n	8002ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	051a      	lsls	r2, r3, #20
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f06:	025a      	lsls	r2, r3, #9
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	029a      	lsls	r2, r3, #10
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	0f000001 	.word	0x0f000001

08002f48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13c      	bne.n	8002fdc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d12b      	bne.n	8002fd4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d127      	bne.n	8002fd4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d119      	bne.n	8002fd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fd7b 	bl	8002ad0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fda:	e00e      	b.n	8002ffa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff fd85 	bl	8002af8 <HAL_ADC_ErrorCallback>
}
 8002fee:	e004      	b.n	8002ffa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fd67 	bl	8002ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fd5a 	bl	8002af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	; (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <__NVIC_EnableIRQ+0x38>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	; (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff3e 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff31 	bl	80030b0 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff fae8 	bl	8002850 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e099      	b.n	80033c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ac:	e00f      	b.n	80032ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ae:	f7ff facf 	bl	8002850 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d908      	bls.n	80032ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e078      	b.n	80033c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e8      	bne.n	80032ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <HAL_DMA_Init+0x158>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4313      	orrs	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b04      	cmp	r3, #4
 8003360:	d117      	bne.n	8003392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb01 	bl	800397c <DMA_CheckFifoParam>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800338e:	2301      	movs	r3, #1
 8003390:	e016      	b.n	80033c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fab8 	bl	8003910 <DMA_CalcBaseAndBitshift>
 80033a0:	4603      	mov	r3, r0
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	223f      	movs	r2, #63	; 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	f010803f 	.word	0xf010803f

080033cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_DMA_Start_IT+0x26>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e040      	b.n	8003474 <HAL_DMA_Start_IT+0xa8>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d12f      	bne.n	8003466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa4a 	bl	80038b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	223f      	movs	r2, #63	; 0x3f
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0216 	orr.w	r2, r2, #22
 800343a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e005      	b.n	8003472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003472:	7dfb      	ldrb	r3, [r7, #23]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800348a:	f7ff f9e1 	bl	8002850 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d008      	beq.n	80034ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e052      	b.n	8003554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0216 	bic.w	r2, r2, #22
 80034bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_DMA_Abort+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fe:	e013      	b.n	8003528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003500:	f7ff f9a6 	bl	8002850 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b05      	cmp	r3, #5
 800350c:	d90c      	bls.n	8003528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e015      	b.n	8003554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e4      	bne.n	8003500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	223f      	movs	r2, #63	; 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e00c      	b.n	8003594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2205      	movs	r2, #5
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ac:	4b8e      	ldr	r3, [pc, #568]	; (80037e8 <HAL_DMA_IRQHandler+0x248>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a8e      	ldr	r2, [pc, #568]	; (80037ec <HAL_DMA_IRQHandler+0x24c>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2208      	movs	r2, #8
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2208      	movs	r2, #8
 80035fa:	409a      	lsls	r2, r3
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2201      	movs	r2, #1
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	2204      	movs	r2, #4
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2204      	movs	r2, #4
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2210      	movs	r2, #16
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d043      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03c      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2210      	movs	r2, #16
 800369c:	409a      	lsls	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d024      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
 80036ce:	e01f      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
 80036e0:	e016      	b.n	8003710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d107      	bne.n	8003700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0208 	bic.w	r2, r2, #8
 80036fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	2220      	movs	r2, #32
 8003716:	409a      	lsls	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 808f 	beq.w	8003840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8087 	beq.w	8003840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2220      	movs	r2, #32
 8003738:	409a      	lsls	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b05      	cmp	r3, #5
 8003748:	d136      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0216 	bic.w	r2, r2, #22
 8003758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_DMA_IRQHandler+0x1da>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0208 	bic.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	223f      	movs	r2, #63	; 0x3f
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d07e      	beq.n	80038ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
        }
        return;
 80037b6:	e079      	b.n	80038ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d031      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e02c      	b.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
 80037e6:	bf00      	nop
 80037e8:	2000001c 	.word	0x2000001c
 80037ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e01e      	b.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0210 	bic.w	r2, r2, #16
 800381e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	d032      	beq.n	80038ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d022      	beq.n	800389a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2205      	movs	r2, #5
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d307      	bcc.n	8003888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_DMA_IRQHandler+0x2cc>
 8003886:	e000      	b.n	800388a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e000      	b.n	80038ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80038ac:	bf00      	nop
    }
  }
}
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d108      	bne.n	80038f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038f2:	e007      	b.n	8003904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3b10      	subs	r3, #16
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <DMA_CalcBaseAndBitshift+0x64>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <DMA_CalcBaseAndBitshift+0x68>)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d909      	bls.n	8003952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	1d1a      	adds	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	659a      	str	r2, [r3, #88]	; 0x58
 8003950:	e007      	b.n	8003962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800395a:	f023 0303 	bic.w	r3, r3, #3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	aaaaaaab 	.word	0xaaaaaaab
 8003978:	0800a038 	.word	0x0800a038

0800397c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11f      	bne.n	80039d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d856      	bhi.n	8003a4a <DMA_CheckFifoParam+0xce>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <DMA_CheckFifoParam+0x28>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c7 	.word	0x080039c7
 80039ac:	080039b5 	.word	0x080039b5
 80039b0:	08003a4b 	.word	0x08003a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d046      	beq.n	8003a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c4:	e043      	b.n	8003a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ce:	d140      	bne.n	8003a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d4:	e03d      	b.n	8003a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	d121      	bne.n	8003a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d837      	bhi.n	8003a56 <DMA_CheckFifoParam+0xda>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <DMA_CheckFifoParam+0x70>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a03 	.word	0x08003a03
 80039f4:	080039fd 	.word	0x080039fd
 80039f8:	08003a15 	.word	0x08003a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e030      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d025      	beq.n	8003a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a12:	e022      	b.n	8003a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a1c:	d11f      	bne.n	8003a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a22:	e01c      	b.n	8003a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d903      	bls.n	8003a32 <DMA_CheckFifoParam+0xb6>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d003      	beq.n	8003a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a30:	e018      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      break;
 8003a36:	e015      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e00b      	b.n	8003a62 <DMA_CheckFifoParam+0xe6>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e00a      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e008      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;
 8003a52:	bf00      	nop
 8003a54:	e006      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <DMA_CheckFifoParam+0xe8>
      break;
 8003a62:	bf00      	nop
    }
  } 
  
  return status; 
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e159      	b.n	8003d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a90:	2201      	movs	r2, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	f040 8148 	bne.w	8003d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d005      	beq.n	8003ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d130      	bne.n	8003b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0201 	and.w	r2, r3, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d017      	beq.n	8003b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d123      	bne.n	8003bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3208      	adds	r2, #8
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a2 	beq.w	8003d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c16:	4a52      	ldr	r2, [pc, #328]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a49      	ldr	r2, [pc, #292]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x202>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x1fe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a47      	ldr	r2, [pc, #284]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x1fa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a46      	ldr	r2, [pc, #280]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x1f6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a45      	ldr	r2, [pc, #276]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x1f2>
 8003c62:	2304      	movs	r3, #4
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c88:	4935      	ldr	r1, [pc, #212]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a2f      	ldr	r2, [pc, #188]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d14:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d38:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f aea2 	bls.w	8003a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d8c:	787b      	ldrb	r3, [r7, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d98:	e003      	b.n	8003da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	041a      	lsls	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fe14 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40013c00 	.word	0x40013c00

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e267      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d075      	beq.n	8003eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d112      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b82      	ldr	r3, [pc, #520]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x108>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d157      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e242      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x74>
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x98>
 8003e5e:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a6f      	ldr	r2, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6c      	ldr	r2, [pc, #432]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xb0>
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a65      	ldr	r2, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fcda 	bl	8002850 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fcd6 	bl	8002850 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e207      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc0>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fcc6 	bl	8002850 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fcc2 	bl	8002850 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1f3      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b51      	ldr	r3, [pc, #324]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xe8>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b44      	ldr	r3, [pc, #272]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c7      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4937      	ldr	r1, [pc, #220]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b34      	ldr	r3, [pc, #208]	; (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fe fc7b 	bl	8002850 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fe fc77 	bl	8002850 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a8      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4925      	ldr	r1, [pc, #148]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x244>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fc5a 	bl	8002850 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fe fc56 	bl	8002850 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e187      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d036      	beq.n	8004038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x248>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fe fc3a 	bl	8002850 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe fc36 	bl	8002850 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e167      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCC_OscConfig+0x248>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fe fc23 	bl	8002850 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	e00e      	b.n	800402c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400e:	f7fe fc1f 	bl	8002850 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d907      	bls.n	800402c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e150      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	42470000 	.word	0x42470000
 8004028:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ea      	bne.n	800400e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8097 	beq.w	8004174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b7d      	ldr	r3, [pc, #500]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a7c      	ldr	r2, [pc, #496]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b7a      	ldr	r3, [pc, #488]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2301      	movs	r3, #1
 8004074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b77      	ldr	r3, [pc, #476]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d118      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004082:	4b74      	ldr	r3, [pc, #464]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408e:	f7fe fbdf 	bl	8002850 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fe fbdb 	bl	8002850 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e10c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_OscConfig+0x474>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ea>
 80040bc:	4b64      	ldr	r3, [pc, #400]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a63      	ldr	r2, [pc, #396]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e01c      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x30c>
 80040d2:	4b5f      	ldr	r3, [pc, #380]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
 80040de:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	4a5b      	ldr	r2, [pc, #364]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x324>
 80040ec:	4b58      	ldr	r3, [pc, #352]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70
 80040f8:	4b55      	ldr	r3, [pc, #340]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a54      	ldr	r2, [pc, #336]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d015      	beq.n	8004138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe fba0 	bl	8002850 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe fb9c 	bl	8002850 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0cb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0ee      	beq.n	8004114 <HAL_RCC_OscConfig+0x334>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fe fb8a 	bl	8002850 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe fb86 	bl	8002850 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0b5      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ee      	bne.n	8004140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004172:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a1 	beq.w	80042c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417e:	4b34      	ldr	r3, [pc, #208]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d05c      	beq.n	8004244 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d141      	bne.n	8004216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fe fb5a 	bl	8002850 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe fb56 	bl	8002850 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e087      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	491b      	ldr	r1, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ee:	f7fe fb2f 	bl	8002850 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fe fb2b 	bl	8002850 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x416>
 8004214:	e054      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_OscConfig+0x478>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe fb18 	bl	8002850 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe fb14 	bl	8002850 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e045      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_RCC_OscConfig+0x470>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x444>
 8004242:	e03d      	b.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e038      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_RCC_OscConfig+0x4ec>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d028      	beq.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d121      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d11a      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0cc      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d90c      	bls.n	800430c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b65      	ldr	r3, [pc, #404]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b63      	ldr	r3, [pc, #396]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0b8      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	4a58      	ldr	r2, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	494d      	ldr	r1, [pc, #308]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d044      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d119      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	2b03      	cmp	r3, #3
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e067      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 0203 	bic.w	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4934      	ldr	r1, [pc, #208]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fe fa46 	bl	8002850 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	e00a      	b.n	80043de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c8:	f7fe fa42 	bl	8002850 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e04f      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 020c 	and.w	r2, r3, #12
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d1eb      	bne.n	80043c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d20c      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e032      	b.n	800447e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4916      	ldr	r1, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490e      	ldr	r1, [pc, #56]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004456:	f000 f821 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	490a      	ldr	r1, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe f9a6 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00
 800448c:	40023800 	.word	0x40023800
 8004490:	0800a020 	.word	0x0800a020
 8004494:	2000001c 	.word	0x2000001c
 8004498:	20000020 	.word	0x20000020

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b090      	sub	sp, #64	; 0x40
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	637b      	str	r3, [r7, #52]	; 0x34
 80044a8:	2300      	movs	r3, #0
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ac:	2300      	movs	r3, #0
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00d      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x40>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	f200 80a1 	bhi.w	8004608 <HAL_RCC_GetSysClockFreq+0x16c>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ce:	e09b      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_GetSysClockFreq+0x184>)
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044d4:	e09b      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044da:	e098      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d028      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	627a      	str	r2, [r7, #36]	; 0x24
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004504:	2100      	movs	r1, #0
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 8004508:	fb03 f201 	mul.w	r2, r3, r1
 800450c:	2300      	movs	r3, #0
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	4413      	add	r3, r2
 8004514:	4a43      	ldr	r2, [pc, #268]	; (8004624 <HAL_RCC_GetSysClockFreq+0x188>)
 8004516:	fba0 1202 	umull	r1, r2, r0, r2
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451c:	460a      	mov	r2, r1
 800451e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004522:	4413      	add	r3, r2
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	2200      	movs	r2, #0
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	61fa      	str	r2, [r7, #28]
 800452e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004532:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004536:	f7fc fb8f 	bl	8000c58 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4613      	mov	r3, r2
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004542:	e053      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004544:	4b35      	ldr	r3, [pc, #212]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	2200      	movs	r2, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	617a      	str	r2, [r7, #20]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004556:	f04f 0b00 	mov.w	fp, #0
 800455a:	4652      	mov	r2, sl
 800455c:	465b      	mov	r3, fp
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	ebb2 080a 	subs.w	r8, r2, sl
 8004576:	eb63 090b 	sbc.w	r9, r3, fp
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004586:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800458a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800458e:	ebb2 0408 	subs.w	r4, r2, r8
 8004592:	eb63 0509 	sbc.w	r5, r3, r9
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	00eb      	lsls	r3, r5, #3
 80045a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a4:	00e2      	lsls	r2, r4, #3
 80045a6:	4614      	mov	r4, r2
 80045a8:	461d      	mov	r5, r3
 80045aa:	eb14 030a 	adds.w	r3, r4, sl
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	eb45 030b 	adc.w	r3, r5, fp
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045c2:	4629      	mov	r1, r5
 80045c4:	028b      	lsls	r3, r1, #10
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045cc:	4621      	mov	r1, r4
 80045ce:	028a      	lsls	r2, r1, #10
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	2200      	movs	r2, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e0:	f7fc fb3a 	bl	8000c58 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetSysClockFreq+0x180>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	3301      	adds	r3, #1
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004606:	e002      	b.n	800460e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetSysClockFreq+0x184>)
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800460c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004610:	4618      	mov	r0, r3
 8004612:	3740      	adds	r7, #64	; 0x40
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800
 8004620:	00f42400 	.word	0x00f42400
 8004624:	017d7840 	.word	0x017d7840

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2000001c 	.word	0x2000001c

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800a030 	.word	0x0800a030

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800466c:	f7ff ffdc 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0b5b      	lsrs	r3, r3, #13
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	; (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	0800a030 	.word	0x0800a030

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd ff1a 	bl	80024f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fc4a 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e044      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d013      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_TIM_Base_Start_IT+0xbc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d010      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	e007      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000

080047f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd fe30 	bl	8002480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fb98 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x24>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e022      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d109      	bne.n	80048d2 <HAL_TIM_PWM_Start+0x3e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e015      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start+0x58>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e008      	b.n	80048fe <HAL_TIM_PWM_Start+0x6a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e068      	b.n	80049d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0x82>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004914:	e013      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0x92>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004924:	e00b      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004934:	e003      	b.n	800493e <HAL_TIM_PWM_Start+0xaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2201      	movs	r2, #1
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fdb4 	bl	80054b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <HAL_TIM_PWM_Start+0x14c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d107      	bne.n	8004966 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_TIM_PWM_Start+0x14c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x10e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d013      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x10e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <HAL_TIM_PWM_Start+0x150>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x10e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIM_PWM_Start+0x154>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x10e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_TIM_PWM_Start+0x158>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIM_PWM_Start+0x10e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <HAL_TIM_PWM_Start+0x15c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d010      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	e007      	b.n	80049d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000

080049f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0202 	mvn.w	r2, #2
 8004a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa77 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa69 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa7a 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0204 	mvn.w	r2, #4
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fa4d 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa3f 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fa50 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0208 	mvn.w	r2, #8
 8004ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2204      	movs	r2, #4
 8004ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa23 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa15 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa26 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0210 	mvn.w	r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2208      	movs	r2, #8
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9f9 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9eb 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9fc 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0201 	mvn.w	r2, #1
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc ff6e 	bl	8001a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b80      	cmp	r3, #128	; 0x80
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fe24 	bl	80057ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9c1 	bl	8004f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0220 	mvn.w	r2, #32
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fdee 	bl	80057d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0ae      	b.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b0c      	cmp	r3, #12
 8004c2e:	f200 809f 	bhi.w	8004d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c6d 	.word	0x08004c6d
 8004c3c:	08004d71 	.word	0x08004d71
 8004c40:	08004d71 	.word	0x08004d71
 8004c44:	08004d71 	.word	0x08004d71
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004d71 	.word	0x08004d71
 8004c50:	08004d71 	.word	0x08004d71
 8004c54:	08004d71 	.word	0x08004d71
 8004c58:	08004cef 	.word	0x08004cef
 8004c5c:	08004d71 	.word	0x08004d71
 8004c60:	08004d71 	.word	0x08004d71
 8004c64:	08004d71 	.word	0x08004d71
 8004c68:	08004d2f 	.word	0x08004d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f9f8 	bl	8005068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6999      	ldr	r1, [r3, #24]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	619a      	str	r2, [r3, #24]
      break;
 8004caa:	e064      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa3e 	bl	8005134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      break;
 8004cec:	e043      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa89 	bl	800520c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0204 	bic.w	r2, r2, #4
 8004d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69d9      	ldr	r1, [r3, #28]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
      break;
 8004d2c:	e023      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fad3 	bl	80052e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	61da      	str	r2, [r3, #28]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
      break;
 8004d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b4      	b.n	8004f0e <HAL_TIM_ConfigClockSource+0x186>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d03e      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xd4>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	f200 8087 	bhi.w	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	f000 8086 	beq.w	8004efa <HAL_TIM_ConfigClockSource+0x172>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d87f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d01a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xa6>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d87b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d050      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d877      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d03c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xfa>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d873      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d058      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d86f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d064      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d86b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d060      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d867      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d05a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e2c:	e062      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6899      	ldr	r1, [r3, #8]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f000 fb19 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e04f      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f000 fb02 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e03c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fa76 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2150      	movs	r1, #80	; 0x50
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 facf 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e02c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fa95 	bl	80053de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2160      	movs	r1, #96	; 0x60
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fabf 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e01c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 fa56 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 faaf 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e00c      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 faa6 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004ef2:	e003      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a34      	ldr	r2, [pc, #208]	; (800504c <TIM_Base_SetConfig+0xe4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a31      	ldr	r2, [pc, #196]	; (8005050 <TIM_Base_SetConfig+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a30      	ldr	r2, [pc, #192]	; (8005054 <TIM_Base_SetConfig+0xec>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x38>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <TIM_Base_SetConfig+0xf0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <TIM_Base_SetConfig+0xe4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d017      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <TIM_Base_SetConfig+0xe8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a21      	ldr	r2, [pc, #132]	; (8005054 <TIM_Base_SetConfig+0xec>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <TIM_Base_SetConfig+0xf0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <TIM_Base_SetConfig+0xf4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <TIM_Base_SetConfig+0xf8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x8a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <TIM_Base_SetConfig+0xfc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <TIM_Base_SetConfig+0xe4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d103      	bne.n	8005038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	615a      	str	r2, [r3, #20]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0302 	bic.w	r3, r3, #2
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <TIM_OC1_SetConfig+0xc8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10c      	bne.n	80050de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0308 	bic.w	r3, r3, #8
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <TIM_OC1_SetConfig+0xc8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d111      	bne.n	800510a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40010000 	.word	0x40010000

08005134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0210 	bic.w	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0320 	bic.w	r3, r3, #32
 800517e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <TIM_OC2_SetConfig+0xd4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <TIM_OC2_SetConfig+0xd4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d113      	bne.n	80051e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000

0800520c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <TIM_OC3_SetConfig+0xd0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10d      	bne.n	8005286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a14      	ldr	r2, [pc, #80]	; (80052dc <TIM_OC3_SetConfig+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010000 	.word	0x40010000

080052e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800532a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <TIM_OC4_SetConfig+0x9c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	f043 0307 	orr.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2201      	movs	r2, #1
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1a      	ldr	r2, [r3, #32]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_TIMEx_PWMN_Start+0x24>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e022      	b.n	800556a <HAL_TIMEx_PWMN_Start+0x6a>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d109      	bne.n	800553e <HAL_TIMEx_PWMN_Start+0x3e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e015      	b.n	800556a <HAL_TIMEx_PWMN_Start+0x6a>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d109      	bne.n	8005558 <HAL_TIMEx_PWMN_Start+0x58>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e008      	b.n	800556a <HAL_TIMEx_PWMN_Start+0x6a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e063      	b.n	800563a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_TIMEx_PWMN_Start+0x82>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005580:	e013      	b.n	80055aa <HAL_TIMEx_PWMN_Start+0xaa>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d104      	bne.n	8005592 <HAL_TIMEx_PWMN_Start+0x92>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005590:	e00b      	b.n	80055aa <HAL_TIMEx_PWMN_Start+0xaa>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d104      	bne.n	80055a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a0:	e003      	b.n	80055aa <HAL_TIMEx_PWMN_Start+0xaa>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2204      	movs	r2, #4
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f924 	bl	8005800 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_TIMEx_PWMN_Start+0x144>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_TIMEx_PWMN_Start+0x104>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d013      	beq.n	8005604 <HAL_TIMEx_PWMN_Start+0x104>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_TIMEx_PWMN_Start+0x148>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_TIMEx_PWMN_Start+0x104>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIMEx_PWMN_Start+0x14c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_TIMEx_PWMN_Start+0x104>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a16      	ldr	r2, [pc, #88]	; (8005650 <HAL_TIMEx_PWMN_Start+0x150>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIMEx_PWMN_Start+0x104>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <HAL_TIMEx_PWMN_Start+0x154>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d111      	bne.n	8005628 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d010      	beq.n	8005638 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	e007      	b.n	8005638 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40014000 	.word	0x40014000

08005658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800566c:	2302      	movs	r3, #2
 800566e:	e050      	b.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056bc:	d013      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a16      	ldr	r2, [pc, #88]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a15      	ldr	r2, [pc, #84]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d10c      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40014000 	.word	0x40014000

08005734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800574c:	2302      	movs	r3, #2
 800574e:	e03d      	b.n	80057cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2204      	movs	r2, #4
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1a      	ldr	r2, [r3, #32]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	43db      	mvns	r3, r3
 8005822:	401a      	ands	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e03f      	b.n	80058dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fc ff0d 	bl	8002690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2224      	movs	r2, #36	; 0x24
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800588c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fcb6 	bl	8006200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d130      	bne.n	8005960 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Transmit_IT+0x26>
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e029      	b.n	8005962 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_UART_Transmit_IT+0x38>
 8005918:	2302      	movs	r3, #2
 800591a:	e022      	b.n	8005962 <HAL_UART_Transmit_IT+0x7e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	88fa      	ldrh	r2, [r7, #6]
 800592e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2221      	movs	r2, #33	; 0x21
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800595a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b0ba      	sub	sp, #232	; 0xe8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb5b 	bl	800608a <UART_Receive_IT>
      return;
 80059d4:	e256      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80de 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
 80059e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d1 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d011      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
 8005a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 81ed 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fae6 	bl	800608a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_UART_IRQHandler+0x17a>
 8005ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04f      	beq.n	8005b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9ee 	bl	8005ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d141      	bne.n	8005b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1d9      	bne.n	8005afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d013      	beq.n	8005b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_UART_IRQHandler+0x3dc>)
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fd fcfc 	bl	800355c <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e00e      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f990 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	e00a      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f98c 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	e006      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f988 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b96:	e170      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	bf00      	nop
    return;
 8005b9a:	e16e      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f040 814a 	bne.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8143 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 813c 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	f040 80b4 	bne.w	8005d50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8140 	beq.w	8005e7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f080 8139 	bcs.w	8005e7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	f000 8088 	beq.w	8005d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1d9      	bne.n	8005c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e1      	bne.n	8005c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d14:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd fba5 	bl	800347c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8b6 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d48:	e099      	b.n	8005e7e <HAL_UART_IRQHandler+0x50e>
 8005d4a:	bf00      	nop
 8005d4c:	08005f93 	.word	0x08005f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 808b 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d9a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e3      	bne.n	8005d76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e3      	bne.n	8005dae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	617b      	str	r3, [r7, #20]
   return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e3      	bne.n	8005df4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f83e 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e38:	e023      	b.n	8005e82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8b1 	bl	8005fba <UART_Transmit_IT>
    return;
 8005e58:	e014      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8f1 	bl	800605a <UART_EndTransmit_IT>
    return;
 8005e78:	e004      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    return;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e82:	bf00      	nop
  }
}
 8005e84:	37e8      	adds	r7, #232	; 0xe8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b095      	sub	sp, #84	; 0x54
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e5      	bne.n	8005f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d119      	bne.n	8005f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f023 0310 	bic.w	r3, r3, #16
 8005f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f64:	61ba      	str	r2, [r7, #24]
 8005f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6979      	ldr	r1, [r7, #20]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	613b      	str	r3, [r7, #16]
   return(result);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f86:	bf00      	nop
 8005f88:	3754      	adds	r7, #84	; 0x54
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff77 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b21      	cmp	r3, #33	; 0x21
 8005fcc:	d13e      	bne.n	800604c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd6:	d114      	bne.n	8006002 <UART_Transmit_IT+0x48>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d110      	bne.n	8006002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	621a      	str	r2, [r3, #32]
 8006000:	e008      	b.n	8006014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	1c59      	adds	r1, r3, #1
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6211      	str	r1, [r2, #32]
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29b      	uxth	r3, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4619      	mov	r1, r3
 8006022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10f      	bne.n	8006048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fdd0 	bl	8001c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b08c      	sub	sp, #48	; 0x30
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b22      	cmp	r3, #34	; 0x22
 800609c:	f040 80ab 	bne.w	80061f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d117      	bne.n	80060da <UART_Receive_IT+0x50>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d113      	bne.n	80060da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
 80060d8:	e026      	b.n	8006128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d007      	beq.n	80060fe <UART_Receive_IT+0x74>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <UART_Receive_IT+0x82>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e008      	b.n	800611e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006118:	b2da      	uxtb	r2, r3
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4619      	mov	r1, r3
 8006136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006138:	2b00      	cmp	r3, #0
 800613a:	d15a      	bne.n	80061f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0220 	bic.w	r2, r2, #32
 800614a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d135      	bne.n	80061e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	613b      	str	r3, [r7, #16]
   return(result);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	623a      	str	r2, [r7, #32]
 80061a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	69f9      	ldr	r1, [r7, #28]
 80061a8:	6a3a      	ldr	r2, [r7, #32]
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d10a      	bne.n	80061da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fe67 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
 80061e6:	e002      	b.n	80061ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fe4f 	bl	8005e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e002      	b.n	80061f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3730      	adds	r7, #48	; 0x30
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b0c0      	sub	sp, #256	; 0x100
 8006206:	af00      	add	r7, sp, #0
 8006208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	ea40 0301 	orr.w	r3, r0, r1
 8006228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	431a      	orrs	r2, r3
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006258:	f021 010c 	bic.w	r1, r1, #12
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006266:	430b      	orrs	r3, r1
 8006268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	6999      	ldr	r1, [r3, #24]
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	ea40 0301 	orr.w	r3, r0, r1
 8006286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b8f      	ldr	r3, [pc, #572]	; (80064cc <UART_SetConfig+0x2cc>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d005      	beq.n	80062a0 <UART_SetConfig+0xa0>
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b8d      	ldr	r3, [pc, #564]	; (80064d0 <UART_SetConfig+0x2d0>)
 800629c:	429a      	cmp	r2, r3
 800629e:	d104      	bne.n	80062aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fe f9e2 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 80062a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062a8:	e003      	b.n	80062b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062aa:	f7fe f9c9 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80062ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	f040 810c 	bne.w	80064d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062d2:	4622      	mov	r2, r4
 80062d4:	462b      	mov	r3, r5
 80062d6:	1891      	adds	r1, r2, r2
 80062d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80062da:	415b      	adcs	r3, r3
 80062dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062e2:	4621      	mov	r1, r4
 80062e4:	eb12 0801 	adds.w	r8, r2, r1
 80062e8:	4629      	mov	r1, r5
 80062ea:	eb43 0901 	adc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	4623      	mov	r3, r4
 8006308:	eb18 0303 	adds.w	r3, r8, r3
 800630c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006310:	462b      	mov	r3, r5
 8006312:	eb49 0303 	adc.w	r3, r9, r3
 8006316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800632a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800632e:	460b      	mov	r3, r1
 8006330:	18db      	adds	r3, r3, r3
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	4613      	mov	r3, r2
 8006336:	eb42 0303 	adc.w	r3, r2, r3
 800633a:	657b      	str	r3, [r7, #84]	; 0x54
 800633c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006344:	f7fa fc88 	bl	8000c58 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4b61      	ldr	r3, [pc, #388]	; (80064d4 <UART_SetConfig+0x2d4>)
 800634e:	fba3 2302 	umull	r2, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	011c      	lsls	r4, r3, #4
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	1891      	adds	r1, r2, r2
 800636e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006370:	415b      	adcs	r3, r3
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006378:	4641      	mov	r1, r8
 800637a:	eb12 0a01 	adds.w	sl, r2, r1
 800637e:	4649      	mov	r1, r9
 8006380:	eb43 0b01 	adc.w	fp, r3, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006398:	4692      	mov	sl, r2
 800639a:	469b      	mov	fp, r3
 800639c:	4643      	mov	r3, r8
 800639e:	eb1a 0303 	adds.w	r3, sl, r3
 80063a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a6:	464b      	mov	r3, r9
 80063a8:	eb4b 0303 	adc.w	r3, fp, r3
 80063ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063c4:	460b      	mov	r3, r1
 80063c6:	18db      	adds	r3, r3, r3
 80063c8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ca:	4613      	mov	r3, r2
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	647b      	str	r3, [r7, #68]	; 0x44
 80063d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063da:	f7fa fc3d 	bl	8000c58 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	4b3b      	ldr	r3, [pc, #236]	; (80064d4 <UART_SetConfig+0x2d4>)
 80063e6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2264      	movs	r2, #100	; 0x64
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	1acb      	subs	r3, r1, r3
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063fa:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <UART_SetConfig+0x2d4>)
 80063fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006408:	441c      	add	r4, r3
 800640a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	1891      	adds	r1, r2, r2
 8006422:	63b9      	str	r1, [r7, #56]	; 0x38
 8006424:	415b      	adcs	r3, r3
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800642c:	4641      	mov	r1, r8
 800642e:	1851      	adds	r1, r2, r1
 8006430:	6339      	str	r1, [r7, #48]	; 0x30
 8006432:	4649      	mov	r1, r9
 8006434:	414b      	adcs	r3, r1
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006444:	4659      	mov	r1, fp
 8006446:	00cb      	lsls	r3, r1, #3
 8006448:	4651      	mov	r1, sl
 800644a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644e:	4651      	mov	r1, sl
 8006450:	00ca      	lsls	r2, r1, #3
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	4603      	mov	r3, r0
 8006458:	4642      	mov	r2, r8
 800645a:	189b      	adds	r3, r3, r2
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006460:	464b      	mov	r3, r9
 8006462:	460a      	mov	r2, r1
 8006464:	eb42 0303 	adc.w	r3, r2, r3
 8006468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800647c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006480:	460b      	mov	r3, r1
 8006482:	18db      	adds	r3, r3, r3
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
 8006486:	4613      	mov	r3, r2
 8006488:	eb42 0303 	adc.w	r3, r2, r3
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006496:	f7fa fbdf 	bl	8000c58 <__aeabi_uldivmod>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <UART_SetConfig+0x2d4>)
 80064a0:	fba3 1302 	umull	r1, r3, r3, r2
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	2164      	movs	r1, #100	; 0x64
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	3332      	adds	r3, #50	; 0x32
 80064b2:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <UART_SetConfig+0x2d4>)
 80064b4:	fba2 2303 	umull	r2, r3, r2, r3
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	f003 0207 	and.w	r2, r3, #7
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4422      	add	r2, r4
 80064c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064c8:	e105      	b.n	80066d6 <UART_SetConfig+0x4d6>
 80064ca:	bf00      	nop
 80064cc:	40011000 	.word	0x40011000
 80064d0:	40011400 	.word	0x40011400
 80064d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064ea:	4642      	mov	r2, r8
 80064ec:	464b      	mov	r3, r9
 80064ee:	1891      	adds	r1, r2, r2
 80064f0:	6239      	str	r1, [r7, #32]
 80064f2:	415b      	adcs	r3, r3
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064fa:	4641      	mov	r1, r8
 80064fc:	1854      	adds	r4, r2, r1
 80064fe:	4649      	mov	r1, r9
 8006500:	eb43 0501 	adc.w	r5, r3, r1
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	00eb      	lsls	r3, r5, #3
 800650e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006512:	00e2      	lsls	r2, r4, #3
 8006514:	4614      	mov	r4, r2
 8006516:	461d      	mov	r5, r3
 8006518:	4643      	mov	r3, r8
 800651a:	18e3      	adds	r3, r4, r3
 800651c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006520:	464b      	mov	r3, r9
 8006522:	eb45 0303 	adc.w	r3, r5, r3
 8006526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006546:	4629      	mov	r1, r5
 8006548:	008b      	lsls	r3, r1, #2
 800654a:	4621      	mov	r1, r4
 800654c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006550:	4621      	mov	r1, r4
 8006552:	008a      	lsls	r2, r1, #2
 8006554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006558:	f7fa fb7e 	bl	8000c58 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b60      	ldr	r3, [pc, #384]	; (80066e4 <UART_SetConfig+0x4e4>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	011c      	lsls	r4, r3, #4
 800656a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	1891      	adds	r1, r2, r2
 8006582:	61b9      	str	r1, [r7, #24]
 8006584:	415b      	adcs	r3, r3
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800658c:	4641      	mov	r1, r8
 800658e:	1851      	adds	r1, r2, r1
 8006590:	6139      	str	r1, [r7, #16]
 8006592:	4649      	mov	r1, r9
 8006594:	414b      	adcs	r3, r1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065a4:	4659      	mov	r1, fp
 80065a6:	00cb      	lsls	r3, r1, #3
 80065a8:	4651      	mov	r1, sl
 80065aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ae:	4651      	mov	r1, sl
 80065b0:	00ca      	lsls	r2, r1, #3
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	4642      	mov	r2, r8
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c0:	464b      	mov	r3, r9
 80065c2:	460a      	mov	r2, r1
 80065c4:	eb42 0303 	adc.w	r3, r2, r3
 80065c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065e4:	4649      	mov	r1, r9
 80065e6:	008b      	lsls	r3, r1, #2
 80065e8:	4641      	mov	r1, r8
 80065ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ee:	4641      	mov	r1, r8
 80065f0:	008a      	lsls	r2, r1, #2
 80065f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065f6:	f7fa fb2f 	bl	8000c58 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <UART_SetConfig+0x4e4>)
 8006600:	fba3 1302 	umull	r1, r3, r3, r2
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	2164      	movs	r1, #100	; 0x64
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	3332      	adds	r3, #50	; 0x32
 8006612:	4a34      	ldr	r2, [pc, #208]	; (80066e4 <UART_SetConfig+0x4e4>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800661e:	441c      	add	r4, r3
 8006620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006624:	2200      	movs	r2, #0
 8006626:	673b      	str	r3, [r7, #112]	; 0x70
 8006628:	677a      	str	r2, [r7, #116]	; 0x74
 800662a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800662e:	4642      	mov	r2, r8
 8006630:	464b      	mov	r3, r9
 8006632:	1891      	adds	r1, r2, r2
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	415b      	adcs	r3, r3
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800663e:	4641      	mov	r1, r8
 8006640:	1851      	adds	r1, r2, r1
 8006642:	6039      	str	r1, [r7, #0]
 8006644:	4649      	mov	r1, r9
 8006646:	414b      	adcs	r3, r1
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006656:	4659      	mov	r1, fp
 8006658:	00cb      	lsls	r3, r1, #3
 800665a:	4651      	mov	r1, sl
 800665c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006660:	4651      	mov	r1, sl
 8006662:	00ca      	lsls	r2, r1, #3
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	4603      	mov	r3, r0
 800666a:	4642      	mov	r2, r8
 800666c:	189b      	adds	r3, r3, r2
 800666e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006670:	464b      	mov	r3, r9
 8006672:	460a      	mov	r2, r1
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	663b      	str	r3, [r7, #96]	; 0x60
 8006684:	667a      	str	r2, [r7, #100]	; 0x64
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006692:	4649      	mov	r1, r9
 8006694:	008b      	lsls	r3, r1, #2
 8006696:	4641      	mov	r1, r8
 8006698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669c:	4641      	mov	r1, r8
 800669e:	008a      	lsls	r2, r1, #2
 80066a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066a4:	f7fa fad8 	bl	8000c58 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <UART_SetConfig+0x4e4>)
 80066ae:	fba3 1302 	umull	r1, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2164      	movs	r1, #100	; 0x64
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	3332      	adds	r3, #50	; 0x32
 80066c0:	4a08      	ldr	r2, [pc, #32]	; (80066e4 <UART_SetConfig+0x4e4>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4422      	add	r2, r4
 80066d4:	609a      	str	r2, [r3, #8]
}
 80066d6:	bf00      	nop
 80066d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066dc:	46bd      	mov	sp, r7
 80066de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e2:	bf00      	nop
 80066e4:	51eb851f 	.word	0x51eb851f

080066e8 <__errno>:
 80066e8:	4b01      	ldr	r3, [pc, #4]	; (80066f0 <__errno+0x8>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20000028 	.word	0x20000028

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f003 fc72 	bl	8009ff0 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	0800a7f4 	.word	0x0800a7f4
 8006730:	0800a7f4 	.word	0x0800a7f4
 8006734:	0800a7f4 	.word	0x0800a7f4
 8006738:	0800a7f8 	.word	0x0800a7f8

0800673c <memset>:
 800673c:	4402      	add	r2, r0
 800673e:	4603      	mov	r3, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	d100      	bne.n	8006746 <memset+0xa>
 8006744:	4770      	bx	lr
 8006746:	f803 1b01 	strb.w	r1, [r3], #1
 800674a:	e7f9      	b.n	8006740 <memset+0x4>

0800674c <__cvt>:
 800674c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	ec55 4b10 	vmov	r4, r5, d0
 8006754:	2d00      	cmp	r5, #0
 8006756:	460e      	mov	r6, r1
 8006758:	4619      	mov	r1, r3
 800675a:	462b      	mov	r3, r5
 800675c:	bfbb      	ittet	lt
 800675e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006762:	461d      	movlt	r5, r3
 8006764:	2300      	movge	r3, #0
 8006766:	232d      	movlt	r3, #45	; 0x2d
 8006768:	700b      	strb	r3, [r1, #0]
 800676a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800676c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006770:	4691      	mov	r9, r2
 8006772:	f023 0820 	bic.w	r8, r3, #32
 8006776:	bfbc      	itt	lt
 8006778:	4622      	movlt	r2, r4
 800677a:	4614      	movlt	r4, r2
 800677c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006780:	d005      	beq.n	800678e <__cvt+0x42>
 8006782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006786:	d100      	bne.n	800678a <__cvt+0x3e>
 8006788:	3601      	adds	r6, #1
 800678a:	2102      	movs	r1, #2
 800678c:	e000      	b.n	8006790 <__cvt+0x44>
 800678e:	2103      	movs	r1, #3
 8006790:	ab03      	add	r3, sp, #12
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	ab02      	add	r3, sp, #8
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	ec45 4b10 	vmov	d0, r4, r5
 800679c:	4653      	mov	r3, sl
 800679e:	4632      	mov	r2, r6
 80067a0:	f000 fcfe 	bl	80071a0 <_dtoa_r>
 80067a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067a8:	4607      	mov	r7, r0
 80067aa:	d102      	bne.n	80067b2 <__cvt+0x66>
 80067ac:	f019 0f01 	tst.w	r9, #1
 80067b0:	d022      	beq.n	80067f8 <__cvt+0xac>
 80067b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b6:	eb07 0906 	add.w	r9, r7, r6
 80067ba:	d110      	bne.n	80067de <__cvt+0x92>
 80067bc:	783b      	ldrb	r3, [r7, #0]
 80067be:	2b30      	cmp	r3, #48	; 0x30
 80067c0:	d10a      	bne.n	80067d8 <__cvt+0x8c>
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	f7fa f985 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ce:	b918      	cbnz	r0, 80067d8 <__cvt+0x8c>
 80067d0:	f1c6 0601 	rsb	r6, r6, #1
 80067d4:	f8ca 6000 	str.w	r6, [sl]
 80067d8:	f8da 3000 	ldr.w	r3, [sl]
 80067dc:	4499      	add	r9, r3
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	4620      	mov	r0, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	f7fa f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ea:	b108      	cbz	r0, 80067f0 <__cvt+0xa4>
 80067ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80067f0:	2230      	movs	r2, #48	; 0x30
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	454b      	cmp	r3, r9
 80067f6:	d307      	bcc.n	8006808 <__cvt+0xbc>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067fc:	1bdb      	subs	r3, r3, r7
 80067fe:	4638      	mov	r0, r7
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	b004      	add	sp, #16
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e7f0      	b.n	80067f2 <__cvt+0xa6>

08006810 <__exponent>:
 8006810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006812:	4603      	mov	r3, r0
 8006814:	2900      	cmp	r1, #0
 8006816:	bfb8      	it	lt
 8006818:	4249      	neglt	r1, r1
 800681a:	f803 2b02 	strb.w	r2, [r3], #2
 800681e:	bfb4      	ite	lt
 8006820:	222d      	movlt	r2, #45	; 0x2d
 8006822:	222b      	movge	r2, #43	; 0x2b
 8006824:	2909      	cmp	r1, #9
 8006826:	7042      	strb	r2, [r0, #1]
 8006828:	dd2a      	ble.n	8006880 <__exponent+0x70>
 800682a:	f10d 0407 	add.w	r4, sp, #7
 800682e:	46a4      	mov	ip, r4
 8006830:	270a      	movs	r7, #10
 8006832:	46a6      	mov	lr, r4
 8006834:	460a      	mov	r2, r1
 8006836:	fb91 f6f7 	sdiv	r6, r1, r7
 800683a:	fb07 1516 	mls	r5, r7, r6, r1
 800683e:	3530      	adds	r5, #48	; 0x30
 8006840:	2a63      	cmp	r2, #99	; 0x63
 8006842:	f104 34ff 	add.w	r4, r4, #4294967295
 8006846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800684a:	4631      	mov	r1, r6
 800684c:	dcf1      	bgt.n	8006832 <__exponent+0x22>
 800684e:	3130      	adds	r1, #48	; 0x30
 8006850:	f1ae 0502 	sub.w	r5, lr, #2
 8006854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006858:	1c44      	adds	r4, r0, #1
 800685a:	4629      	mov	r1, r5
 800685c:	4561      	cmp	r1, ip
 800685e:	d30a      	bcc.n	8006876 <__exponent+0x66>
 8006860:	f10d 0209 	add.w	r2, sp, #9
 8006864:	eba2 020e 	sub.w	r2, r2, lr
 8006868:	4565      	cmp	r5, ip
 800686a:	bf88      	it	hi
 800686c:	2200      	movhi	r2, #0
 800686e:	4413      	add	r3, r2
 8006870:	1a18      	subs	r0, r3, r0
 8006872:	b003      	add	sp, #12
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800687a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800687e:	e7ed      	b.n	800685c <__exponent+0x4c>
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	3130      	adds	r1, #48	; 0x30
 8006884:	7083      	strb	r3, [r0, #2]
 8006886:	70c1      	strb	r1, [r0, #3]
 8006888:	1d03      	adds	r3, r0, #4
 800688a:	e7f1      	b.n	8006870 <__exponent+0x60>

0800688c <_printf_float>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	ed2d 8b02 	vpush	{d8}
 8006894:	b08d      	sub	sp, #52	; 0x34
 8006896:	460c      	mov	r4, r1
 8006898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800689c:	4616      	mov	r6, r2
 800689e:	461f      	mov	r7, r3
 80068a0:	4605      	mov	r5, r0
 80068a2:	f001 fa6b 	bl	8007d7c <_localeconv_r>
 80068a6:	f8d0 a000 	ldr.w	sl, [r0]
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fc98 	bl	80001e0 <strlen>
 80068b0:	2300      	movs	r3, #0
 80068b2:	930a      	str	r3, [sp, #40]	; 0x28
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068c0:	3307      	adds	r3, #7
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	f103 0208 	add.w	r2, r3, #8
 80068ca:	f8c8 2000 	str.w	r2, [r8]
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068e4:	ee08 0a10 	vmov	s16, r0
 80068e8:	4b9f      	ldr	r3, [pc, #636]	; (8006b68 <_printf_float+0x2dc>)
 80068ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ee:	f04f 32ff 	mov.w	r2, #4294967295
 80068f2:	f7fa f923 	bl	8000b3c <__aeabi_dcmpun>
 80068f6:	bb88      	cbnz	r0, 800695c <_printf_float+0xd0>
 80068f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fc:	4b9a      	ldr	r3, [pc, #616]	; (8006b68 <_printf_float+0x2dc>)
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	f7fa f8fd 	bl	8000b00 <__aeabi_dcmple>
 8006906:	bb48      	cbnz	r0, 800695c <_printf_float+0xd0>
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	4640      	mov	r0, r8
 800690e:	4649      	mov	r1, r9
 8006910:	f7fa f8ec 	bl	8000aec <__aeabi_dcmplt>
 8006914:	b110      	cbz	r0, 800691c <_printf_float+0x90>
 8006916:	232d      	movs	r3, #45	; 0x2d
 8006918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691c:	4b93      	ldr	r3, [pc, #588]	; (8006b6c <_printf_float+0x2e0>)
 800691e:	4894      	ldr	r0, [pc, #592]	; (8006b70 <_printf_float+0x2e4>)
 8006920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006924:	bf94      	ite	ls
 8006926:	4698      	movls	r8, r3
 8006928:	4680      	movhi	r8, r0
 800692a:	2303      	movs	r3, #3
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	f023 0204 	bic.w	r2, r3, #4
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	f04f 0900 	mov.w	r9, #0
 800693a:	9700      	str	r7, [sp, #0]
 800693c:	4633      	mov	r3, r6
 800693e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f9d8 	bl	8006cf8 <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	f040 8090 	bne.w	8006a6e <_printf_float+0x1e2>
 800694e:	f04f 30ff 	mov.w	r0, #4294967295
 8006952:	b00d      	add	sp, #52	; 0x34
 8006954:	ecbd 8b02 	vpop	{d8}
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7fa f8ea 	bl	8000b3c <__aeabi_dcmpun>
 8006968:	b140      	cbz	r0, 800697c <_printf_float+0xf0>
 800696a:	464b      	mov	r3, r9
 800696c:	2b00      	cmp	r3, #0
 800696e:	bfbc      	itt	lt
 8006970:	232d      	movlt	r3, #45	; 0x2d
 8006972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006976:	487f      	ldr	r0, [pc, #508]	; (8006b74 <_printf_float+0x2e8>)
 8006978:	4b7f      	ldr	r3, [pc, #508]	; (8006b78 <_printf_float+0x2ec>)
 800697a:	e7d1      	b.n	8006920 <_printf_float+0x94>
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006982:	9206      	str	r2, [sp, #24]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	d13f      	bne.n	8006a08 <_printf_float+0x17c>
 8006988:	2306      	movs	r3, #6
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	9b05      	ldr	r3, [sp, #20]
 800698e:	6861      	ldr	r1, [r4, #4]
 8006990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006994:	2300      	movs	r3, #0
 8006996:	9303      	str	r3, [sp, #12]
 8006998:	ab0a      	add	r3, sp, #40	; 0x28
 800699a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800699e:	ab09      	add	r3, sp, #36	; 0x24
 80069a0:	ec49 8b10 	vmov	d0, r8, r9
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	6022      	str	r2, [r4, #0]
 80069a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069ac:	4628      	mov	r0, r5
 80069ae:	f7ff fecd 	bl	800674c <__cvt>
 80069b2:	9b06      	ldr	r3, [sp, #24]
 80069b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b6:	2b47      	cmp	r3, #71	; 0x47
 80069b8:	4680      	mov	r8, r0
 80069ba:	d108      	bne.n	80069ce <_printf_float+0x142>
 80069bc:	1cc8      	adds	r0, r1, #3
 80069be:	db02      	blt.n	80069c6 <_printf_float+0x13a>
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	4299      	cmp	r1, r3
 80069c4:	dd41      	ble.n	8006a4a <_printf_float+0x1be>
 80069c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80069ca:	fa5f fb8b 	uxtb.w	fp, fp
 80069ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069d2:	d820      	bhi.n	8006a16 <_printf_float+0x18a>
 80069d4:	3901      	subs	r1, #1
 80069d6:	465a      	mov	r2, fp
 80069d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069dc:	9109      	str	r1, [sp, #36]	; 0x24
 80069de:	f7ff ff17 	bl	8006810 <__exponent>
 80069e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e4:	1813      	adds	r3, r2, r0
 80069e6:	2a01      	cmp	r2, #1
 80069e8:	4681      	mov	r9, r0
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	dc02      	bgt.n	80069f4 <_printf_float+0x168>
 80069ee:	6822      	ldr	r2, [r4, #0]
 80069f0:	07d2      	lsls	r2, r2, #31
 80069f2:	d501      	bpl.n	80069f8 <_printf_float+0x16c>
 80069f4:	3301      	adds	r3, #1
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d09c      	beq.n	800693a <_printf_float+0xae>
 8006a00:	232d      	movs	r3, #45	; 0x2d
 8006a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a06:	e798      	b.n	800693a <_printf_float+0xae>
 8006a08:	9a06      	ldr	r2, [sp, #24]
 8006a0a:	2a47      	cmp	r2, #71	; 0x47
 8006a0c:	d1be      	bne.n	800698c <_printf_float+0x100>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1bc      	bne.n	800698c <_printf_float+0x100>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7b9      	b.n	800698a <_printf_float+0xfe>
 8006a16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a1a:	d118      	bne.n	8006a4e <_printf_float+0x1c2>
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	6863      	ldr	r3, [r4, #4]
 8006a20:	dd0b      	ble.n	8006a3a <_printf_float+0x1ae>
 8006a22:	6121      	str	r1, [r4, #16]
 8006a24:	b913      	cbnz	r3, 8006a2c <_printf_float+0x1a0>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d0      	lsls	r0, r2, #31
 8006a2a:	d502      	bpl.n	8006a32 <_printf_float+0x1a6>
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	440b      	add	r3, r1
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a34:	f04f 0900 	mov.w	r9, #0
 8006a38:	e7de      	b.n	80069f8 <_printf_float+0x16c>
 8006a3a:	b913      	cbnz	r3, 8006a42 <_printf_float+0x1b6>
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	07d2      	lsls	r2, r2, #31
 8006a40:	d501      	bpl.n	8006a46 <_printf_float+0x1ba>
 8006a42:	3302      	adds	r3, #2
 8006a44:	e7f4      	b.n	8006a30 <_printf_float+0x1a4>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e7f2      	b.n	8006a30 <_printf_float+0x1a4>
 8006a4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a50:	4299      	cmp	r1, r3
 8006a52:	db05      	blt.n	8006a60 <_printf_float+0x1d4>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	6121      	str	r1, [r4, #16]
 8006a58:	07d8      	lsls	r0, r3, #31
 8006a5a:	d5ea      	bpl.n	8006a32 <_printf_float+0x1a6>
 8006a5c:	1c4b      	adds	r3, r1, #1
 8006a5e:	e7e7      	b.n	8006a30 <_printf_float+0x1a4>
 8006a60:	2900      	cmp	r1, #0
 8006a62:	bfd4      	ite	le
 8006a64:	f1c1 0202 	rsble	r2, r1, #2
 8006a68:	2201      	movgt	r2, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	e7e0      	b.n	8006a30 <_printf_float+0x1a4>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	055a      	lsls	r2, r3, #21
 8006a72:	d407      	bmi.n	8006a84 <_printf_float+0x1f8>
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	4642      	mov	r2, r8
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d12c      	bne.n	8006adc <_printf_float+0x250>
 8006a82:	e764      	b.n	800694e <_printf_float+0xc2>
 8006a84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a88:	f240 80e0 	bls.w	8006c4c <_printf_float+0x3c0>
 8006a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	f7fa f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d034      	beq.n	8006b06 <_printf_float+0x27a>
 8006a9c:	4a37      	ldr	r2, [pc, #220]	; (8006b7c <_printf_float+0x2f0>)
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af51 	beq.w	800694e <_printf_float+0xc2>
 8006aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	db02      	blt.n	8006aba <_printf_float+0x22e>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07d8      	lsls	r0, r3, #31
 8006ab8:	d510      	bpl.n	8006adc <_printf_float+0x250>
 8006aba:	ee18 3a10 	vmov	r3, s16
 8006abe:	4652      	mov	r2, sl
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f af41 	beq.w	800694e <_printf_float+0xc2>
 8006acc:	f04f 0800 	mov.w	r8, #0
 8006ad0:	f104 091a 	add.w	r9, r4, #26
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4543      	cmp	r3, r8
 8006ada:	dc09      	bgt.n	8006af0 <_printf_float+0x264>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	079b      	lsls	r3, r3, #30
 8006ae0:	f100 8105 	bmi.w	8006cee <_printf_float+0x462>
 8006ae4:	68e0      	ldr	r0, [r4, #12]
 8006ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	bfb8      	it	lt
 8006aec:	4618      	movlt	r0, r3
 8006aee:	e730      	b.n	8006952 <_printf_float+0xc6>
 8006af0:	2301      	movs	r3, #1
 8006af2:	464a      	mov	r2, r9
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f af27 	beq.w	800694e <_printf_float+0xc2>
 8006b00:	f108 0801 	add.w	r8, r8, #1
 8006b04:	e7e6      	b.n	8006ad4 <_printf_float+0x248>
 8006b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	dc39      	bgt.n	8006b80 <_printf_float+0x2f4>
 8006b0c:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <_printf_float+0x2f0>)
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f af19 	beq.w	800694e <_printf_float+0xc2>
 8006b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d102      	bne.n	8006b2a <_printf_float+0x29e>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07d9      	lsls	r1, r3, #31
 8006b28:	d5d8      	bpl.n	8006adc <_printf_float+0x250>
 8006b2a:	ee18 3a10 	vmov	r3, s16
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f af09 	beq.w	800694e <_printf_float+0xc2>
 8006b3c:	f04f 0900 	mov.w	r9, #0
 8006b40:	f104 0a1a 	add.w	sl, r4, #26
 8006b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b46:	425b      	negs	r3, r3
 8006b48:	454b      	cmp	r3, r9
 8006b4a:	dc01      	bgt.n	8006b50 <_printf_float+0x2c4>
 8006b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4e:	e792      	b.n	8006a76 <_printf_float+0x1ea>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4652      	mov	r2, sl
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f43f aef7 	beq.w	800694e <_printf_float+0xc2>
 8006b60:	f109 0901 	add.w	r9, r9, #1
 8006b64:	e7ee      	b.n	8006b44 <_printf_float+0x2b8>
 8006b66:	bf00      	nop
 8006b68:	7fefffff 	.word	0x7fefffff
 8006b6c:	0800a044 	.word	0x0800a044
 8006b70:	0800a048 	.word	0x0800a048
 8006b74:	0800a050 	.word	0x0800a050
 8006b78:	0800a04c 	.word	0x0800a04c
 8006b7c:	0800a054 	.word	0x0800a054
 8006b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b84:	429a      	cmp	r2, r3
 8006b86:	bfa8      	it	ge
 8006b88:	461a      	movge	r2, r3
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	4691      	mov	r9, r2
 8006b8e:	dc37      	bgt.n	8006c00 <_printf_float+0x374>
 8006b90:	f04f 0b00 	mov.w	fp, #0
 8006b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b98:	f104 021a 	add.w	r2, r4, #26
 8006b9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	eba3 0309 	sub.w	r3, r3, r9
 8006ba4:	455b      	cmp	r3, fp
 8006ba6:	dc33      	bgt.n	8006c10 <_printf_float+0x384>
 8006ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bac:	429a      	cmp	r2, r3
 8006bae:	db3b      	blt.n	8006c28 <_printf_float+0x39c>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	07da      	lsls	r2, r3, #31
 8006bb4:	d438      	bmi.n	8006c28 <_printf_float+0x39c>
 8006bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb8:	9a05      	ldr	r2, [sp, #20]
 8006bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bbc:	1a9a      	subs	r2, r3, r2
 8006bbe:	eba3 0901 	sub.w	r9, r3, r1
 8006bc2:	4591      	cmp	r9, r2
 8006bc4:	bfa8      	it	ge
 8006bc6:	4691      	movge	r9, r2
 8006bc8:	f1b9 0f00 	cmp.w	r9, #0
 8006bcc:	dc35      	bgt.n	8006c3a <_printf_float+0x3ae>
 8006bce:	f04f 0800 	mov.w	r8, #0
 8006bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd6:	f104 0a1a 	add.w	sl, r4, #26
 8006bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	eba3 0309 	sub.w	r3, r3, r9
 8006be4:	4543      	cmp	r3, r8
 8006be6:	f77f af79 	ble.w	8006adc <_printf_float+0x250>
 8006bea:	2301      	movs	r3, #1
 8006bec:	4652      	mov	r2, sl
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	f43f aeaa 	beq.w	800694e <_printf_float+0xc2>
 8006bfa:	f108 0801 	add.w	r8, r8, #1
 8006bfe:	e7ec      	b.n	8006bda <_printf_float+0x34e>
 8006c00:	4613      	mov	r3, r2
 8006c02:	4631      	mov	r1, r6
 8006c04:	4642      	mov	r2, r8
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1c0      	bne.n	8006b90 <_printf_float+0x304>
 8006c0e:	e69e      	b.n	800694e <_printf_float+0xc2>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	9205      	str	r2, [sp, #20]
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f ae97 	beq.w	800694e <_printf_float+0xc2>
 8006c20:	9a05      	ldr	r2, [sp, #20]
 8006c22:	f10b 0b01 	add.w	fp, fp, #1
 8006c26:	e7b9      	b.n	8006b9c <_printf_float+0x310>
 8006c28:	ee18 3a10 	vmov	r3, s16
 8006c2c:	4652      	mov	r2, sl
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1be      	bne.n	8006bb6 <_printf_float+0x32a>
 8006c38:	e689      	b.n	800694e <_printf_float+0xc2>
 8006c3a:	9a05      	ldr	r2, [sp, #20]
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4442      	add	r2, r8
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	d1c1      	bne.n	8006bce <_printf_float+0x342>
 8006c4a:	e680      	b.n	800694e <_printf_float+0xc2>
 8006c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4e:	2a01      	cmp	r2, #1
 8006c50:	dc01      	bgt.n	8006c56 <_printf_float+0x3ca>
 8006c52:	07db      	lsls	r3, r3, #31
 8006c54:	d538      	bpl.n	8006cc8 <_printf_float+0x43c>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4642      	mov	r2, r8
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae74 	beq.w	800694e <_printf_float+0xc2>
 8006c66:	ee18 3a10 	vmov	r3, s16
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f ae6b 	beq.w	800694e <_printf_float+0xc2>
 8006c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f7f9 ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c84:	b9d8      	cbnz	r0, 8006cbe <_printf_float+0x432>
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	f108 0201 	add.w	r2, r8, #1
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	d10e      	bne.n	8006cb6 <_printf_float+0x42a>
 8006c98:	e659      	b.n	800694e <_printf_float+0xc2>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f43f ae52 	beq.w	800694e <_printf_float+0xc2>
 8006caa:	f108 0801 	add.w	r8, r8, #1
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4543      	cmp	r3, r8
 8006cb4:	dcf1      	bgt.n	8006c9a <_printf_float+0x40e>
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cbc:	e6dc      	b.n	8006a78 <_printf_float+0x1ec>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	f104 0a1a 	add.w	sl, r4, #26
 8006cc6:	e7f2      	b.n	8006cae <_printf_float+0x422>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4642      	mov	r2, r8
 8006ccc:	e7df      	b.n	8006c8e <_printf_float+0x402>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	464a      	mov	r2, r9
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f43f ae38 	beq.w	800694e <_printf_float+0xc2>
 8006cde:	f108 0801 	add.w	r8, r8, #1
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ce6:	1a5b      	subs	r3, r3, r1
 8006ce8:	4543      	cmp	r3, r8
 8006cea:	dcf0      	bgt.n	8006cce <_printf_float+0x442>
 8006cec:	e6fa      	b.n	8006ae4 <_printf_float+0x258>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	f104 0919 	add.w	r9, r4, #25
 8006cf6:	e7f4      	b.n	8006ce2 <_printf_float+0x456>

08006cf8 <_printf_common>:
 8006cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	4699      	mov	r9, r3
 8006d00:	688a      	ldr	r2, [r1, #8]
 8006d02:	690b      	ldr	r3, [r1, #16]
 8006d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	bfb8      	it	lt
 8006d0c:	4613      	movlt	r3, r2
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d14:	4607      	mov	r7, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b10a      	cbz	r2, 8006d1e <_printf_common+0x26>
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6033      	str	r3, [r6, #0]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	0699      	lsls	r1, r3, #26
 8006d22:	bf42      	ittt	mi
 8006d24:	6833      	ldrmi	r3, [r6, #0]
 8006d26:	3302      	addmi	r3, #2
 8006d28:	6033      	strmi	r3, [r6, #0]
 8006d2a:	6825      	ldr	r5, [r4, #0]
 8006d2c:	f015 0506 	ands.w	r5, r5, #6
 8006d30:	d106      	bne.n	8006d40 <_printf_common+0x48>
 8006d32:	f104 0a19 	add.w	sl, r4, #25
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	6832      	ldr	r2, [r6, #0]
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dc26      	bgt.n	8006d8e <_printf_common+0x96>
 8006d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d44:	1e13      	subs	r3, r2, #0
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	bf18      	it	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	0692      	lsls	r2, r2, #26
 8006d4e:	d42b      	bmi.n	8006da8 <_printf_common+0xb0>
 8006d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d54:	4649      	mov	r1, r9
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d01e      	beq.n	8006d9c <_printf_common+0xa4>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	68e5      	ldr	r5, [r4, #12]
 8006d62:	6832      	ldr	r2, [r6, #0]
 8006d64:	f003 0306 	and.w	r3, r3, #6
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	bf08      	it	eq
 8006d6c:	1aad      	subeq	r5, r5, r2
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	bf0c      	ite	eq
 8006d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d78:	2500      	movne	r5, #0
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bfc4      	itt	gt
 8006d7e:	1a9b      	subgt	r3, r3, r2
 8006d80:	18ed      	addgt	r5, r5, r3
 8006d82:	2600      	movs	r6, #0
 8006d84:	341a      	adds	r4, #26
 8006d86:	42b5      	cmp	r5, r6
 8006d88:	d11a      	bne.n	8006dc0 <_printf_common+0xc8>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e008      	b.n	8006da0 <_printf_common+0xa8>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4652      	mov	r2, sl
 8006d92:	4649      	mov	r1, r9
 8006d94:	4638      	mov	r0, r7
 8006d96:	47c0      	blx	r8
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d103      	bne.n	8006da4 <_printf_common+0xac>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da4:	3501      	adds	r5, #1
 8006da6:	e7c6      	b.n	8006d36 <_printf_common+0x3e>
 8006da8:	18e1      	adds	r1, r4, r3
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	2030      	movs	r0, #48	; 0x30
 8006dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006db2:	4422      	add	r2, r4
 8006db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	e7c7      	b.n	8006d50 <_printf_common+0x58>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d0e6      	beq.n	8006d9c <_printf_common+0xa4>
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7d9      	b.n	8006d86 <_printf_common+0x8e>
	...

08006dd4 <_printf_i>:
 8006dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	7e0f      	ldrb	r7, [r1, #24]
 8006dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ddc:	2f78      	cmp	r7, #120	; 0x78
 8006dde:	4691      	mov	r9, r2
 8006de0:	4680      	mov	r8, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	469a      	mov	sl, r3
 8006de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dea:	d807      	bhi.n	8006dfc <_printf_i+0x28>
 8006dec:	2f62      	cmp	r7, #98	; 0x62
 8006dee:	d80a      	bhi.n	8006e06 <_printf_i+0x32>
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	f000 80d8 	beq.w	8006fa6 <_printf_i+0x1d2>
 8006df6:	2f58      	cmp	r7, #88	; 0x58
 8006df8:	f000 80a3 	beq.w	8006f42 <_printf_i+0x16e>
 8006dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e04:	e03a      	b.n	8006e7c <_printf_i+0xa8>
 8006e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e0a:	2b15      	cmp	r3, #21
 8006e0c:	d8f6      	bhi.n	8006dfc <_printf_i+0x28>
 8006e0e:	a101      	add	r1, pc, #4	; (adr r1, 8006e14 <_printf_i+0x40>)
 8006e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e14:	08006e6d 	.word	0x08006e6d
 8006e18:	08006e81 	.word	0x08006e81
 8006e1c:	08006dfd 	.word	0x08006dfd
 8006e20:	08006dfd 	.word	0x08006dfd
 8006e24:	08006dfd 	.word	0x08006dfd
 8006e28:	08006dfd 	.word	0x08006dfd
 8006e2c:	08006e81 	.word	0x08006e81
 8006e30:	08006dfd 	.word	0x08006dfd
 8006e34:	08006dfd 	.word	0x08006dfd
 8006e38:	08006dfd 	.word	0x08006dfd
 8006e3c:	08006dfd 	.word	0x08006dfd
 8006e40:	08006f8d 	.word	0x08006f8d
 8006e44:	08006eb1 	.word	0x08006eb1
 8006e48:	08006f6f 	.word	0x08006f6f
 8006e4c:	08006dfd 	.word	0x08006dfd
 8006e50:	08006dfd 	.word	0x08006dfd
 8006e54:	08006faf 	.word	0x08006faf
 8006e58:	08006dfd 	.word	0x08006dfd
 8006e5c:	08006eb1 	.word	0x08006eb1
 8006e60:	08006dfd 	.word	0x08006dfd
 8006e64:	08006dfd 	.word	0x08006dfd
 8006e68:	08006f77 	.word	0x08006f77
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	1d1a      	adds	r2, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	602a      	str	r2, [r5, #0]
 8006e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0a3      	b.n	8006fc8 <_printf_i+0x1f4>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	6829      	ldr	r1, [r5, #0]
 8006e84:	0606      	lsls	r6, r0, #24
 8006e86:	f101 0304 	add.w	r3, r1, #4
 8006e8a:	d50a      	bpl.n	8006ea2 <_printf_i+0xce>
 8006e8c:	680e      	ldr	r6, [r1, #0]
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	2e00      	cmp	r6, #0
 8006e92:	da03      	bge.n	8006e9c <_printf_i+0xc8>
 8006e94:	232d      	movs	r3, #45	; 0x2d
 8006e96:	4276      	negs	r6, r6
 8006e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e9c:	485e      	ldr	r0, [pc, #376]	; (8007018 <_printf_i+0x244>)
 8006e9e:	230a      	movs	r3, #10
 8006ea0:	e019      	b.n	8006ed6 <_printf_i+0x102>
 8006ea2:	680e      	ldr	r6, [r1, #0]
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eaa:	bf18      	it	ne
 8006eac:	b236      	sxthne	r6, r6
 8006eae:	e7ef      	b.n	8006e90 <_printf_i+0xbc>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	6820      	ldr	r0, [r4, #0]
 8006eb4:	1d19      	adds	r1, r3, #4
 8006eb6:	6029      	str	r1, [r5, #0]
 8006eb8:	0601      	lsls	r1, r0, #24
 8006eba:	d501      	bpl.n	8006ec0 <_printf_i+0xec>
 8006ebc:	681e      	ldr	r6, [r3, #0]
 8006ebe:	e002      	b.n	8006ec6 <_printf_i+0xf2>
 8006ec0:	0646      	lsls	r6, r0, #25
 8006ec2:	d5fb      	bpl.n	8006ebc <_printf_i+0xe8>
 8006ec4:	881e      	ldrh	r6, [r3, #0]
 8006ec6:	4854      	ldr	r0, [pc, #336]	; (8007018 <_printf_i+0x244>)
 8006ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eca:	bf0c      	ite	eq
 8006ecc:	2308      	moveq	r3, #8
 8006ece:	230a      	movne	r3, #10
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ed6:	6865      	ldr	r5, [r4, #4]
 8006ed8:	60a5      	str	r5, [r4, #8]
 8006eda:	2d00      	cmp	r5, #0
 8006edc:	bfa2      	ittt	ge
 8006ede:	6821      	ldrge	r1, [r4, #0]
 8006ee0:	f021 0104 	bicge.w	r1, r1, #4
 8006ee4:	6021      	strge	r1, [r4, #0]
 8006ee6:	b90e      	cbnz	r6, 8006eec <_printf_i+0x118>
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	d04d      	beq.n	8006f88 <_printf_i+0x1b4>
 8006eec:	4615      	mov	r5, r2
 8006eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ef6:	5dc7      	ldrb	r7, [r0, r7]
 8006ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006efc:	4637      	mov	r7, r6
 8006efe:	42bb      	cmp	r3, r7
 8006f00:	460e      	mov	r6, r1
 8006f02:	d9f4      	bls.n	8006eee <_printf_i+0x11a>
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d10b      	bne.n	8006f20 <_printf_i+0x14c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07de      	lsls	r6, r3, #31
 8006f0c:	d508      	bpl.n	8006f20 <_printf_i+0x14c>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	6861      	ldr	r1, [r4, #4]
 8006f12:	4299      	cmp	r1, r3
 8006f14:	bfde      	ittt	le
 8006f16:	2330      	movle	r3, #48	; 0x30
 8006f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f20:	1b52      	subs	r2, r2, r5
 8006f22:	6122      	str	r2, [r4, #16]
 8006f24:	f8cd a000 	str.w	sl, [sp]
 8006f28:	464b      	mov	r3, r9
 8006f2a:	aa03      	add	r2, sp, #12
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4640      	mov	r0, r8
 8006f30:	f7ff fee2 	bl	8006cf8 <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d14c      	bne.n	8006fd2 <_printf_i+0x1fe>
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	b004      	add	sp, #16
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	4835      	ldr	r0, [pc, #212]	; (8007018 <_printf_i+0x244>)
 8006f44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f48:	6829      	ldr	r1, [r5, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f50:	6029      	str	r1, [r5, #0]
 8006f52:	061d      	lsls	r5, r3, #24
 8006f54:	d514      	bpl.n	8006f80 <_printf_i+0x1ac>
 8006f56:	07df      	lsls	r7, r3, #31
 8006f58:	bf44      	itt	mi
 8006f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f5e:	6023      	strmi	r3, [r4, #0]
 8006f60:	b91e      	cbnz	r6, 8006f6a <_printf_i+0x196>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	f023 0320 	bic.w	r3, r3, #32
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	e7b0      	b.n	8006ed0 <_printf_i+0xfc>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f043 0320 	orr.w	r3, r3, #32
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	2378      	movs	r3, #120	; 0x78
 8006f78:	4828      	ldr	r0, [pc, #160]	; (800701c <_printf_i+0x248>)
 8006f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f7e:	e7e3      	b.n	8006f48 <_printf_i+0x174>
 8006f80:	0659      	lsls	r1, r3, #25
 8006f82:	bf48      	it	mi
 8006f84:	b2b6      	uxthmi	r6, r6
 8006f86:	e7e6      	b.n	8006f56 <_printf_i+0x182>
 8006f88:	4615      	mov	r5, r2
 8006f8a:	e7bb      	b.n	8006f04 <_printf_i+0x130>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	6826      	ldr	r6, [r4, #0]
 8006f90:	6961      	ldr	r1, [r4, #20]
 8006f92:	1d18      	adds	r0, r3, #4
 8006f94:	6028      	str	r0, [r5, #0]
 8006f96:	0635      	lsls	r5, r6, #24
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	d501      	bpl.n	8006fa0 <_printf_i+0x1cc>
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	e002      	b.n	8006fa6 <_printf_i+0x1d2>
 8006fa0:	0670      	lsls	r0, r6, #25
 8006fa2:	d5fb      	bpl.n	8006f9c <_printf_i+0x1c8>
 8006fa4:	8019      	strh	r1, [r3, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	4615      	mov	r5, r2
 8006fac:	e7ba      	b.n	8006f24 <_printf_i+0x150>
 8006fae:	682b      	ldr	r3, [r5, #0]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	602a      	str	r2, [r5, #0]
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	6862      	ldr	r2, [r4, #4]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7f9 f918 	bl	80001f0 <memchr>
 8006fc0:	b108      	cbz	r0, 8006fc6 <_printf_i+0x1f2>
 8006fc2:	1b40      	subs	r0, r0, r5
 8006fc4:	6060      	str	r0, [r4, #4]
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd0:	e7a8      	b.n	8006f24 <_printf_i+0x150>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	47d0      	blx	sl
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0ab      	beq.n	8006f38 <_printf_i+0x164>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	079b      	lsls	r3, r3, #30
 8006fe4:	d413      	bmi.n	800700e <_printf_i+0x23a>
 8006fe6:	68e0      	ldr	r0, [r4, #12]
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	4298      	cmp	r0, r3
 8006fec:	bfb8      	it	lt
 8006fee:	4618      	movlt	r0, r3
 8006ff0:	e7a4      	b.n	8006f3c <_printf_i+0x168>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	47d0      	blx	sl
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d09b      	beq.n	8006f38 <_printf_i+0x164>
 8007000:	3501      	adds	r5, #1
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	1a5b      	subs	r3, r3, r1
 8007008:	42ab      	cmp	r3, r5
 800700a:	dcf2      	bgt.n	8006ff2 <_printf_i+0x21e>
 800700c:	e7eb      	b.n	8006fe6 <_printf_i+0x212>
 800700e:	2500      	movs	r5, #0
 8007010:	f104 0619 	add.w	r6, r4, #25
 8007014:	e7f5      	b.n	8007002 <_printf_i+0x22e>
 8007016:	bf00      	nop
 8007018:	0800a056 	.word	0x0800a056
 800701c:	0800a067 	.word	0x0800a067

08007020 <sniprintf>:
 8007020:	b40c      	push	{r2, r3}
 8007022:	b530      	push	{r4, r5, lr}
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <sniprintf+0x64>)
 8007026:	1e0c      	subs	r4, r1, #0
 8007028:	681d      	ldr	r5, [r3, #0]
 800702a:	b09d      	sub	sp, #116	; 0x74
 800702c:	da08      	bge.n	8007040 <sniprintf+0x20>
 800702e:	238b      	movs	r3, #139	; 0x8b
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	f04f 30ff 	mov.w	r0, #4294967295
 8007036:	b01d      	add	sp, #116	; 0x74
 8007038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800703c:	b002      	add	sp, #8
 800703e:	4770      	bx	lr
 8007040:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007044:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007048:	bf14      	ite	ne
 800704a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800704e:	4623      	moveq	r3, r4
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007058:	9002      	str	r0, [sp, #8]
 800705a:	9006      	str	r0, [sp, #24]
 800705c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007060:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007062:	ab21      	add	r3, sp, #132	; 0x84
 8007064:	a902      	add	r1, sp, #8
 8007066:	4628      	mov	r0, r5
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	f001 fb77 	bl	800875c <_svfiprintf_r>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	bfbc      	itt	lt
 8007072:	238b      	movlt	r3, #139	; 0x8b
 8007074:	602b      	strlt	r3, [r5, #0]
 8007076:	2c00      	cmp	r4, #0
 8007078:	d0dd      	beq.n	8007036 <sniprintf+0x16>
 800707a:	9b02      	ldr	r3, [sp, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	e7d9      	b.n	8007036 <sniprintf+0x16>
 8007082:	bf00      	nop
 8007084:	20000028 	.word	0x20000028

08007088 <quorem>:
 8007088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	6903      	ldr	r3, [r0, #16]
 800708e:	690c      	ldr	r4, [r1, #16]
 8007090:	42a3      	cmp	r3, r4
 8007092:	4607      	mov	r7, r0
 8007094:	f2c0 8081 	blt.w	800719a <quorem+0x112>
 8007098:	3c01      	subs	r4, #1
 800709a:	f101 0814 	add.w	r8, r1, #20
 800709e:	f100 0514 	add.w	r5, r0, #20
 80070a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b0:	3301      	adds	r3, #1
 80070b2:	429a      	cmp	r2, r3
 80070b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c0:	d331      	bcc.n	8007126 <quorem+0x9e>
 80070c2:	f04f 0e00 	mov.w	lr, #0
 80070c6:	4640      	mov	r0, r8
 80070c8:	46ac      	mov	ip, r5
 80070ca:	46f2      	mov	sl, lr
 80070cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80070d0:	b293      	uxth	r3, r2
 80070d2:	fb06 e303 	mla	r3, r6, r3, lr
 80070d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ebaa 0303 	sub.w	r3, sl, r3
 80070e0:	f8dc a000 	ldr.w	sl, [ip]
 80070e4:	0c12      	lsrs	r2, r2, #16
 80070e6:	fa13 f38a 	uxtah	r3, r3, sl
 80070ea:	fb06 e202 	mla	r2, r6, r2, lr
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	9b00      	ldr	r3, [sp, #0]
 80070f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070f6:	b292      	uxth	r2, r2
 80070f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007100:	f8bd 3000 	ldrh.w	r3, [sp]
 8007104:	4581      	cmp	r9, r0
 8007106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710a:	f84c 3b04 	str.w	r3, [ip], #4
 800710e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007112:	d2db      	bcs.n	80070cc <quorem+0x44>
 8007114:	f855 300b 	ldr.w	r3, [r5, fp]
 8007118:	b92b      	cbnz	r3, 8007126 <quorem+0x9e>
 800711a:	9b01      	ldr	r3, [sp, #4]
 800711c:	3b04      	subs	r3, #4
 800711e:	429d      	cmp	r5, r3
 8007120:	461a      	mov	r2, r3
 8007122:	d32e      	bcc.n	8007182 <quorem+0xfa>
 8007124:	613c      	str	r4, [r7, #16]
 8007126:	4638      	mov	r0, r7
 8007128:	f001 f8c4 	bl	80082b4 <__mcmp>
 800712c:	2800      	cmp	r0, #0
 800712e:	db24      	blt.n	800717a <quorem+0xf2>
 8007130:	3601      	adds	r6, #1
 8007132:	4628      	mov	r0, r5
 8007134:	f04f 0c00 	mov.w	ip, #0
 8007138:	f858 2b04 	ldr.w	r2, [r8], #4
 800713c:	f8d0 e000 	ldr.w	lr, [r0]
 8007140:	b293      	uxth	r3, r2
 8007142:	ebac 0303 	sub.w	r3, ip, r3
 8007146:	0c12      	lsrs	r2, r2, #16
 8007148:	fa13 f38e 	uxtah	r3, r3, lr
 800714c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800715a:	45c1      	cmp	r9, r8
 800715c:	f840 3b04 	str.w	r3, [r0], #4
 8007160:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007164:	d2e8      	bcs.n	8007138 <quorem+0xb0>
 8007166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800716a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800716e:	b922      	cbnz	r2, 800717a <quorem+0xf2>
 8007170:	3b04      	subs	r3, #4
 8007172:	429d      	cmp	r5, r3
 8007174:	461a      	mov	r2, r3
 8007176:	d30a      	bcc.n	800718e <quorem+0x106>
 8007178:	613c      	str	r4, [r7, #16]
 800717a:	4630      	mov	r0, r6
 800717c:	b003      	add	sp, #12
 800717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	3b04      	subs	r3, #4
 8007186:	2a00      	cmp	r2, #0
 8007188:	d1cc      	bne.n	8007124 <quorem+0x9c>
 800718a:	3c01      	subs	r4, #1
 800718c:	e7c7      	b.n	800711e <quorem+0x96>
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	3b04      	subs	r3, #4
 8007192:	2a00      	cmp	r2, #0
 8007194:	d1f0      	bne.n	8007178 <quorem+0xf0>
 8007196:	3c01      	subs	r4, #1
 8007198:	e7eb      	b.n	8007172 <quorem+0xea>
 800719a:	2000      	movs	r0, #0
 800719c:	e7ee      	b.n	800717c <quorem+0xf4>
	...

080071a0 <_dtoa_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	ed2d 8b04 	vpush	{d8-d9}
 80071a8:	ec57 6b10 	vmov	r6, r7, d0
 80071ac:	b093      	sub	sp, #76	; 0x4c
 80071ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071b4:	9106      	str	r1, [sp, #24]
 80071b6:	ee10 aa10 	vmov	sl, s0
 80071ba:	4604      	mov	r4, r0
 80071bc:	9209      	str	r2, [sp, #36]	; 0x24
 80071be:	930c      	str	r3, [sp, #48]	; 0x30
 80071c0:	46bb      	mov	fp, r7
 80071c2:	b975      	cbnz	r5, 80071e2 <_dtoa_r+0x42>
 80071c4:	2010      	movs	r0, #16
 80071c6:	f000 fddd 	bl	8007d84 <malloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6260      	str	r0, [r4, #36]	; 0x24
 80071ce:	b920      	cbnz	r0, 80071da <_dtoa_r+0x3a>
 80071d0:	4ba7      	ldr	r3, [pc, #668]	; (8007470 <_dtoa_r+0x2d0>)
 80071d2:	21ea      	movs	r1, #234	; 0xea
 80071d4:	48a7      	ldr	r0, [pc, #668]	; (8007474 <_dtoa_r+0x2d4>)
 80071d6:	f001 fbd1 	bl	800897c <__assert_func>
 80071da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071de:	6005      	str	r5, [r0, #0]
 80071e0:	60c5      	str	r5, [r0, #12]
 80071e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e4:	6819      	ldr	r1, [r3, #0]
 80071e6:	b151      	cbz	r1, 80071fe <_dtoa_r+0x5e>
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	604a      	str	r2, [r1, #4]
 80071ec:	2301      	movs	r3, #1
 80071ee:	4093      	lsls	r3, r2
 80071f0:	608b      	str	r3, [r1, #8]
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fe1c 	bl	8007e30 <_Bfree>
 80071f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	1e3b      	subs	r3, r7, #0
 8007200:	bfaa      	itet	ge
 8007202:	2300      	movge	r3, #0
 8007204:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007208:	f8c8 3000 	strge.w	r3, [r8]
 800720c:	4b9a      	ldr	r3, [pc, #616]	; (8007478 <_dtoa_r+0x2d8>)
 800720e:	bfbc      	itt	lt
 8007210:	2201      	movlt	r2, #1
 8007212:	f8c8 2000 	strlt.w	r2, [r8]
 8007216:	ea33 030b 	bics.w	r3, r3, fp
 800721a:	d11b      	bne.n	8007254 <_dtoa_r+0xb4>
 800721c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800721e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007228:	4333      	orrs	r3, r6
 800722a:	f000 8592 	beq.w	8007d52 <_dtoa_r+0xbb2>
 800722e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007230:	b963      	cbnz	r3, 800724c <_dtoa_r+0xac>
 8007232:	4b92      	ldr	r3, [pc, #584]	; (800747c <_dtoa_r+0x2dc>)
 8007234:	e022      	b.n	800727c <_dtoa_r+0xdc>
 8007236:	4b92      	ldr	r3, [pc, #584]	; (8007480 <_dtoa_r+0x2e0>)
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	3308      	adds	r3, #8
 800723c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	9801      	ldr	r0, [sp, #4]
 8007242:	b013      	add	sp, #76	; 0x4c
 8007244:	ecbd 8b04 	vpop	{d8-d9}
 8007248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724c:	4b8b      	ldr	r3, [pc, #556]	; (800747c <_dtoa_r+0x2dc>)
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	3303      	adds	r3, #3
 8007252:	e7f3      	b.n	800723c <_dtoa_r+0x9c>
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	4650      	mov	r0, sl
 800725a:	4659      	mov	r1, fp
 800725c:	f7f9 fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007260:	ec4b ab19 	vmov	d9, sl, fp
 8007264:	4680      	mov	r8, r0
 8007266:	b158      	cbz	r0, 8007280 <_dtoa_r+0xe0>
 8007268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800726a:	2301      	movs	r3, #1
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 856b 	beq.w	8007d4c <_dtoa_r+0xbac>
 8007276:	4883      	ldr	r0, [pc, #524]	; (8007484 <_dtoa_r+0x2e4>)
 8007278:	6018      	str	r0, [r3, #0]
 800727a:	1e43      	subs	r3, r0, #1
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	e7df      	b.n	8007240 <_dtoa_r+0xa0>
 8007280:	ec4b ab10 	vmov	d0, sl, fp
 8007284:	aa10      	add	r2, sp, #64	; 0x40
 8007286:	a911      	add	r1, sp, #68	; 0x44
 8007288:	4620      	mov	r0, r4
 800728a:	f001 f8b9 	bl	8008400 <__d2b>
 800728e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007292:	ee08 0a10 	vmov	s16, r0
 8007296:	2d00      	cmp	r5, #0
 8007298:	f000 8084 	beq.w	80073a4 <_dtoa_r+0x204>
 800729c:	ee19 3a90 	vmov	r3, s19
 80072a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072a8:	4656      	mov	r6, sl
 80072aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80072b6:	4b74      	ldr	r3, [pc, #464]	; (8007488 <_dtoa_r+0x2e8>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	4630      	mov	r0, r6
 80072bc:	4639      	mov	r1, r7
 80072be:	f7f8 ffeb 	bl	8000298 <__aeabi_dsub>
 80072c2:	a365      	add	r3, pc, #404	; (adr r3, 8007458 <_dtoa_r+0x2b8>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f99e 	bl	8000608 <__aeabi_dmul>
 80072cc:	a364      	add	r3, pc, #400	; (adr r3, 8007460 <_dtoa_r+0x2c0>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 ffe3 	bl	800029c <__adddf3>
 80072d6:	4606      	mov	r6, r0
 80072d8:	4628      	mov	r0, r5
 80072da:	460f      	mov	r7, r1
 80072dc:	f7f9 f92a 	bl	8000534 <__aeabi_i2d>
 80072e0:	a361      	add	r3, pc, #388	; (adr r3, 8007468 <_dtoa_r+0x2c8>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f98f 	bl	8000608 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f8 ffd3 	bl	800029c <__adddf3>
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	f7f9 fc35 	bl	8000b68 <__aeabi_d2iz>
 80072fe:	2200      	movs	r2, #0
 8007300:	9000      	str	r0, [sp, #0]
 8007302:	2300      	movs	r3, #0
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	f7f9 fbf0 	bl	8000aec <__aeabi_dcmplt>
 800730c:	b150      	cbz	r0, 8007324 <_dtoa_r+0x184>
 800730e:	9800      	ldr	r0, [sp, #0]
 8007310:	f7f9 f910 	bl	8000534 <__aeabi_i2d>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	f7f9 fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800731c:	b910      	cbnz	r0, 8007324 <_dtoa_r+0x184>
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	9b00      	ldr	r3, [sp, #0]
 8007326:	2b16      	cmp	r3, #22
 8007328:	d85a      	bhi.n	80073e0 <_dtoa_r+0x240>
 800732a:	9a00      	ldr	r2, [sp, #0]
 800732c:	4b57      	ldr	r3, [pc, #348]	; (800748c <_dtoa_r+0x2ec>)
 800732e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	ec51 0b19 	vmov	r0, r1, d9
 800733a:	f7f9 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800733e:	2800      	cmp	r0, #0
 8007340:	d050      	beq.n	80073e4 <_dtoa_r+0x244>
 8007342:	9b00      	ldr	r3, [sp, #0]
 8007344:	3b01      	subs	r3, #1
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	2300      	movs	r3, #0
 800734a:	930b      	str	r3, [sp, #44]	; 0x2c
 800734c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800734e:	1b5d      	subs	r5, r3, r5
 8007350:	1e6b      	subs	r3, r5, #1
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	bf45      	ittet	mi
 8007356:	f1c5 0301 	rsbmi	r3, r5, #1
 800735a:	9304      	strmi	r3, [sp, #16]
 800735c:	2300      	movpl	r3, #0
 800735e:	2300      	movmi	r3, #0
 8007360:	bf4c      	ite	mi
 8007362:	9305      	strmi	r3, [sp, #20]
 8007364:	9304      	strpl	r3, [sp, #16]
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	db3d      	blt.n	80073e8 <_dtoa_r+0x248>
 800736c:	9b05      	ldr	r3, [sp, #20]
 800736e:	9a00      	ldr	r2, [sp, #0]
 8007370:	920a      	str	r2, [sp, #40]	; 0x28
 8007372:	4413      	add	r3, r2
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	2300      	movs	r3, #0
 8007378:	9307      	str	r3, [sp, #28]
 800737a:	9b06      	ldr	r3, [sp, #24]
 800737c:	2b09      	cmp	r3, #9
 800737e:	f200 8089 	bhi.w	8007494 <_dtoa_r+0x2f4>
 8007382:	2b05      	cmp	r3, #5
 8007384:	bfc4      	itt	gt
 8007386:	3b04      	subgt	r3, #4
 8007388:	9306      	strgt	r3, [sp, #24]
 800738a:	9b06      	ldr	r3, [sp, #24]
 800738c:	f1a3 0302 	sub.w	r3, r3, #2
 8007390:	bfcc      	ite	gt
 8007392:	2500      	movgt	r5, #0
 8007394:	2501      	movle	r5, #1
 8007396:	2b03      	cmp	r3, #3
 8007398:	f200 8087 	bhi.w	80074aa <_dtoa_r+0x30a>
 800739c:	e8df f003 	tbb	[pc, r3]
 80073a0:	59383a2d 	.word	0x59383a2d
 80073a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073a8:	441d      	add	r5, r3
 80073aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	bfc1      	itttt	gt
 80073b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80073be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073c2:	bfda      	itte	le
 80073c4:	f1c3 0320 	rsble	r3, r3, #32
 80073c8:	fa06 f003 	lslle.w	r0, r6, r3
 80073cc:	4318      	orrgt	r0, r3
 80073ce:	f7f9 f8a1 	bl	8000514 <__aeabi_ui2d>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4606      	mov	r6, r0
 80073d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073da:	3d01      	subs	r5, #1
 80073dc:	930e      	str	r3, [sp, #56]	; 0x38
 80073de:	e76a      	b.n	80072b6 <_dtoa_r+0x116>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7b2      	b.n	800734a <_dtoa_r+0x1aa>
 80073e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80073e6:	e7b1      	b.n	800734c <_dtoa_r+0x1ac>
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	9a00      	ldr	r2, [sp, #0]
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	9304      	str	r3, [sp, #16]
 80073f0:	4253      	negs	r3, r2
 80073f2:	9307      	str	r3, [sp, #28]
 80073f4:	2300      	movs	r3, #0
 80073f6:	930a      	str	r3, [sp, #40]	; 0x28
 80073f8:	e7bf      	b.n	800737a <_dtoa_r+0x1da>
 80073fa:	2300      	movs	r3, #0
 80073fc:	9308      	str	r3, [sp, #32]
 80073fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	dc55      	bgt.n	80074b0 <_dtoa_r+0x310>
 8007404:	2301      	movs	r3, #1
 8007406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800740a:	461a      	mov	r2, r3
 800740c:	9209      	str	r2, [sp, #36]	; 0x24
 800740e:	e00c      	b.n	800742a <_dtoa_r+0x28a>
 8007410:	2301      	movs	r3, #1
 8007412:	e7f3      	b.n	80073fc <_dtoa_r+0x25c>
 8007414:	2300      	movs	r3, #0
 8007416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007418:	9308      	str	r3, [sp, #32]
 800741a:	9b00      	ldr	r3, [sp, #0]
 800741c:	4413      	add	r3, r2
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	3301      	adds	r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	bfb8      	it	lt
 8007428:	2301      	movlt	r3, #1
 800742a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800742c:	2200      	movs	r2, #0
 800742e:	6042      	str	r2, [r0, #4]
 8007430:	2204      	movs	r2, #4
 8007432:	f102 0614 	add.w	r6, r2, #20
 8007436:	429e      	cmp	r6, r3
 8007438:	6841      	ldr	r1, [r0, #4]
 800743a:	d93d      	bls.n	80074b8 <_dtoa_r+0x318>
 800743c:	4620      	mov	r0, r4
 800743e:	f000 fcb7 	bl	8007db0 <_Balloc>
 8007442:	9001      	str	r0, [sp, #4]
 8007444:	2800      	cmp	r0, #0
 8007446:	d13b      	bne.n	80074c0 <_dtoa_r+0x320>
 8007448:	4b11      	ldr	r3, [pc, #68]	; (8007490 <_dtoa_r+0x2f0>)
 800744a:	4602      	mov	r2, r0
 800744c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007450:	e6c0      	b.n	80071d4 <_dtoa_r+0x34>
 8007452:	2301      	movs	r3, #1
 8007454:	e7df      	b.n	8007416 <_dtoa_r+0x276>
 8007456:	bf00      	nop
 8007458:	636f4361 	.word	0x636f4361
 800745c:	3fd287a7 	.word	0x3fd287a7
 8007460:	8b60c8b3 	.word	0x8b60c8b3
 8007464:	3fc68a28 	.word	0x3fc68a28
 8007468:	509f79fb 	.word	0x509f79fb
 800746c:	3fd34413 	.word	0x3fd34413
 8007470:	0800a085 	.word	0x0800a085
 8007474:	0800a09c 	.word	0x0800a09c
 8007478:	7ff00000 	.word	0x7ff00000
 800747c:	0800a081 	.word	0x0800a081
 8007480:	0800a078 	.word	0x0800a078
 8007484:	0800a055 	.word	0x0800a055
 8007488:	3ff80000 	.word	0x3ff80000
 800748c:	0800a190 	.word	0x0800a190
 8007490:	0800a0f7 	.word	0x0800a0f7
 8007494:	2501      	movs	r5, #1
 8007496:	2300      	movs	r3, #0
 8007498:	9306      	str	r3, [sp, #24]
 800749a:	9508      	str	r5, [sp, #32]
 800749c:	f04f 33ff 	mov.w	r3, #4294967295
 80074a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2312      	movs	r3, #18
 80074a8:	e7b0      	b.n	800740c <_dtoa_r+0x26c>
 80074aa:	2301      	movs	r3, #1
 80074ac:	9308      	str	r3, [sp, #32]
 80074ae:	e7f5      	b.n	800749c <_dtoa_r+0x2fc>
 80074b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074b6:	e7b8      	b.n	800742a <_dtoa_r+0x28a>
 80074b8:	3101      	adds	r1, #1
 80074ba:	6041      	str	r1, [r0, #4]
 80074bc:	0052      	lsls	r2, r2, #1
 80074be:	e7b8      	b.n	8007432 <_dtoa_r+0x292>
 80074c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c2:	9a01      	ldr	r2, [sp, #4]
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	2b0e      	cmp	r3, #14
 80074ca:	f200 809d 	bhi.w	8007608 <_dtoa_r+0x468>
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	f000 809a 	beq.w	8007608 <_dtoa_r+0x468>
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	dd32      	ble.n	8007540 <_dtoa_r+0x3a0>
 80074da:	4ab7      	ldr	r2, [pc, #732]	; (80077b8 <_dtoa_r+0x618>)
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	05d8      	lsls	r0, r3, #23
 80074ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074f0:	d516      	bpl.n	8007520 <_dtoa_r+0x380>
 80074f2:	4bb2      	ldr	r3, [pc, #712]	; (80077bc <_dtoa_r+0x61c>)
 80074f4:	ec51 0b19 	vmov	r0, r1, d9
 80074f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074fc:	f7f9 f9ae 	bl	800085c <__aeabi_ddiv>
 8007500:	f007 070f 	and.w	r7, r7, #15
 8007504:	4682      	mov	sl, r0
 8007506:	468b      	mov	fp, r1
 8007508:	2503      	movs	r5, #3
 800750a:	4eac      	ldr	r6, [pc, #688]	; (80077bc <_dtoa_r+0x61c>)
 800750c:	b957      	cbnz	r7, 8007524 <_dtoa_r+0x384>
 800750e:	4642      	mov	r2, r8
 8007510:	464b      	mov	r3, r9
 8007512:	4650      	mov	r0, sl
 8007514:	4659      	mov	r1, fp
 8007516:	f7f9 f9a1 	bl	800085c <__aeabi_ddiv>
 800751a:	4682      	mov	sl, r0
 800751c:	468b      	mov	fp, r1
 800751e:	e028      	b.n	8007572 <_dtoa_r+0x3d2>
 8007520:	2502      	movs	r5, #2
 8007522:	e7f2      	b.n	800750a <_dtoa_r+0x36a>
 8007524:	07f9      	lsls	r1, r7, #31
 8007526:	d508      	bpl.n	800753a <_dtoa_r+0x39a>
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007530:	f7f9 f86a 	bl	8000608 <__aeabi_dmul>
 8007534:	3501      	adds	r5, #1
 8007536:	4680      	mov	r8, r0
 8007538:	4689      	mov	r9, r1
 800753a:	107f      	asrs	r7, r7, #1
 800753c:	3608      	adds	r6, #8
 800753e:	e7e5      	b.n	800750c <_dtoa_r+0x36c>
 8007540:	f000 809b 	beq.w	800767a <_dtoa_r+0x4da>
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	4f9d      	ldr	r7, [pc, #628]	; (80077bc <_dtoa_r+0x61c>)
 8007548:	425e      	negs	r6, r3
 800754a:	4b9b      	ldr	r3, [pc, #620]	; (80077b8 <_dtoa_r+0x618>)
 800754c:	f006 020f 	and.w	r2, r6, #15
 8007550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	ec51 0b19 	vmov	r0, r1, d9
 800755c:	f7f9 f854 	bl	8000608 <__aeabi_dmul>
 8007560:	1136      	asrs	r6, r6, #4
 8007562:	4682      	mov	sl, r0
 8007564:	468b      	mov	fp, r1
 8007566:	2300      	movs	r3, #0
 8007568:	2502      	movs	r5, #2
 800756a:	2e00      	cmp	r6, #0
 800756c:	d17a      	bne.n	8007664 <_dtoa_r+0x4c4>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1d3      	bne.n	800751a <_dtoa_r+0x37a>
 8007572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8082 	beq.w	800767e <_dtoa_r+0x4de>
 800757a:	4b91      	ldr	r3, [pc, #580]	; (80077c0 <_dtoa_r+0x620>)
 800757c:	2200      	movs	r2, #0
 800757e:	4650      	mov	r0, sl
 8007580:	4659      	mov	r1, fp
 8007582:	f7f9 fab3 	bl	8000aec <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d079      	beq.n	800767e <_dtoa_r+0x4de>
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d076      	beq.n	800767e <_dtoa_r+0x4de>
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd36      	ble.n	8007604 <_dtoa_r+0x464>
 8007596:	9b00      	ldr	r3, [sp, #0]
 8007598:	4650      	mov	r0, sl
 800759a:	4659      	mov	r1, fp
 800759c:	1e5f      	subs	r7, r3, #1
 800759e:	2200      	movs	r2, #0
 80075a0:	4b88      	ldr	r3, [pc, #544]	; (80077c4 <_dtoa_r+0x624>)
 80075a2:	f7f9 f831 	bl	8000608 <__aeabi_dmul>
 80075a6:	9e02      	ldr	r6, [sp, #8]
 80075a8:	4682      	mov	sl, r0
 80075aa:	468b      	mov	fp, r1
 80075ac:	3501      	adds	r5, #1
 80075ae:	4628      	mov	r0, r5
 80075b0:	f7f8 ffc0 	bl	8000534 <__aeabi_i2d>
 80075b4:	4652      	mov	r2, sl
 80075b6:	465b      	mov	r3, fp
 80075b8:	f7f9 f826 	bl	8000608 <__aeabi_dmul>
 80075bc:	4b82      	ldr	r3, [pc, #520]	; (80077c8 <_dtoa_r+0x628>)
 80075be:	2200      	movs	r2, #0
 80075c0:	f7f8 fe6c 	bl	800029c <__adddf3>
 80075c4:	46d0      	mov	r8, sl
 80075c6:	46d9      	mov	r9, fp
 80075c8:	4682      	mov	sl, r0
 80075ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	d158      	bne.n	8007684 <_dtoa_r+0x4e4>
 80075d2:	4b7e      	ldr	r3, [pc, #504]	; (80077cc <_dtoa_r+0x62c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4640      	mov	r0, r8
 80075d8:	4649      	mov	r1, r9
 80075da:	f7f8 fe5d 	bl	8000298 <__aeabi_dsub>
 80075de:	4652      	mov	r2, sl
 80075e0:	465b      	mov	r3, fp
 80075e2:	4680      	mov	r8, r0
 80075e4:	4689      	mov	r9, r1
 80075e6:	f7f9 fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f040 8295 	bne.w	8007b1a <_dtoa_r+0x97a>
 80075f0:	4652      	mov	r2, sl
 80075f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f9 fa77 	bl	8000aec <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f040 8289 	bne.w	8007b16 <_dtoa_r+0x976>
 8007604:	ec5b ab19 	vmov	sl, fp, d9
 8007608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800760a:	2b00      	cmp	r3, #0
 800760c:	f2c0 8148 	blt.w	80078a0 <_dtoa_r+0x700>
 8007610:	9a00      	ldr	r2, [sp, #0]
 8007612:	2a0e      	cmp	r2, #14
 8007614:	f300 8144 	bgt.w	80078a0 <_dtoa_r+0x700>
 8007618:	4b67      	ldr	r3, [pc, #412]	; (80077b8 <_dtoa_r+0x618>)
 800761a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800761e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007624:	2b00      	cmp	r3, #0
 8007626:	f280 80d5 	bge.w	80077d4 <_dtoa_r+0x634>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f300 80d1 	bgt.w	80077d4 <_dtoa_r+0x634>
 8007632:	f040 826f 	bne.w	8007b14 <_dtoa_r+0x974>
 8007636:	4b65      	ldr	r3, [pc, #404]	; (80077cc <_dtoa_r+0x62c>)
 8007638:	2200      	movs	r2, #0
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f8 ffe3 	bl	8000608 <__aeabi_dmul>
 8007642:	4652      	mov	r2, sl
 8007644:	465b      	mov	r3, fp
 8007646:	f7f9 fa65 	bl	8000b14 <__aeabi_dcmpge>
 800764a:	9e03      	ldr	r6, [sp, #12]
 800764c:	4637      	mov	r7, r6
 800764e:	2800      	cmp	r0, #0
 8007650:	f040 8245 	bne.w	8007ade <_dtoa_r+0x93e>
 8007654:	9d01      	ldr	r5, [sp, #4]
 8007656:	2331      	movs	r3, #49	; 0x31
 8007658:	f805 3b01 	strb.w	r3, [r5], #1
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	e240      	b.n	8007ae6 <_dtoa_r+0x946>
 8007664:	07f2      	lsls	r2, r6, #31
 8007666:	d505      	bpl.n	8007674 <_dtoa_r+0x4d4>
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f7f8 ffcc 	bl	8000608 <__aeabi_dmul>
 8007670:	3501      	adds	r5, #1
 8007672:	2301      	movs	r3, #1
 8007674:	1076      	asrs	r6, r6, #1
 8007676:	3708      	adds	r7, #8
 8007678:	e777      	b.n	800756a <_dtoa_r+0x3ca>
 800767a:	2502      	movs	r5, #2
 800767c:	e779      	b.n	8007572 <_dtoa_r+0x3d2>
 800767e:	9f00      	ldr	r7, [sp, #0]
 8007680:	9e03      	ldr	r6, [sp, #12]
 8007682:	e794      	b.n	80075ae <_dtoa_r+0x40e>
 8007684:	9901      	ldr	r1, [sp, #4]
 8007686:	4b4c      	ldr	r3, [pc, #304]	; (80077b8 <_dtoa_r+0x618>)
 8007688:	4431      	add	r1, r6
 800768a:	910d      	str	r1, [sp, #52]	; 0x34
 800768c:	9908      	ldr	r1, [sp, #32]
 800768e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007692:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007696:	2900      	cmp	r1, #0
 8007698:	d043      	beq.n	8007722 <_dtoa_r+0x582>
 800769a:	494d      	ldr	r1, [pc, #308]	; (80077d0 <_dtoa_r+0x630>)
 800769c:	2000      	movs	r0, #0
 800769e:	f7f9 f8dd 	bl	800085c <__aeabi_ddiv>
 80076a2:	4652      	mov	r2, sl
 80076a4:	465b      	mov	r3, fp
 80076a6:	f7f8 fdf7 	bl	8000298 <__aeabi_dsub>
 80076aa:	9d01      	ldr	r5, [sp, #4]
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	4649      	mov	r1, r9
 80076b2:	4640      	mov	r0, r8
 80076b4:	f7f9 fa58 	bl	8000b68 <__aeabi_d2iz>
 80076b8:	4606      	mov	r6, r0
 80076ba:	f7f8 ff3b 	bl	8000534 <__aeabi_i2d>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4640      	mov	r0, r8
 80076c4:	4649      	mov	r1, r9
 80076c6:	f7f8 fde7 	bl	8000298 <__aeabi_dsub>
 80076ca:	3630      	adds	r6, #48	; 0x30
 80076cc:	f805 6b01 	strb.w	r6, [r5], #1
 80076d0:	4652      	mov	r2, sl
 80076d2:	465b      	mov	r3, fp
 80076d4:	4680      	mov	r8, r0
 80076d6:	4689      	mov	r9, r1
 80076d8:	f7f9 fa08 	bl	8000aec <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d163      	bne.n	80077a8 <_dtoa_r+0x608>
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	4936      	ldr	r1, [pc, #216]	; (80077c0 <_dtoa_r+0x620>)
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7f8 fdd6 	bl	8000298 <__aeabi_dsub>
 80076ec:	4652      	mov	r2, sl
 80076ee:	465b      	mov	r3, fp
 80076f0:	f7f9 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 80b5 	bne.w	8007864 <_dtoa_r+0x6c4>
 80076fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076fc:	429d      	cmp	r5, r3
 80076fe:	d081      	beq.n	8007604 <_dtoa_r+0x464>
 8007700:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <_dtoa_r+0x624>)
 8007702:	2200      	movs	r2, #0
 8007704:	4650      	mov	r0, sl
 8007706:	4659      	mov	r1, fp
 8007708:	f7f8 ff7e 	bl	8000608 <__aeabi_dmul>
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <_dtoa_r+0x624>)
 800770e:	4682      	mov	sl, r0
 8007710:	468b      	mov	fp, r1
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	2200      	movs	r2, #0
 8007718:	f7f8 ff76 	bl	8000608 <__aeabi_dmul>
 800771c:	4680      	mov	r8, r0
 800771e:	4689      	mov	r9, r1
 8007720:	e7c6      	b.n	80076b0 <_dtoa_r+0x510>
 8007722:	4650      	mov	r0, sl
 8007724:	4659      	mov	r1, fp
 8007726:	f7f8 ff6f 	bl	8000608 <__aeabi_dmul>
 800772a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772c:	9d01      	ldr	r5, [sp, #4]
 800772e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007730:	4682      	mov	sl, r0
 8007732:	468b      	mov	fp, r1
 8007734:	4649      	mov	r1, r9
 8007736:	4640      	mov	r0, r8
 8007738:	f7f9 fa16 	bl	8000b68 <__aeabi_d2iz>
 800773c:	4606      	mov	r6, r0
 800773e:	f7f8 fef9 	bl	8000534 <__aeabi_i2d>
 8007742:	3630      	adds	r6, #48	; 0x30
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	f7f8 fda4 	bl	8000298 <__aeabi_dsub>
 8007750:	f805 6b01 	strb.w	r6, [r5], #1
 8007754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007756:	429d      	cmp	r5, r3
 8007758:	4680      	mov	r8, r0
 800775a:	4689      	mov	r9, r1
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	d124      	bne.n	80077ac <_dtoa_r+0x60c>
 8007762:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <_dtoa_r+0x630>)
 8007764:	4650      	mov	r0, sl
 8007766:	4659      	mov	r1, fp
 8007768:	f7f8 fd98 	bl	800029c <__adddf3>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f9 f9d8 	bl	8000b28 <__aeabi_dcmpgt>
 8007778:	2800      	cmp	r0, #0
 800777a:	d173      	bne.n	8007864 <_dtoa_r+0x6c4>
 800777c:	4652      	mov	r2, sl
 800777e:	465b      	mov	r3, fp
 8007780:	4913      	ldr	r1, [pc, #76]	; (80077d0 <_dtoa_r+0x630>)
 8007782:	2000      	movs	r0, #0
 8007784:	f7f8 fd88 	bl	8000298 <__aeabi_dsub>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f9 f9ac 	bl	8000aec <__aeabi_dcmplt>
 8007794:	2800      	cmp	r0, #0
 8007796:	f43f af35 	beq.w	8007604 <_dtoa_r+0x464>
 800779a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800779c:	1e6b      	subs	r3, r5, #1
 800779e:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077a4:	2b30      	cmp	r3, #48	; 0x30
 80077a6:	d0f8      	beq.n	800779a <_dtoa_r+0x5fa>
 80077a8:	9700      	str	r7, [sp, #0]
 80077aa:	e049      	b.n	8007840 <_dtoa_r+0x6a0>
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <_dtoa_r+0x624>)
 80077ae:	f7f8 ff2b 	bl	8000608 <__aeabi_dmul>
 80077b2:	4680      	mov	r8, r0
 80077b4:	4689      	mov	r9, r1
 80077b6:	e7bd      	b.n	8007734 <_dtoa_r+0x594>
 80077b8:	0800a190 	.word	0x0800a190
 80077bc:	0800a168 	.word	0x0800a168
 80077c0:	3ff00000 	.word	0x3ff00000
 80077c4:	40240000 	.word	0x40240000
 80077c8:	401c0000 	.word	0x401c0000
 80077cc:	40140000 	.word	0x40140000
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	9d01      	ldr	r5, [sp, #4]
 80077d6:	4656      	mov	r6, sl
 80077d8:	465f      	mov	r7, fp
 80077da:	4642      	mov	r2, r8
 80077dc:	464b      	mov	r3, r9
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f9 f83b 	bl	800085c <__aeabi_ddiv>
 80077e6:	f7f9 f9bf 	bl	8000b68 <__aeabi_d2iz>
 80077ea:	4682      	mov	sl, r0
 80077ec:	f7f8 fea2 	bl	8000534 <__aeabi_i2d>
 80077f0:	4642      	mov	r2, r8
 80077f2:	464b      	mov	r3, r9
 80077f4:	f7f8 ff08 	bl	8000608 <__aeabi_dmul>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007804:	f7f8 fd48 	bl	8000298 <__aeabi_dsub>
 8007808:	f805 6b01 	strb.w	r6, [r5], #1
 800780c:	9e01      	ldr	r6, [sp, #4]
 800780e:	9f03      	ldr	r7, [sp, #12]
 8007810:	1bae      	subs	r6, r5, r6
 8007812:	42b7      	cmp	r7, r6
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	d135      	bne.n	8007886 <_dtoa_r+0x6e6>
 800781a:	f7f8 fd3f 	bl	800029c <__adddf3>
 800781e:	4642      	mov	r2, r8
 8007820:	464b      	mov	r3, r9
 8007822:	4606      	mov	r6, r0
 8007824:	460f      	mov	r7, r1
 8007826:	f7f9 f97f 	bl	8000b28 <__aeabi_dcmpgt>
 800782a:	b9d0      	cbnz	r0, 8007862 <_dtoa_r+0x6c2>
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	f7f9 f950 	bl	8000ad8 <__aeabi_dcmpeq>
 8007838:	b110      	cbz	r0, 8007840 <_dtoa_r+0x6a0>
 800783a:	f01a 0f01 	tst.w	sl, #1
 800783e:	d110      	bne.n	8007862 <_dtoa_r+0x6c2>
 8007840:	4620      	mov	r0, r4
 8007842:	ee18 1a10 	vmov	r1, s16
 8007846:	f000 faf3 	bl	8007e30 <_Bfree>
 800784a:	2300      	movs	r3, #0
 800784c:	9800      	ldr	r0, [sp, #0]
 800784e:	702b      	strb	r3, [r5, #0]
 8007850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007852:	3001      	adds	r0, #1
 8007854:	6018      	str	r0, [r3, #0]
 8007856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007858:	2b00      	cmp	r3, #0
 800785a:	f43f acf1 	beq.w	8007240 <_dtoa_r+0xa0>
 800785e:	601d      	str	r5, [r3, #0]
 8007860:	e4ee      	b.n	8007240 <_dtoa_r+0xa0>
 8007862:	9f00      	ldr	r7, [sp, #0]
 8007864:	462b      	mov	r3, r5
 8007866:	461d      	mov	r5, r3
 8007868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800786c:	2a39      	cmp	r2, #57	; 0x39
 800786e:	d106      	bne.n	800787e <_dtoa_r+0x6de>
 8007870:	9a01      	ldr	r2, [sp, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d1f7      	bne.n	8007866 <_dtoa_r+0x6c6>
 8007876:	9901      	ldr	r1, [sp, #4]
 8007878:	2230      	movs	r2, #48	; 0x30
 800787a:	3701      	adds	r7, #1
 800787c:	700a      	strb	r2, [r1, #0]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	3201      	adds	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
 8007884:	e790      	b.n	80077a8 <_dtoa_r+0x608>
 8007886:	4ba6      	ldr	r3, [pc, #664]	; (8007b20 <_dtoa_r+0x980>)
 8007888:	2200      	movs	r2, #0
 800788a:	f7f8 febd 	bl	8000608 <__aeabi_dmul>
 800788e:	2200      	movs	r2, #0
 8007890:	2300      	movs	r3, #0
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	f7f9 f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800789a:	2800      	cmp	r0, #0
 800789c:	d09d      	beq.n	80077da <_dtoa_r+0x63a>
 800789e:	e7cf      	b.n	8007840 <_dtoa_r+0x6a0>
 80078a0:	9a08      	ldr	r2, [sp, #32]
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	f000 80d7 	beq.w	8007a56 <_dtoa_r+0x8b6>
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	2a01      	cmp	r2, #1
 80078ac:	f300 80ba 	bgt.w	8007a24 <_dtoa_r+0x884>
 80078b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	f000 80b2 	beq.w	8007a1c <_dtoa_r+0x87c>
 80078b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078bc:	9e07      	ldr	r6, [sp, #28]
 80078be:	9d04      	ldr	r5, [sp, #16]
 80078c0:	9a04      	ldr	r2, [sp, #16]
 80078c2:	441a      	add	r2, r3
 80078c4:	9204      	str	r2, [sp, #16]
 80078c6:	9a05      	ldr	r2, [sp, #20]
 80078c8:	2101      	movs	r1, #1
 80078ca:	441a      	add	r2, r3
 80078cc:	4620      	mov	r0, r4
 80078ce:	9205      	str	r2, [sp, #20]
 80078d0:	f000 fb66 	bl	8007fa0 <__i2b>
 80078d4:	4607      	mov	r7, r0
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	dd0c      	ble.n	80078f4 <_dtoa_r+0x754>
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd09      	ble.n	80078f4 <_dtoa_r+0x754>
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	9a04      	ldr	r2, [sp, #16]
 80078e4:	bfa8      	it	ge
 80078e6:	462b      	movge	r3, r5
 80078e8:	1ad2      	subs	r2, r2, r3
 80078ea:	9204      	str	r2, [sp, #16]
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	1aed      	subs	r5, r5, r3
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	b31b      	cbz	r3, 8007940 <_dtoa_r+0x7a0>
 80078f8:	9b08      	ldr	r3, [sp, #32]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80af 	beq.w	8007a5e <_dtoa_r+0x8be>
 8007900:	2e00      	cmp	r6, #0
 8007902:	dd13      	ble.n	800792c <_dtoa_r+0x78c>
 8007904:	4639      	mov	r1, r7
 8007906:	4632      	mov	r2, r6
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fc09 	bl	8008120 <__pow5mult>
 800790e:	ee18 2a10 	vmov	r2, s16
 8007912:	4601      	mov	r1, r0
 8007914:	4607      	mov	r7, r0
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fb58 	bl	8007fcc <__multiply>
 800791c:	ee18 1a10 	vmov	r1, s16
 8007920:	4680      	mov	r8, r0
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fa84 	bl	8007e30 <_Bfree>
 8007928:	ee08 8a10 	vmov	s16, r8
 800792c:	9b07      	ldr	r3, [sp, #28]
 800792e:	1b9a      	subs	r2, r3, r6
 8007930:	d006      	beq.n	8007940 <_dtoa_r+0x7a0>
 8007932:	ee18 1a10 	vmov	r1, s16
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fbf2 	bl	8008120 <__pow5mult>
 800793c:	ee08 0a10 	vmov	s16, r0
 8007940:	2101      	movs	r1, #1
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fb2c 	bl	8007fa0 <__i2b>
 8007948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	4606      	mov	r6, r0
 800794e:	f340 8088 	ble.w	8007a62 <_dtoa_r+0x8c2>
 8007952:	461a      	mov	r2, r3
 8007954:	4601      	mov	r1, r0
 8007956:	4620      	mov	r0, r4
 8007958:	f000 fbe2 	bl	8008120 <__pow5mult>
 800795c:	9b06      	ldr	r3, [sp, #24]
 800795e:	2b01      	cmp	r3, #1
 8007960:	4606      	mov	r6, r0
 8007962:	f340 8081 	ble.w	8007a68 <_dtoa_r+0x8c8>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	6933      	ldr	r3, [r6, #16]
 800796c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007970:	6918      	ldr	r0, [r3, #16]
 8007972:	f000 fac5 	bl	8007f00 <__hi0bits>
 8007976:	f1c0 0020 	rsb	r0, r0, #32
 800797a:	9b05      	ldr	r3, [sp, #20]
 800797c:	4418      	add	r0, r3
 800797e:	f010 001f 	ands.w	r0, r0, #31
 8007982:	f000 8092 	beq.w	8007aaa <_dtoa_r+0x90a>
 8007986:	f1c0 0320 	rsb	r3, r0, #32
 800798a:	2b04      	cmp	r3, #4
 800798c:	f340 808a 	ble.w	8007aa4 <_dtoa_r+0x904>
 8007990:	f1c0 001c 	rsb	r0, r0, #28
 8007994:	9b04      	ldr	r3, [sp, #16]
 8007996:	4403      	add	r3, r0
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	4403      	add	r3, r0
 800799e:	4405      	add	r5, r0
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dd07      	ble.n	80079b8 <_dtoa_r+0x818>
 80079a8:	ee18 1a10 	vmov	r1, s16
 80079ac:	461a      	mov	r2, r3
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 fc10 	bl	80081d4 <__lshift>
 80079b4:	ee08 0a10 	vmov	s16, r0
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd05      	ble.n	80079ca <_dtoa_r+0x82a>
 80079be:	4631      	mov	r1, r6
 80079c0:	461a      	mov	r2, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fc06 	bl	80081d4 <__lshift>
 80079c8:	4606      	mov	r6, r0
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d06e      	beq.n	8007aae <_dtoa_r+0x90e>
 80079d0:	ee18 0a10 	vmov	r0, s16
 80079d4:	4631      	mov	r1, r6
 80079d6:	f000 fc6d 	bl	80082b4 <__mcmp>
 80079da:	2800      	cmp	r0, #0
 80079dc:	da67      	bge.n	8007aae <_dtoa_r+0x90e>
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	ee18 1a10 	vmov	r1, s16
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	220a      	movs	r2, #10
 80079ea:	2300      	movs	r3, #0
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fa41 	bl	8007e74 <__multadd>
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	ee08 0a10 	vmov	s16, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 81b1 	beq.w	8007d60 <_dtoa_r+0xbc0>
 80079fe:	2300      	movs	r3, #0
 8007a00:	4639      	mov	r1, r7
 8007a02:	220a      	movs	r2, #10
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fa35 	bl	8007e74 <__multadd>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	4607      	mov	r7, r0
 8007a10:	f300 808e 	bgt.w	8007b30 <_dtoa_r+0x990>
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	dc51      	bgt.n	8007abe <_dtoa_r+0x91e>
 8007a1a:	e089      	b.n	8007b30 <_dtoa_r+0x990>
 8007a1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a22:	e74b      	b.n	80078bc <_dtoa_r+0x71c>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	1e5e      	subs	r6, r3, #1
 8007a28:	9b07      	ldr	r3, [sp, #28]
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	bfbf      	itttt	lt
 8007a2e:	9b07      	ldrlt	r3, [sp, #28]
 8007a30:	9607      	strlt	r6, [sp, #28]
 8007a32:	1af2      	sublt	r2, r6, r3
 8007a34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a36:	bfb6      	itet	lt
 8007a38:	189b      	addlt	r3, r3, r2
 8007a3a:	1b9e      	subge	r6, r3, r6
 8007a3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	bfb8      	it	lt
 8007a42:	2600      	movlt	r6, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bfb7      	itett	lt
 8007a48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a50:	1a9d      	sublt	r5, r3, r2
 8007a52:	2300      	movlt	r3, #0
 8007a54:	e734      	b.n	80078c0 <_dtoa_r+0x720>
 8007a56:	9e07      	ldr	r6, [sp, #28]
 8007a58:	9d04      	ldr	r5, [sp, #16]
 8007a5a:	9f08      	ldr	r7, [sp, #32]
 8007a5c:	e73b      	b.n	80078d6 <_dtoa_r+0x736>
 8007a5e:	9a07      	ldr	r2, [sp, #28]
 8007a60:	e767      	b.n	8007932 <_dtoa_r+0x792>
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	dc18      	bgt.n	8007a9a <_dtoa_r+0x8fa>
 8007a68:	f1ba 0f00 	cmp.w	sl, #0
 8007a6c:	d115      	bne.n	8007a9a <_dtoa_r+0x8fa>
 8007a6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a72:	b993      	cbnz	r3, 8007a9a <_dtoa_r+0x8fa>
 8007a74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a78:	0d1b      	lsrs	r3, r3, #20
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	b183      	cbz	r3, 8007aa0 <_dtoa_r+0x900>
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	3301      	adds	r3, #1
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	9b05      	ldr	r3, [sp, #20]
 8007a86:	3301      	adds	r3, #1
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f04f 0801 	mov.w	r8, #1
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f47f af6a 	bne.w	800796a <_dtoa_r+0x7ca>
 8007a96:	2001      	movs	r0, #1
 8007a98:	e76f      	b.n	800797a <_dtoa_r+0x7da>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	e7f6      	b.n	8007a8e <_dtoa_r+0x8ee>
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	e7f4      	b.n	8007a8e <_dtoa_r+0x8ee>
 8007aa4:	f43f af7d 	beq.w	80079a2 <_dtoa_r+0x802>
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	301c      	adds	r0, #28
 8007aac:	e772      	b.n	8007994 <_dtoa_r+0x7f4>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dc37      	bgt.n	8007b24 <_dtoa_r+0x984>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	dd34      	ble.n	8007b24 <_dtoa_r+0x984>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	9302      	str	r3, [sp, #8]
 8007abe:	9b02      	ldr	r3, [sp, #8]
 8007ac0:	b96b      	cbnz	r3, 8007ade <_dtoa_r+0x93e>
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 f9d4 	bl	8007e74 <__multadd>
 8007acc:	4601      	mov	r1, r0
 8007ace:	4606      	mov	r6, r0
 8007ad0:	ee18 0a10 	vmov	r0, s16
 8007ad4:	f000 fbee 	bl	80082b4 <__mcmp>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f73f adbb 	bgt.w	8007654 <_dtoa_r+0x4b4>
 8007ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae0:	9d01      	ldr	r5, [sp, #4]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	4631      	mov	r1, r6
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f99f 	bl	8007e30 <_Bfree>
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	f43f aea4 	beq.w	8007840 <_dtoa_r+0x6a0>
 8007af8:	f1b8 0f00 	cmp.w	r8, #0
 8007afc:	d005      	beq.n	8007b0a <_dtoa_r+0x96a>
 8007afe:	45b8      	cmp	r8, r7
 8007b00:	d003      	beq.n	8007b0a <_dtoa_r+0x96a>
 8007b02:	4641      	mov	r1, r8
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 f993 	bl	8007e30 <_Bfree>
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 f98f 	bl	8007e30 <_Bfree>
 8007b12:	e695      	b.n	8007840 <_dtoa_r+0x6a0>
 8007b14:	2600      	movs	r6, #0
 8007b16:	4637      	mov	r7, r6
 8007b18:	e7e1      	b.n	8007ade <_dtoa_r+0x93e>
 8007b1a:	9700      	str	r7, [sp, #0]
 8007b1c:	4637      	mov	r7, r6
 8007b1e:	e599      	b.n	8007654 <_dtoa_r+0x4b4>
 8007b20:	40240000 	.word	0x40240000
 8007b24:	9b08      	ldr	r3, [sp, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80ca 	beq.w	8007cc0 <_dtoa_r+0xb20>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	2d00      	cmp	r5, #0
 8007b32:	dd05      	ble.n	8007b40 <_dtoa_r+0x9a0>
 8007b34:	4639      	mov	r1, r7
 8007b36:	462a      	mov	r2, r5
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fb4b 	bl	80081d4 <__lshift>
 8007b3e:	4607      	mov	r7, r0
 8007b40:	f1b8 0f00 	cmp.w	r8, #0
 8007b44:	d05b      	beq.n	8007bfe <_dtoa_r+0xa5e>
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 f931 	bl	8007db0 <_Balloc>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <_dtoa_r+0x9be>
 8007b52:	4b87      	ldr	r3, [pc, #540]	; (8007d70 <_dtoa_r+0xbd0>)
 8007b54:	4602      	mov	r2, r0
 8007b56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b5a:	f7ff bb3b 	b.w	80071d4 <_dtoa_r+0x34>
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	3202      	adds	r2, #2
 8007b62:	0092      	lsls	r2, r2, #2
 8007b64:	f107 010c 	add.w	r1, r7, #12
 8007b68:	300c      	adds	r0, #12
 8007b6a:	f000 f913 	bl	8007d94 <memcpy>
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4629      	mov	r1, r5
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fb2e 	bl	80081d4 <__lshift>
 8007b78:	9b01      	ldr	r3, [sp, #4]
 8007b7a:	f103 0901 	add.w	r9, r3, #1
 8007b7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b82:	4413      	add	r3, r2
 8007b84:	9305      	str	r3, [sp, #20]
 8007b86:	f00a 0301 	and.w	r3, sl, #1
 8007b8a:	46b8      	mov	r8, r7
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	4607      	mov	r7, r0
 8007b90:	4631      	mov	r1, r6
 8007b92:	ee18 0a10 	vmov	r0, s16
 8007b96:	f7ff fa77 	bl	8007088 <quorem>
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	9002      	str	r0, [sp, #8]
 8007b9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ba2:	ee18 0a10 	vmov	r0, s16
 8007ba6:	f000 fb85 	bl	80082b4 <__mcmp>
 8007baa:	463a      	mov	r2, r7
 8007bac:	9003      	str	r0, [sp, #12]
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fb9b 	bl	80082ec <__mdiff>
 8007bb6:	68c2      	ldr	r2, [r0, #12]
 8007bb8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	bb02      	cbnz	r2, 8007c02 <_dtoa_r+0xa62>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	ee18 0a10 	vmov	r0, s16
 8007bc6:	f000 fb75 	bl	80082b4 <__mcmp>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4620      	mov	r0, r4
 8007bd0:	9207      	str	r2, [sp, #28]
 8007bd2:	f000 f92d 	bl	8007e30 <_Bfree>
 8007bd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007bda:	ea43 0102 	orr.w	r1, r3, r2
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	430b      	orrs	r3, r1
 8007be2:	464d      	mov	r5, r9
 8007be4:	d10f      	bne.n	8007c06 <_dtoa_r+0xa66>
 8007be6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bea:	d02a      	beq.n	8007c42 <_dtoa_r+0xaa2>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dd02      	ble.n	8007bf8 <_dtoa_r+0xa58>
 8007bf2:	9b02      	ldr	r3, [sp, #8]
 8007bf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007bf8:	f88b a000 	strb.w	sl, [fp]
 8007bfc:	e775      	b.n	8007aea <_dtoa_r+0x94a>
 8007bfe:	4638      	mov	r0, r7
 8007c00:	e7ba      	b.n	8007b78 <_dtoa_r+0x9d8>
 8007c02:	2201      	movs	r2, #1
 8007c04:	e7e2      	b.n	8007bcc <_dtoa_r+0xa2c>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	db04      	blt.n	8007c16 <_dtoa_r+0xa76>
 8007c0c:	9906      	ldr	r1, [sp, #24]
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	9904      	ldr	r1, [sp, #16]
 8007c12:	430b      	orrs	r3, r1
 8007c14:	d122      	bne.n	8007c5c <_dtoa_r+0xabc>
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	ddee      	ble.n	8007bf8 <_dtoa_r+0xa58>
 8007c1a:	ee18 1a10 	vmov	r1, s16
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fad7 	bl	80081d4 <__lshift>
 8007c26:	4631      	mov	r1, r6
 8007c28:	ee08 0a10 	vmov	s16, r0
 8007c2c:	f000 fb42 	bl	80082b4 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	dc03      	bgt.n	8007c3c <_dtoa_r+0xa9c>
 8007c34:	d1e0      	bne.n	8007bf8 <_dtoa_r+0xa58>
 8007c36:	f01a 0f01 	tst.w	sl, #1
 8007c3a:	d0dd      	beq.n	8007bf8 <_dtoa_r+0xa58>
 8007c3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c40:	d1d7      	bne.n	8007bf2 <_dtoa_r+0xa52>
 8007c42:	2339      	movs	r3, #57	; 0x39
 8007c44:	f88b 3000 	strb.w	r3, [fp]
 8007c48:	462b      	mov	r3, r5
 8007c4a:	461d      	mov	r5, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c52:	2a39      	cmp	r2, #57	; 0x39
 8007c54:	d071      	beq.n	8007d3a <_dtoa_r+0xb9a>
 8007c56:	3201      	adds	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e746      	b.n	8007aea <_dtoa_r+0x94a>
 8007c5c:	2a00      	cmp	r2, #0
 8007c5e:	dd07      	ble.n	8007c70 <_dtoa_r+0xad0>
 8007c60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c64:	d0ed      	beq.n	8007c42 <_dtoa_r+0xaa2>
 8007c66:	f10a 0301 	add.w	r3, sl, #1
 8007c6a:	f88b 3000 	strb.w	r3, [fp]
 8007c6e:	e73c      	b.n	8007aea <_dtoa_r+0x94a>
 8007c70:	9b05      	ldr	r3, [sp, #20]
 8007c72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c76:	4599      	cmp	r9, r3
 8007c78:	d047      	beq.n	8007d0a <_dtoa_r+0xb6a>
 8007c7a:	ee18 1a10 	vmov	r1, s16
 8007c7e:	2300      	movs	r3, #0
 8007c80:	220a      	movs	r2, #10
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f8f6 	bl	8007e74 <__multadd>
 8007c88:	45b8      	cmp	r8, r7
 8007c8a:	ee08 0a10 	vmov	s16, r0
 8007c8e:	f04f 0300 	mov.w	r3, #0
 8007c92:	f04f 020a 	mov.w	r2, #10
 8007c96:	4641      	mov	r1, r8
 8007c98:	4620      	mov	r0, r4
 8007c9a:	d106      	bne.n	8007caa <_dtoa_r+0xb0a>
 8007c9c:	f000 f8ea 	bl	8007e74 <__multadd>
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	f109 0901 	add.w	r9, r9, #1
 8007ca8:	e772      	b.n	8007b90 <_dtoa_r+0x9f0>
 8007caa:	f000 f8e3 	bl	8007e74 <__multadd>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f8dc 	bl	8007e74 <__multadd>
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	e7f1      	b.n	8007ca4 <_dtoa_r+0xb04>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	9302      	str	r3, [sp, #8]
 8007cc4:	9d01      	ldr	r5, [sp, #4]
 8007cc6:	ee18 0a10 	vmov	r0, s16
 8007cca:	4631      	mov	r1, r6
 8007ccc:	f7ff f9dc 	bl	8007088 <quorem>
 8007cd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	f805 ab01 	strb.w	sl, [r5], #1
 8007cda:	1aea      	subs	r2, r5, r3
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	dd09      	ble.n	8007cf6 <_dtoa_r+0xb56>
 8007ce2:	ee18 1a10 	vmov	r1, s16
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f8c2 	bl	8007e74 <__multadd>
 8007cf0:	ee08 0a10 	vmov	s16, r0
 8007cf4:	e7e7      	b.n	8007cc6 <_dtoa_r+0xb26>
 8007cf6:	9b02      	ldr	r3, [sp, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfc8      	it	gt
 8007cfc:	461d      	movgt	r5, r3
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	bfd8      	it	le
 8007d02:	2501      	movle	r5, #1
 8007d04:	441d      	add	r5, r3
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	ee18 1a10 	vmov	r1, s16
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fa5f 	bl	80081d4 <__lshift>
 8007d16:	4631      	mov	r1, r6
 8007d18:	ee08 0a10 	vmov	s16, r0
 8007d1c:	f000 faca 	bl	80082b4 <__mcmp>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dc91      	bgt.n	8007c48 <_dtoa_r+0xaa8>
 8007d24:	d102      	bne.n	8007d2c <_dtoa_r+0xb8c>
 8007d26:	f01a 0f01 	tst.w	sl, #1
 8007d2a:	d18d      	bne.n	8007c48 <_dtoa_r+0xaa8>
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	461d      	mov	r5, r3
 8007d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d34:	2a30      	cmp	r2, #48	; 0x30
 8007d36:	d0fa      	beq.n	8007d2e <_dtoa_r+0xb8e>
 8007d38:	e6d7      	b.n	8007aea <_dtoa_r+0x94a>
 8007d3a:	9a01      	ldr	r2, [sp, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d184      	bne.n	8007c4a <_dtoa_r+0xaaa>
 8007d40:	9b00      	ldr	r3, [sp, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	2331      	movs	r3, #49	; 0x31
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	e6ce      	b.n	8007aea <_dtoa_r+0x94a>
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <_dtoa_r+0xbd4>)
 8007d4e:	f7ff ba95 	b.w	800727c <_dtoa_r+0xdc>
 8007d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f47f aa6e 	bne.w	8007236 <_dtoa_r+0x96>
 8007d5a:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <_dtoa_r+0xbd8>)
 8007d5c:	f7ff ba8e 	b.w	800727c <_dtoa_r+0xdc>
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dcae      	bgt.n	8007cc4 <_dtoa_r+0xb24>
 8007d66:	9b06      	ldr	r3, [sp, #24]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	f73f aea8 	bgt.w	8007abe <_dtoa_r+0x91e>
 8007d6e:	e7a9      	b.n	8007cc4 <_dtoa_r+0xb24>
 8007d70:	0800a0f7 	.word	0x0800a0f7
 8007d74:	0800a054 	.word	0x0800a054
 8007d78:	0800a078 	.word	0x0800a078

08007d7c <_localeconv_r>:
 8007d7c:	4800      	ldr	r0, [pc, #0]	; (8007d80 <_localeconv_r+0x4>)
 8007d7e:	4770      	bx	lr
 8007d80:	2000017c 	.word	0x2000017c

08007d84 <malloc>:
 8007d84:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <malloc+0xc>)
 8007d86:	4601      	mov	r1, r0
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	f000 bc17 	b.w	80085bc <_malloc_r>
 8007d8e:	bf00      	nop
 8007d90:	20000028 	.word	0x20000028

08007d94 <memcpy>:
 8007d94:	440a      	add	r2, r1
 8007d96:	4291      	cmp	r1, r2
 8007d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d9c:	d100      	bne.n	8007da0 <memcpy+0xc>
 8007d9e:	4770      	bx	lr
 8007da0:	b510      	push	{r4, lr}
 8007da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007daa:	4291      	cmp	r1, r2
 8007dac:	d1f9      	bne.n	8007da2 <memcpy+0xe>
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <_Balloc>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	b976      	cbnz	r6, 8007dd8 <_Balloc+0x28>
 8007dba:	2010      	movs	r0, #16
 8007dbc:	f7ff ffe2 	bl	8007d84 <malloc>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8007dc4:	b920      	cbnz	r0, 8007dd0 <_Balloc+0x20>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <_Balloc+0x78>)
 8007dc8:	4818      	ldr	r0, [pc, #96]	; (8007e2c <_Balloc+0x7c>)
 8007dca:	2166      	movs	r1, #102	; 0x66
 8007dcc:	f000 fdd6 	bl	800897c <__assert_func>
 8007dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dd4:	6006      	str	r6, [r0, #0]
 8007dd6:	60c6      	str	r6, [r0, #12]
 8007dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007dda:	68f3      	ldr	r3, [r6, #12]
 8007ddc:	b183      	cbz	r3, 8007e00 <_Balloc+0x50>
 8007dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007de6:	b9b8      	cbnz	r0, 8007e18 <_Balloc+0x68>
 8007de8:	2101      	movs	r1, #1
 8007dea:	fa01 f605 	lsl.w	r6, r1, r5
 8007dee:	1d72      	adds	r2, r6, #5
 8007df0:	0092      	lsls	r2, r2, #2
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 fb60 	bl	80084b8 <_calloc_r>
 8007df8:	b160      	cbz	r0, 8007e14 <_Balloc+0x64>
 8007dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dfe:	e00e      	b.n	8007e1e <_Balloc+0x6e>
 8007e00:	2221      	movs	r2, #33	; 0x21
 8007e02:	2104      	movs	r1, #4
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fb57 	bl	80084b8 <_calloc_r>
 8007e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e0c:	60f0      	str	r0, [r6, #12]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e4      	bne.n	8007dde <_Balloc+0x2e>
 8007e14:	2000      	movs	r0, #0
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	6802      	ldr	r2, [r0, #0]
 8007e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e24:	e7f7      	b.n	8007e16 <_Balloc+0x66>
 8007e26:	bf00      	nop
 8007e28:	0800a085 	.word	0x0800a085
 8007e2c:	0800a108 	.word	0x0800a108

08007e30 <_Bfree>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e34:	4605      	mov	r5, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	b976      	cbnz	r6, 8007e58 <_Bfree+0x28>
 8007e3a:	2010      	movs	r0, #16
 8007e3c:	f7ff ffa2 	bl	8007d84 <malloc>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6268      	str	r0, [r5, #36]	; 0x24
 8007e44:	b920      	cbnz	r0, 8007e50 <_Bfree+0x20>
 8007e46:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <_Bfree+0x3c>)
 8007e48:	4809      	ldr	r0, [pc, #36]	; (8007e70 <_Bfree+0x40>)
 8007e4a:	218a      	movs	r1, #138	; 0x8a
 8007e4c:	f000 fd96 	bl	800897c <__assert_func>
 8007e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e54:	6006      	str	r6, [r0, #0]
 8007e56:	60c6      	str	r6, [r0, #12]
 8007e58:	b13c      	cbz	r4, 8007e6a <_Bfree+0x3a>
 8007e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e5c:	6862      	ldr	r2, [r4, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e64:	6021      	str	r1, [r4, #0]
 8007e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	0800a085 	.word	0x0800a085
 8007e70:	0800a108 	.word	0x0800a108

08007e74 <__multadd>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	690d      	ldr	r5, [r1, #16]
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	461e      	mov	r6, r3
 8007e80:	f101 0c14 	add.w	ip, r1, #20
 8007e84:	2000      	movs	r0, #0
 8007e86:	f8dc 3000 	ldr.w	r3, [ip]
 8007e8a:	b299      	uxth	r1, r3
 8007e8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e90:	0c1e      	lsrs	r6, r3, #16
 8007e92:	0c0b      	lsrs	r3, r1, #16
 8007e94:	fb02 3306 	mla	r3, r2, r6, r3
 8007e98:	b289      	uxth	r1, r1
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ea0:	4285      	cmp	r5, r0
 8007ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007eaa:	dcec      	bgt.n	8007e86 <__multadd+0x12>
 8007eac:	b30e      	cbz	r6, 8007ef2 <__multadd+0x7e>
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	dc19      	bgt.n	8007ee8 <__multadd+0x74>
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	3101      	adds	r1, #1
 8007eba:	f7ff ff79 	bl	8007db0 <_Balloc>
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	b928      	cbnz	r0, 8007ece <__multadd+0x5a>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <__multadd+0x84>)
 8007ec6:	480d      	ldr	r0, [pc, #52]	; (8007efc <__multadd+0x88>)
 8007ec8:	21b5      	movs	r1, #181	; 0xb5
 8007eca:	f000 fd57 	bl	800897c <__assert_func>
 8007ece:	6922      	ldr	r2, [r4, #16]
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	f104 010c 	add.w	r1, r4, #12
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	300c      	adds	r0, #12
 8007eda:	f7ff ff5b 	bl	8007d94 <memcpy>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ffa5 	bl	8007e30 <_Bfree>
 8007ee6:	4644      	mov	r4, r8
 8007ee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eec:	3501      	adds	r5, #1
 8007eee:	615e      	str	r6, [r3, #20]
 8007ef0:	6125      	str	r5, [r4, #16]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	0800a0f7 	.word	0x0800a0f7
 8007efc:	0800a108 	.word	0x0800a108

08007f00 <__hi0bits>:
 8007f00:	0c03      	lsrs	r3, r0, #16
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	b9d3      	cbnz	r3, 8007f3c <__hi0bits+0x3c>
 8007f06:	0400      	lsls	r0, r0, #16
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f0e:	bf04      	itt	eq
 8007f10:	0200      	lsleq	r0, r0, #8
 8007f12:	3308      	addeq	r3, #8
 8007f14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f18:	bf04      	itt	eq
 8007f1a:	0100      	lsleq	r0, r0, #4
 8007f1c:	3304      	addeq	r3, #4
 8007f1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f22:	bf04      	itt	eq
 8007f24:	0080      	lsleq	r0, r0, #2
 8007f26:	3302      	addeq	r3, #2
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	db05      	blt.n	8007f38 <__hi0bits+0x38>
 8007f2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f30:	f103 0301 	add.w	r3, r3, #1
 8007f34:	bf08      	it	eq
 8007f36:	2320      	moveq	r3, #32
 8007f38:	4618      	mov	r0, r3
 8007f3a:	4770      	bx	lr
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e7e4      	b.n	8007f0a <__hi0bits+0xa>

08007f40 <__lo0bits>:
 8007f40:	6803      	ldr	r3, [r0, #0]
 8007f42:	f013 0207 	ands.w	r2, r3, #7
 8007f46:	4601      	mov	r1, r0
 8007f48:	d00b      	beq.n	8007f62 <__lo0bits+0x22>
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d423      	bmi.n	8007f96 <__lo0bits+0x56>
 8007f4e:	0798      	lsls	r0, r3, #30
 8007f50:	bf49      	itett	mi
 8007f52:	085b      	lsrmi	r3, r3, #1
 8007f54:	089b      	lsrpl	r3, r3, #2
 8007f56:	2001      	movmi	r0, #1
 8007f58:	600b      	strmi	r3, [r1, #0]
 8007f5a:	bf5c      	itt	pl
 8007f5c:	600b      	strpl	r3, [r1, #0]
 8007f5e:	2002      	movpl	r0, #2
 8007f60:	4770      	bx	lr
 8007f62:	b298      	uxth	r0, r3
 8007f64:	b9a8      	cbnz	r0, 8007f92 <__lo0bits+0x52>
 8007f66:	0c1b      	lsrs	r3, r3, #16
 8007f68:	2010      	movs	r0, #16
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	b90a      	cbnz	r2, 8007f72 <__lo0bits+0x32>
 8007f6e:	3008      	adds	r0, #8
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	071a      	lsls	r2, r3, #28
 8007f74:	bf04      	itt	eq
 8007f76:	091b      	lsreq	r3, r3, #4
 8007f78:	3004      	addeq	r0, #4
 8007f7a:	079a      	lsls	r2, r3, #30
 8007f7c:	bf04      	itt	eq
 8007f7e:	089b      	lsreq	r3, r3, #2
 8007f80:	3002      	addeq	r0, #2
 8007f82:	07da      	lsls	r2, r3, #31
 8007f84:	d403      	bmi.n	8007f8e <__lo0bits+0x4e>
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	f100 0001 	add.w	r0, r0, #1
 8007f8c:	d005      	beq.n	8007f9a <__lo0bits+0x5a>
 8007f8e:	600b      	str	r3, [r1, #0]
 8007f90:	4770      	bx	lr
 8007f92:	4610      	mov	r0, r2
 8007f94:	e7e9      	b.n	8007f6a <__lo0bits+0x2a>
 8007f96:	2000      	movs	r0, #0
 8007f98:	4770      	bx	lr
 8007f9a:	2020      	movs	r0, #32
 8007f9c:	4770      	bx	lr
	...

08007fa0 <__i2b>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	f7ff ff03 	bl	8007db0 <_Balloc>
 8007faa:	4602      	mov	r2, r0
 8007fac:	b928      	cbnz	r0, 8007fba <__i2b+0x1a>
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <__i2b+0x24>)
 8007fb0:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <__i2b+0x28>)
 8007fb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fb6:	f000 fce1 	bl	800897c <__assert_func>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	6144      	str	r4, [r0, #20]
 8007fbe:	6103      	str	r3, [r0, #16]
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	0800a0f7 	.word	0x0800a0f7
 8007fc8:	0800a108 	.word	0x0800a108

08007fcc <__multiply>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	4691      	mov	r9, r2
 8007fd2:	690a      	ldr	r2, [r1, #16]
 8007fd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	bfb8      	it	lt
 8007fdc:	460b      	movlt	r3, r1
 8007fde:	460c      	mov	r4, r1
 8007fe0:	bfbc      	itt	lt
 8007fe2:	464c      	movlt	r4, r9
 8007fe4:	4699      	movlt	r9, r3
 8007fe6:	6927      	ldr	r7, [r4, #16]
 8007fe8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fec:	68a3      	ldr	r3, [r4, #8]
 8007fee:	6861      	ldr	r1, [r4, #4]
 8007ff0:	eb07 060a 	add.w	r6, r7, sl
 8007ff4:	42b3      	cmp	r3, r6
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	bfb8      	it	lt
 8007ffa:	3101      	addlt	r1, #1
 8007ffc:	f7ff fed8 	bl	8007db0 <_Balloc>
 8008000:	b930      	cbnz	r0, 8008010 <__multiply+0x44>
 8008002:	4602      	mov	r2, r0
 8008004:	4b44      	ldr	r3, [pc, #272]	; (8008118 <__multiply+0x14c>)
 8008006:	4845      	ldr	r0, [pc, #276]	; (800811c <__multiply+0x150>)
 8008008:	f240 115d 	movw	r1, #349	; 0x15d
 800800c:	f000 fcb6 	bl	800897c <__assert_func>
 8008010:	f100 0514 	add.w	r5, r0, #20
 8008014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008018:	462b      	mov	r3, r5
 800801a:	2200      	movs	r2, #0
 800801c:	4543      	cmp	r3, r8
 800801e:	d321      	bcc.n	8008064 <__multiply+0x98>
 8008020:	f104 0314 	add.w	r3, r4, #20
 8008024:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008028:	f109 0314 	add.w	r3, r9, #20
 800802c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008030:	9202      	str	r2, [sp, #8]
 8008032:	1b3a      	subs	r2, r7, r4
 8008034:	3a15      	subs	r2, #21
 8008036:	f022 0203 	bic.w	r2, r2, #3
 800803a:	3204      	adds	r2, #4
 800803c:	f104 0115 	add.w	r1, r4, #21
 8008040:	428f      	cmp	r7, r1
 8008042:	bf38      	it	cc
 8008044:	2204      	movcc	r2, #4
 8008046:	9201      	str	r2, [sp, #4]
 8008048:	9a02      	ldr	r2, [sp, #8]
 800804a:	9303      	str	r3, [sp, #12]
 800804c:	429a      	cmp	r2, r3
 800804e:	d80c      	bhi.n	800806a <__multiply+0x9e>
 8008050:	2e00      	cmp	r6, #0
 8008052:	dd03      	ble.n	800805c <__multiply+0x90>
 8008054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008058:	2b00      	cmp	r3, #0
 800805a:	d05a      	beq.n	8008112 <__multiply+0x146>
 800805c:	6106      	str	r6, [r0, #16]
 800805e:	b005      	add	sp, #20
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	f843 2b04 	str.w	r2, [r3], #4
 8008068:	e7d8      	b.n	800801c <__multiply+0x50>
 800806a:	f8b3 a000 	ldrh.w	sl, [r3]
 800806e:	f1ba 0f00 	cmp.w	sl, #0
 8008072:	d024      	beq.n	80080be <__multiply+0xf2>
 8008074:	f104 0e14 	add.w	lr, r4, #20
 8008078:	46a9      	mov	r9, r5
 800807a:	f04f 0c00 	mov.w	ip, #0
 800807e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008082:	f8d9 1000 	ldr.w	r1, [r9]
 8008086:	fa1f fb82 	uxth.w	fp, r2
 800808a:	b289      	uxth	r1, r1
 800808c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008090:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008094:	f8d9 2000 	ldr.w	r2, [r9]
 8008098:	4461      	add	r1, ip
 800809a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800809e:	fb0a c20b 	mla	r2, sl, fp, ip
 80080a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080a6:	b289      	uxth	r1, r1
 80080a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080ac:	4577      	cmp	r7, lr
 80080ae:	f849 1b04 	str.w	r1, [r9], #4
 80080b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80080b6:	d8e2      	bhi.n	800807e <__multiply+0xb2>
 80080b8:	9a01      	ldr	r2, [sp, #4]
 80080ba:	f845 c002 	str.w	ip, [r5, r2]
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080c4:	3304      	adds	r3, #4
 80080c6:	f1b9 0f00 	cmp.w	r9, #0
 80080ca:	d020      	beq.n	800810e <__multiply+0x142>
 80080cc:	6829      	ldr	r1, [r5, #0]
 80080ce:	f104 0c14 	add.w	ip, r4, #20
 80080d2:	46ae      	mov	lr, r5
 80080d4:	f04f 0a00 	mov.w	sl, #0
 80080d8:	f8bc b000 	ldrh.w	fp, [ip]
 80080dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080e0:	fb09 220b 	mla	r2, r9, fp, r2
 80080e4:	4492      	add	sl, r2
 80080e6:	b289      	uxth	r1, r1
 80080e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80080ec:	f84e 1b04 	str.w	r1, [lr], #4
 80080f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080f4:	f8be 1000 	ldrh.w	r1, [lr]
 80080f8:	0c12      	lsrs	r2, r2, #16
 80080fa:	fb09 1102 	mla	r1, r9, r2, r1
 80080fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008102:	4567      	cmp	r7, ip
 8008104:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008108:	d8e6      	bhi.n	80080d8 <__multiply+0x10c>
 800810a:	9a01      	ldr	r2, [sp, #4]
 800810c:	50a9      	str	r1, [r5, r2]
 800810e:	3504      	adds	r5, #4
 8008110:	e79a      	b.n	8008048 <__multiply+0x7c>
 8008112:	3e01      	subs	r6, #1
 8008114:	e79c      	b.n	8008050 <__multiply+0x84>
 8008116:	bf00      	nop
 8008118:	0800a0f7 	.word	0x0800a0f7
 800811c:	0800a108 	.word	0x0800a108

08008120 <__pow5mult>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	4615      	mov	r5, r2
 8008126:	f012 0203 	ands.w	r2, r2, #3
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	d007      	beq.n	8008140 <__pow5mult+0x20>
 8008130:	4c25      	ldr	r4, [pc, #148]	; (80081c8 <__pow5mult+0xa8>)
 8008132:	3a01      	subs	r2, #1
 8008134:	2300      	movs	r3, #0
 8008136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800813a:	f7ff fe9b 	bl	8007e74 <__multadd>
 800813e:	4607      	mov	r7, r0
 8008140:	10ad      	asrs	r5, r5, #2
 8008142:	d03d      	beq.n	80081c0 <__pow5mult+0xa0>
 8008144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008146:	b97c      	cbnz	r4, 8008168 <__pow5mult+0x48>
 8008148:	2010      	movs	r0, #16
 800814a:	f7ff fe1b 	bl	8007d84 <malloc>
 800814e:	4602      	mov	r2, r0
 8008150:	6270      	str	r0, [r6, #36]	; 0x24
 8008152:	b928      	cbnz	r0, 8008160 <__pow5mult+0x40>
 8008154:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <__pow5mult+0xac>)
 8008156:	481e      	ldr	r0, [pc, #120]	; (80081d0 <__pow5mult+0xb0>)
 8008158:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800815c:	f000 fc0e 	bl	800897c <__assert_func>
 8008160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008164:	6004      	str	r4, [r0, #0]
 8008166:	60c4      	str	r4, [r0, #12]
 8008168:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800816c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008170:	b94c      	cbnz	r4, 8008186 <__pow5mult+0x66>
 8008172:	f240 2171 	movw	r1, #625	; 0x271
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff12 	bl	8007fa0 <__i2b>
 800817c:	2300      	movs	r3, #0
 800817e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008182:	4604      	mov	r4, r0
 8008184:	6003      	str	r3, [r0, #0]
 8008186:	f04f 0900 	mov.w	r9, #0
 800818a:	07eb      	lsls	r3, r5, #31
 800818c:	d50a      	bpl.n	80081a4 <__pow5mult+0x84>
 800818e:	4639      	mov	r1, r7
 8008190:	4622      	mov	r2, r4
 8008192:	4630      	mov	r0, r6
 8008194:	f7ff ff1a 	bl	8007fcc <__multiply>
 8008198:	4639      	mov	r1, r7
 800819a:	4680      	mov	r8, r0
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff fe47 	bl	8007e30 <_Bfree>
 80081a2:	4647      	mov	r7, r8
 80081a4:	106d      	asrs	r5, r5, #1
 80081a6:	d00b      	beq.n	80081c0 <__pow5mult+0xa0>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	b938      	cbnz	r0, 80081bc <__pow5mult+0x9c>
 80081ac:	4622      	mov	r2, r4
 80081ae:	4621      	mov	r1, r4
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff ff0b 	bl	8007fcc <__multiply>
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	f8c0 9000 	str.w	r9, [r0]
 80081bc:	4604      	mov	r4, r0
 80081be:	e7e4      	b.n	800818a <__pow5mult+0x6a>
 80081c0:	4638      	mov	r0, r7
 80081c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c6:	bf00      	nop
 80081c8:	0800a258 	.word	0x0800a258
 80081cc:	0800a085 	.word	0x0800a085
 80081d0:	0800a108 	.word	0x0800a108

080081d4 <__lshift>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	460c      	mov	r4, r1
 80081da:	6849      	ldr	r1, [r1, #4]
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081e2:	68a3      	ldr	r3, [r4, #8]
 80081e4:	4607      	mov	r7, r0
 80081e6:	4691      	mov	r9, r2
 80081e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081ec:	f108 0601 	add.w	r6, r8, #1
 80081f0:	42b3      	cmp	r3, r6
 80081f2:	db0b      	blt.n	800820c <__lshift+0x38>
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff fddb 	bl	8007db0 <_Balloc>
 80081fa:	4605      	mov	r5, r0
 80081fc:	b948      	cbnz	r0, 8008212 <__lshift+0x3e>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <__lshift+0xd8>)
 8008202:	482b      	ldr	r0, [pc, #172]	; (80082b0 <__lshift+0xdc>)
 8008204:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008208:	f000 fbb8 	bl	800897c <__assert_func>
 800820c:	3101      	adds	r1, #1
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	e7ee      	b.n	80081f0 <__lshift+0x1c>
 8008212:	2300      	movs	r3, #0
 8008214:	f100 0114 	add.w	r1, r0, #20
 8008218:	f100 0210 	add.w	r2, r0, #16
 800821c:	4618      	mov	r0, r3
 800821e:	4553      	cmp	r3, sl
 8008220:	db37      	blt.n	8008292 <__lshift+0xbe>
 8008222:	6920      	ldr	r0, [r4, #16]
 8008224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008228:	f104 0314 	add.w	r3, r4, #20
 800822c:	f019 091f 	ands.w	r9, r9, #31
 8008230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008234:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008238:	d02f      	beq.n	800829a <__lshift+0xc6>
 800823a:	f1c9 0e20 	rsb	lr, r9, #32
 800823e:	468a      	mov	sl, r1
 8008240:	f04f 0c00 	mov.w	ip, #0
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	fa02 f209 	lsl.w	r2, r2, r9
 800824a:	ea42 020c 	orr.w	r2, r2, ip
 800824e:	f84a 2b04 	str.w	r2, [sl], #4
 8008252:	f853 2b04 	ldr.w	r2, [r3], #4
 8008256:	4298      	cmp	r0, r3
 8008258:	fa22 fc0e 	lsr.w	ip, r2, lr
 800825c:	d8f2      	bhi.n	8008244 <__lshift+0x70>
 800825e:	1b03      	subs	r3, r0, r4
 8008260:	3b15      	subs	r3, #21
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	3304      	adds	r3, #4
 8008268:	f104 0215 	add.w	r2, r4, #21
 800826c:	4290      	cmp	r0, r2
 800826e:	bf38      	it	cc
 8008270:	2304      	movcc	r3, #4
 8008272:	f841 c003 	str.w	ip, [r1, r3]
 8008276:	f1bc 0f00 	cmp.w	ip, #0
 800827a:	d001      	beq.n	8008280 <__lshift+0xac>
 800827c:	f108 0602 	add.w	r6, r8, #2
 8008280:	3e01      	subs	r6, #1
 8008282:	4638      	mov	r0, r7
 8008284:	612e      	str	r6, [r5, #16]
 8008286:	4621      	mov	r1, r4
 8008288:	f7ff fdd2 	bl	8007e30 <_Bfree>
 800828c:	4628      	mov	r0, r5
 800828e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008292:	f842 0f04 	str.w	r0, [r2, #4]!
 8008296:	3301      	adds	r3, #1
 8008298:	e7c1      	b.n	800821e <__lshift+0x4a>
 800829a:	3904      	subs	r1, #4
 800829c:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80082a4:	4298      	cmp	r0, r3
 80082a6:	d8f9      	bhi.n	800829c <__lshift+0xc8>
 80082a8:	e7ea      	b.n	8008280 <__lshift+0xac>
 80082aa:	bf00      	nop
 80082ac:	0800a0f7 	.word	0x0800a0f7
 80082b0:	0800a108 	.word	0x0800a108

080082b4 <__mcmp>:
 80082b4:	b530      	push	{r4, r5, lr}
 80082b6:	6902      	ldr	r2, [r0, #16]
 80082b8:	690c      	ldr	r4, [r1, #16]
 80082ba:	1b12      	subs	r2, r2, r4
 80082bc:	d10e      	bne.n	80082dc <__mcmp+0x28>
 80082be:	f100 0314 	add.w	r3, r0, #20
 80082c2:	3114      	adds	r1, #20
 80082c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082d4:	42a5      	cmp	r5, r4
 80082d6:	d003      	beq.n	80082e0 <__mcmp+0x2c>
 80082d8:	d305      	bcc.n	80082e6 <__mcmp+0x32>
 80082da:	2201      	movs	r2, #1
 80082dc:	4610      	mov	r0, r2
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	4283      	cmp	r3, r0
 80082e2:	d3f3      	bcc.n	80082cc <__mcmp+0x18>
 80082e4:	e7fa      	b.n	80082dc <__mcmp+0x28>
 80082e6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ea:	e7f7      	b.n	80082dc <__mcmp+0x28>

080082ec <__mdiff>:
 80082ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	460c      	mov	r4, r1
 80082f2:	4606      	mov	r6, r0
 80082f4:	4611      	mov	r1, r2
 80082f6:	4620      	mov	r0, r4
 80082f8:	4690      	mov	r8, r2
 80082fa:	f7ff ffdb 	bl	80082b4 <__mcmp>
 80082fe:	1e05      	subs	r5, r0, #0
 8008300:	d110      	bne.n	8008324 <__mdiff+0x38>
 8008302:	4629      	mov	r1, r5
 8008304:	4630      	mov	r0, r6
 8008306:	f7ff fd53 	bl	8007db0 <_Balloc>
 800830a:	b930      	cbnz	r0, 800831a <__mdiff+0x2e>
 800830c:	4b3a      	ldr	r3, [pc, #232]	; (80083f8 <__mdiff+0x10c>)
 800830e:	4602      	mov	r2, r0
 8008310:	f240 2132 	movw	r1, #562	; 0x232
 8008314:	4839      	ldr	r0, [pc, #228]	; (80083fc <__mdiff+0x110>)
 8008316:	f000 fb31 	bl	800897c <__assert_func>
 800831a:	2301      	movs	r3, #1
 800831c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	bfa4      	itt	ge
 8008326:	4643      	movge	r3, r8
 8008328:	46a0      	movge	r8, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008330:	bfa6      	itte	ge
 8008332:	461c      	movge	r4, r3
 8008334:	2500      	movge	r5, #0
 8008336:	2501      	movlt	r5, #1
 8008338:	f7ff fd3a 	bl	8007db0 <_Balloc>
 800833c:	b920      	cbnz	r0, 8008348 <__mdiff+0x5c>
 800833e:	4b2e      	ldr	r3, [pc, #184]	; (80083f8 <__mdiff+0x10c>)
 8008340:	4602      	mov	r2, r0
 8008342:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008346:	e7e5      	b.n	8008314 <__mdiff+0x28>
 8008348:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800834c:	6926      	ldr	r6, [r4, #16]
 800834e:	60c5      	str	r5, [r0, #12]
 8008350:	f104 0914 	add.w	r9, r4, #20
 8008354:	f108 0514 	add.w	r5, r8, #20
 8008358:	f100 0e14 	add.w	lr, r0, #20
 800835c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008360:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008364:	f108 0210 	add.w	r2, r8, #16
 8008368:	46f2      	mov	sl, lr
 800836a:	2100      	movs	r1, #0
 800836c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008374:	fa1f f883 	uxth.w	r8, r3
 8008378:	fa11 f18b 	uxtah	r1, r1, fp
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	eba1 0808 	sub.w	r8, r1, r8
 8008382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800838a:	fa1f f888 	uxth.w	r8, r8
 800838e:	1419      	asrs	r1, r3, #16
 8008390:	454e      	cmp	r6, r9
 8008392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008396:	f84a 3b04 	str.w	r3, [sl], #4
 800839a:	d8e7      	bhi.n	800836c <__mdiff+0x80>
 800839c:	1b33      	subs	r3, r6, r4
 800839e:	3b15      	subs	r3, #21
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	3304      	adds	r3, #4
 80083a6:	3415      	adds	r4, #21
 80083a8:	42a6      	cmp	r6, r4
 80083aa:	bf38      	it	cc
 80083ac:	2304      	movcc	r3, #4
 80083ae:	441d      	add	r5, r3
 80083b0:	4473      	add	r3, lr
 80083b2:	469e      	mov	lr, r3
 80083b4:	462e      	mov	r6, r5
 80083b6:	4566      	cmp	r6, ip
 80083b8:	d30e      	bcc.n	80083d8 <__mdiff+0xec>
 80083ba:	f10c 0203 	add.w	r2, ip, #3
 80083be:	1b52      	subs	r2, r2, r5
 80083c0:	f022 0203 	bic.w	r2, r2, #3
 80083c4:	3d03      	subs	r5, #3
 80083c6:	45ac      	cmp	ip, r5
 80083c8:	bf38      	it	cc
 80083ca:	2200      	movcc	r2, #0
 80083cc:	441a      	add	r2, r3
 80083ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083d2:	b17b      	cbz	r3, 80083f4 <__mdiff+0x108>
 80083d4:	6107      	str	r7, [r0, #16]
 80083d6:	e7a3      	b.n	8008320 <__mdiff+0x34>
 80083d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80083dc:	fa11 f288 	uxtah	r2, r1, r8
 80083e0:	1414      	asrs	r4, r2, #16
 80083e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083e6:	b292      	uxth	r2, r2
 80083e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083ec:	f84e 2b04 	str.w	r2, [lr], #4
 80083f0:	1421      	asrs	r1, r4, #16
 80083f2:	e7e0      	b.n	80083b6 <__mdiff+0xca>
 80083f4:	3f01      	subs	r7, #1
 80083f6:	e7ea      	b.n	80083ce <__mdiff+0xe2>
 80083f8:	0800a0f7 	.word	0x0800a0f7
 80083fc:	0800a108 	.word	0x0800a108

08008400 <__d2b>:
 8008400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008404:	4689      	mov	r9, r1
 8008406:	2101      	movs	r1, #1
 8008408:	ec57 6b10 	vmov	r6, r7, d0
 800840c:	4690      	mov	r8, r2
 800840e:	f7ff fccf 	bl	8007db0 <_Balloc>
 8008412:	4604      	mov	r4, r0
 8008414:	b930      	cbnz	r0, 8008424 <__d2b+0x24>
 8008416:	4602      	mov	r2, r0
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <__d2b+0xb0>)
 800841a:	4826      	ldr	r0, [pc, #152]	; (80084b4 <__d2b+0xb4>)
 800841c:	f240 310a 	movw	r1, #778	; 0x30a
 8008420:	f000 faac 	bl	800897c <__assert_func>
 8008424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800842c:	bb35      	cbnz	r5, 800847c <__d2b+0x7c>
 800842e:	2e00      	cmp	r6, #0
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	d028      	beq.n	8008486 <__d2b+0x86>
 8008434:	4668      	mov	r0, sp
 8008436:	9600      	str	r6, [sp, #0]
 8008438:	f7ff fd82 	bl	8007f40 <__lo0bits>
 800843c:	9900      	ldr	r1, [sp, #0]
 800843e:	b300      	cbz	r0, 8008482 <__d2b+0x82>
 8008440:	9a01      	ldr	r2, [sp, #4]
 8008442:	f1c0 0320 	rsb	r3, r0, #32
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	430b      	orrs	r3, r1
 800844c:	40c2      	lsrs	r2, r0
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	61a3      	str	r3, [r4, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bf14      	ite	ne
 800845a:	2202      	movne	r2, #2
 800845c:	2201      	moveq	r2, #1
 800845e:	6122      	str	r2, [r4, #16]
 8008460:	b1d5      	cbz	r5, 8008498 <__d2b+0x98>
 8008462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008466:	4405      	add	r5, r0
 8008468:	f8c9 5000 	str.w	r5, [r9]
 800846c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008470:	f8c8 0000 	str.w	r0, [r8]
 8008474:	4620      	mov	r0, r4
 8008476:	b003      	add	sp, #12
 8008478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800847c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008480:	e7d5      	b.n	800842e <__d2b+0x2e>
 8008482:	6161      	str	r1, [r4, #20]
 8008484:	e7e5      	b.n	8008452 <__d2b+0x52>
 8008486:	a801      	add	r0, sp, #4
 8008488:	f7ff fd5a 	bl	8007f40 <__lo0bits>
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	2201      	movs	r2, #1
 8008492:	6122      	str	r2, [r4, #16]
 8008494:	3020      	adds	r0, #32
 8008496:	e7e3      	b.n	8008460 <__d2b+0x60>
 8008498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800849c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a0:	f8c9 0000 	str.w	r0, [r9]
 80084a4:	6918      	ldr	r0, [r3, #16]
 80084a6:	f7ff fd2b 	bl	8007f00 <__hi0bits>
 80084aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ae:	e7df      	b.n	8008470 <__d2b+0x70>
 80084b0:	0800a0f7 	.word	0x0800a0f7
 80084b4:	0800a108 	.word	0x0800a108

080084b8 <_calloc_r>:
 80084b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ba:	fba1 2402 	umull	r2, r4, r1, r2
 80084be:	b94c      	cbnz	r4, 80084d4 <_calloc_r+0x1c>
 80084c0:	4611      	mov	r1, r2
 80084c2:	9201      	str	r2, [sp, #4]
 80084c4:	f000 f87a 	bl	80085bc <_malloc_r>
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	4605      	mov	r5, r0
 80084cc:	b930      	cbnz	r0, 80084dc <_calloc_r+0x24>
 80084ce:	4628      	mov	r0, r5
 80084d0:	b003      	add	sp, #12
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	220c      	movs	r2, #12
 80084d6:	6002      	str	r2, [r0, #0]
 80084d8:	2500      	movs	r5, #0
 80084da:	e7f8      	b.n	80084ce <_calloc_r+0x16>
 80084dc:	4621      	mov	r1, r4
 80084de:	f7fe f92d 	bl	800673c <memset>
 80084e2:	e7f4      	b.n	80084ce <_calloc_r+0x16>

080084e4 <_free_r>:
 80084e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d044      	beq.n	8008574 <_free_r+0x90>
 80084ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f1a1 0404 	sub.w	r4, r1, #4
 80084f6:	bfb8      	it	lt
 80084f8:	18e4      	addlt	r4, r4, r3
 80084fa:	f000 fa9b 	bl	8008a34 <__malloc_lock>
 80084fe:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <_free_r+0x94>)
 8008500:	9801      	ldr	r0, [sp, #4]
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	b933      	cbnz	r3, 8008514 <_free_r+0x30>
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	b003      	add	sp, #12
 800850c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008510:	f000 ba96 	b.w	8008a40 <__malloc_unlock>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d908      	bls.n	800852a <_free_r+0x46>
 8008518:	6825      	ldr	r5, [r4, #0]
 800851a:	1961      	adds	r1, r4, r5
 800851c:	428b      	cmp	r3, r1
 800851e:	bf01      	itttt	eq
 8008520:	6819      	ldreq	r1, [r3, #0]
 8008522:	685b      	ldreq	r3, [r3, #4]
 8008524:	1949      	addeq	r1, r1, r5
 8008526:	6021      	streq	r1, [r4, #0]
 8008528:	e7ed      	b.n	8008506 <_free_r+0x22>
 800852a:	461a      	mov	r2, r3
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	b10b      	cbz	r3, 8008534 <_free_r+0x50>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d9fa      	bls.n	800852a <_free_r+0x46>
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	1855      	adds	r5, r2, r1
 8008538:	42a5      	cmp	r5, r4
 800853a:	d10b      	bne.n	8008554 <_free_r+0x70>
 800853c:	6824      	ldr	r4, [r4, #0]
 800853e:	4421      	add	r1, r4
 8008540:	1854      	adds	r4, r2, r1
 8008542:	42a3      	cmp	r3, r4
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	d1e0      	bne.n	800850a <_free_r+0x26>
 8008548:	681c      	ldr	r4, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	4421      	add	r1, r4
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	e7da      	b.n	800850a <_free_r+0x26>
 8008554:	d902      	bls.n	800855c <_free_r+0x78>
 8008556:	230c      	movs	r3, #12
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	e7d6      	b.n	800850a <_free_r+0x26>
 800855c:	6825      	ldr	r5, [r4, #0]
 800855e:	1961      	adds	r1, r4, r5
 8008560:	428b      	cmp	r3, r1
 8008562:	bf04      	itt	eq
 8008564:	6819      	ldreq	r1, [r3, #0]
 8008566:	685b      	ldreq	r3, [r3, #4]
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	bf04      	itt	eq
 800856c:	1949      	addeq	r1, r1, r5
 800856e:	6021      	streq	r1, [r4, #0]
 8008570:	6054      	str	r4, [r2, #4]
 8008572:	e7ca      	b.n	800850a <_free_r+0x26>
 8008574:	b003      	add	sp, #12
 8008576:	bd30      	pop	{r4, r5, pc}
 8008578:	200004c0 	.word	0x200004c0

0800857c <sbrk_aligned>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	4e0e      	ldr	r6, [pc, #56]	; (80085b8 <sbrk_aligned+0x3c>)
 8008580:	460c      	mov	r4, r1
 8008582:	6831      	ldr	r1, [r6, #0]
 8008584:	4605      	mov	r5, r0
 8008586:	b911      	cbnz	r1, 800858e <sbrk_aligned+0x12>
 8008588:	f000 f9e8 	bl	800895c <_sbrk_r>
 800858c:	6030      	str	r0, [r6, #0]
 800858e:	4621      	mov	r1, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 f9e3 	bl	800895c <_sbrk_r>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d00a      	beq.n	80085b0 <sbrk_aligned+0x34>
 800859a:	1cc4      	adds	r4, r0, #3
 800859c:	f024 0403 	bic.w	r4, r4, #3
 80085a0:	42a0      	cmp	r0, r4
 80085a2:	d007      	beq.n	80085b4 <sbrk_aligned+0x38>
 80085a4:	1a21      	subs	r1, r4, r0
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 f9d8 	bl	800895c <_sbrk_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d101      	bne.n	80085b4 <sbrk_aligned+0x38>
 80085b0:	f04f 34ff 	mov.w	r4, #4294967295
 80085b4:	4620      	mov	r0, r4
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	200004c4 	.word	0x200004c4

080085bc <_malloc_r>:
 80085bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c0:	1ccd      	adds	r5, r1, #3
 80085c2:	f025 0503 	bic.w	r5, r5, #3
 80085c6:	3508      	adds	r5, #8
 80085c8:	2d0c      	cmp	r5, #12
 80085ca:	bf38      	it	cc
 80085cc:	250c      	movcc	r5, #12
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	4607      	mov	r7, r0
 80085d2:	db01      	blt.n	80085d8 <_malloc_r+0x1c>
 80085d4:	42a9      	cmp	r1, r5
 80085d6:	d905      	bls.n	80085e4 <_malloc_r+0x28>
 80085d8:	230c      	movs	r3, #12
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	2600      	movs	r6, #0
 80085de:	4630      	mov	r0, r6
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	4e2e      	ldr	r6, [pc, #184]	; (80086a0 <_malloc_r+0xe4>)
 80085e6:	f000 fa25 	bl	8008a34 <__malloc_lock>
 80085ea:	6833      	ldr	r3, [r6, #0]
 80085ec:	461c      	mov	r4, r3
 80085ee:	bb34      	cbnz	r4, 800863e <_malloc_r+0x82>
 80085f0:	4629      	mov	r1, r5
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7ff ffc2 	bl	800857c <sbrk_aligned>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	4604      	mov	r4, r0
 80085fc:	d14d      	bne.n	800869a <_malloc_r+0xde>
 80085fe:	6834      	ldr	r4, [r6, #0]
 8008600:	4626      	mov	r6, r4
 8008602:	2e00      	cmp	r6, #0
 8008604:	d140      	bne.n	8008688 <_malloc_r+0xcc>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	4631      	mov	r1, r6
 800860a:	4638      	mov	r0, r7
 800860c:	eb04 0803 	add.w	r8, r4, r3
 8008610:	f000 f9a4 	bl	800895c <_sbrk_r>
 8008614:	4580      	cmp	r8, r0
 8008616:	d13a      	bne.n	800868e <_malloc_r+0xd2>
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	3503      	adds	r5, #3
 800861c:	1a6d      	subs	r5, r5, r1
 800861e:	f025 0503 	bic.w	r5, r5, #3
 8008622:	3508      	adds	r5, #8
 8008624:	2d0c      	cmp	r5, #12
 8008626:	bf38      	it	cc
 8008628:	250c      	movcc	r5, #12
 800862a:	4629      	mov	r1, r5
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ffa5 	bl	800857c <sbrk_aligned>
 8008632:	3001      	adds	r0, #1
 8008634:	d02b      	beq.n	800868e <_malloc_r+0xd2>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	442b      	add	r3, r5
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	e00e      	b.n	800865c <_malloc_r+0xa0>
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	1b52      	subs	r2, r2, r5
 8008642:	d41e      	bmi.n	8008682 <_malloc_r+0xc6>
 8008644:	2a0b      	cmp	r2, #11
 8008646:	d916      	bls.n	8008676 <_malloc_r+0xba>
 8008648:	1961      	adds	r1, r4, r5
 800864a:	42a3      	cmp	r3, r4
 800864c:	6025      	str	r5, [r4, #0]
 800864e:	bf18      	it	ne
 8008650:	6059      	strne	r1, [r3, #4]
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	bf08      	it	eq
 8008656:	6031      	streq	r1, [r6, #0]
 8008658:	5162      	str	r2, [r4, r5]
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	4638      	mov	r0, r7
 800865e:	f104 060b 	add.w	r6, r4, #11
 8008662:	f000 f9ed 	bl	8008a40 <__malloc_unlock>
 8008666:	f026 0607 	bic.w	r6, r6, #7
 800866a:	1d23      	adds	r3, r4, #4
 800866c:	1af2      	subs	r2, r6, r3
 800866e:	d0b6      	beq.n	80085de <_malloc_r+0x22>
 8008670:	1b9b      	subs	r3, r3, r6
 8008672:	50a3      	str	r3, [r4, r2]
 8008674:	e7b3      	b.n	80085de <_malloc_r+0x22>
 8008676:	6862      	ldr	r2, [r4, #4]
 8008678:	42a3      	cmp	r3, r4
 800867a:	bf0c      	ite	eq
 800867c:	6032      	streq	r2, [r6, #0]
 800867e:	605a      	strne	r2, [r3, #4]
 8008680:	e7ec      	b.n	800865c <_malloc_r+0xa0>
 8008682:	4623      	mov	r3, r4
 8008684:	6864      	ldr	r4, [r4, #4]
 8008686:	e7b2      	b.n	80085ee <_malloc_r+0x32>
 8008688:	4634      	mov	r4, r6
 800868a:	6876      	ldr	r6, [r6, #4]
 800868c:	e7b9      	b.n	8008602 <_malloc_r+0x46>
 800868e:	230c      	movs	r3, #12
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4638      	mov	r0, r7
 8008694:	f000 f9d4 	bl	8008a40 <__malloc_unlock>
 8008698:	e7a1      	b.n	80085de <_malloc_r+0x22>
 800869a:	6025      	str	r5, [r4, #0]
 800869c:	e7de      	b.n	800865c <_malloc_r+0xa0>
 800869e:	bf00      	nop
 80086a0:	200004c0 	.word	0x200004c0

080086a4 <__ssputs_r>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	688e      	ldr	r6, [r1, #8]
 80086aa:	429e      	cmp	r6, r3
 80086ac:	4682      	mov	sl, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4690      	mov	r8, r2
 80086b2:	461f      	mov	r7, r3
 80086b4:	d838      	bhi.n	8008728 <__ssputs_r+0x84>
 80086b6:	898a      	ldrh	r2, [r1, #12]
 80086b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086bc:	d032      	beq.n	8008724 <__ssputs_r+0x80>
 80086be:	6825      	ldr	r5, [r4, #0]
 80086c0:	6909      	ldr	r1, [r1, #16]
 80086c2:	eba5 0901 	sub.w	r9, r5, r1
 80086c6:	6965      	ldr	r5, [r4, #20]
 80086c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086d0:	3301      	adds	r3, #1
 80086d2:	444b      	add	r3, r9
 80086d4:	106d      	asrs	r5, r5, #1
 80086d6:	429d      	cmp	r5, r3
 80086d8:	bf38      	it	cc
 80086da:	461d      	movcc	r5, r3
 80086dc:	0553      	lsls	r3, r2, #21
 80086de:	d531      	bpl.n	8008744 <__ssputs_r+0xa0>
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7ff ff6b 	bl	80085bc <_malloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	b950      	cbnz	r0, 8008700 <__ssputs_r+0x5c>
 80086ea:	230c      	movs	r3, #12
 80086ec:	f8ca 3000 	str.w	r3, [sl]
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f6:	81a3      	strh	r3, [r4, #12]
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008700:	6921      	ldr	r1, [r4, #16]
 8008702:	464a      	mov	r2, r9
 8008704:	f7ff fb46 	bl	8007d94 <memcpy>
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800870e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008712:	81a3      	strh	r3, [r4, #12]
 8008714:	6126      	str	r6, [r4, #16]
 8008716:	6165      	str	r5, [r4, #20]
 8008718:	444e      	add	r6, r9
 800871a:	eba5 0509 	sub.w	r5, r5, r9
 800871e:	6026      	str	r6, [r4, #0]
 8008720:	60a5      	str	r5, [r4, #8]
 8008722:	463e      	mov	r6, r7
 8008724:	42be      	cmp	r6, r7
 8008726:	d900      	bls.n	800872a <__ssputs_r+0x86>
 8008728:	463e      	mov	r6, r7
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	4632      	mov	r2, r6
 800872e:	4641      	mov	r1, r8
 8008730:	f000 f966 	bl	8008a00 <memmove>
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	1b9b      	subs	r3, r3, r6
 8008738:	60a3      	str	r3, [r4, #8]
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	4433      	add	r3, r6
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	2000      	movs	r0, #0
 8008742:	e7db      	b.n	80086fc <__ssputs_r+0x58>
 8008744:	462a      	mov	r2, r5
 8008746:	f000 f981 	bl	8008a4c <_realloc_r>
 800874a:	4606      	mov	r6, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	d1e1      	bne.n	8008714 <__ssputs_r+0x70>
 8008750:	6921      	ldr	r1, [r4, #16]
 8008752:	4650      	mov	r0, sl
 8008754:	f7ff fec6 	bl	80084e4 <_free_r>
 8008758:	e7c7      	b.n	80086ea <__ssputs_r+0x46>
	...

0800875c <_svfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4698      	mov	r8, r3
 8008762:	898b      	ldrh	r3, [r1, #12]
 8008764:	061b      	lsls	r3, r3, #24
 8008766:	b09d      	sub	sp, #116	; 0x74
 8008768:	4607      	mov	r7, r0
 800876a:	460d      	mov	r5, r1
 800876c:	4614      	mov	r4, r2
 800876e:	d50e      	bpl.n	800878e <_svfiprintf_r+0x32>
 8008770:	690b      	ldr	r3, [r1, #16]
 8008772:	b963      	cbnz	r3, 800878e <_svfiprintf_r+0x32>
 8008774:	2140      	movs	r1, #64	; 0x40
 8008776:	f7ff ff21 	bl	80085bc <_malloc_r>
 800877a:	6028      	str	r0, [r5, #0]
 800877c:	6128      	str	r0, [r5, #16]
 800877e:	b920      	cbnz	r0, 800878a <_svfiprintf_r+0x2e>
 8008780:	230c      	movs	r3, #12
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	e0d1      	b.n	800892e <_svfiprintf_r+0x1d2>
 800878a:	2340      	movs	r3, #64	; 0x40
 800878c:	616b      	str	r3, [r5, #20]
 800878e:	2300      	movs	r3, #0
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	2320      	movs	r3, #32
 8008794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008798:	f8cd 800c 	str.w	r8, [sp, #12]
 800879c:	2330      	movs	r3, #48	; 0x30
 800879e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008948 <_svfiprintf_r+0x1ec>
 80087a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	4623      	mov	r3, r4
 80087ac:	469a      	mov	sl, r3
 80087ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b2:	b10a      	cbz	r2, 80087b8 <_svfiprintf_r+0x5c>
 80087b4:	2a25      	cmp	r2, #37	; 0x25
 80087b6:	d1f9      	bne.n	80087ac <_svfiprintf_r+0x50>
 80087b8:	ebba 0b04 	subs.w	fp, sl, r4
 80087bc:	d00b      	beq.n	80087d6 <_svfiprintf_r+0x7a>
 80087be:	465b      	mov	r3, fp
 80087c0:	4622      	mov	r2, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ff6d 	bl	80086a4 <__ssputs_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	f000 80aa 	beq.w	8008924 <_svfiprintf_r+0x1c8>
 80087d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d2:	445a      	add	r2, fp
 80087d4:	9209      	str	r2, [sp, #36]	; 0x24
 80087d6:	f89a 3000 	ldrb.w	r3, [sl]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80a2 	beq.w	8008924 <_svfiprintf_r+0x1c8>
 80087e0:	2300      	movs	r3, #0
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ea:	f10a 0a01 	add.w	sl, sl, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	9307      	str	r3, [sp, #28]
 80087f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f6:	931a      	str	r3, [sp, #104]	; 0x68
 80087f8:	4654      	mov	r4, sl
 80087fa:	2205      	movs	r2, #5
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	4851      	ldr	r0, [pc, #324]	; (8008948 <_svfiprintf_r+0x1ec>)
 8008802:	f7f7 fcf5 	bl	80001f0 <memchr>
 8008806:	9a04      	ldr	r2, [sp, #16]
 8008808:	b9d8      	cbnz	r0, 8008842 <_svfiprintf_r+0xe6>
 800880a:	06d0      	lsls	r0, r2, #27
 800880c:	bf44      	itt	mi
 800880e:	2320      	movmi	r3, #32
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008814:	0711      	lsls	r1, r2, #28
 8008816:	bf44      	itt	mi
 8008818:	232b      	movmi	r3, #43	; 0x2b
 800881a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881e:	f89a 3000 	ldrb.w	r3, [sl]
 8008822:	2b2a      	cmp	r3, #42	; 0x2a
 8008824:	d015      	beq.n	8008852 <_svfiprintf_r+0xf6>
 8008826:	9a07      	ldr	r2, [sp, #28]
 8008828:	4654      	mov	r4, sl
 800882a:	2000      	movs	r0, #0
 800882c:	f04f 0c0a 	mov.w	ip, #10
 8008830:	4621      	mov	r1, r4
 8008832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008836:	3b30      	subs	r3, #48	; 0x30
 8008838:	2b09      	cmp	r3, #9
 800883a:	d94e      	bls.n	80088da <_svfiprintf_r+0x17e>
 800883c:	b1b0      	cbz	r0, 800886c <_svfiprintf_r+0x110>
 800883e:	9207      	str	r2, [sp, #28]
 8008840:	e014      	b.n	800886c <_svfiprintf_r+0x110>
 8008842:	eba0 0308 	sub.w	r3, r0, r8
 8008846:	fa09 f303 	lsl.w	r3, r9, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	9304      	str	r3, [sp, #16]
 800884e:	46a2      	mov	sl, r4
 8008850:	e7d2      	b.n	80087f8 <_svfiprintf_r+0x9c>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9103      	str	r1, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfbb      	ittet	lt
 800885e:	425b      	neglt	r3, r3
 8008860:	f042 0202 	orrlt.w	r2, r2, #2
 8008864:	9307      	strge	r3, [sp, #28]
 8008866:	9307      	strlt	r3, [sp, #28]
 8008868:	bfb8      	it	lt
 800886a:	9204      	strlt	r2, [sp, #16]
 800886c:	7823      	ldrb	r3, [r4, #0]
 800886e:	2b2e      	cmp	r3, #46	; 0x2e
 8008870:	d10c      	bne.n	800888c <_svfiprintf_r+0x130>
 8008872:	7863      	ldrb	r3, [r4, #1]
 8008874:	2b2a      	cmp	r3, #42	; 0x2a
 8008876:	d135      	bne.n	80088e4 <_svfiprintf_r+0x188>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9203      	str	r2, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfb8      	it	lt
 8008884:	f04f 33ff 	movlt.w	r3, #4294967295
 8008888:	3402      	adds	r4, #2
 800888a:	9305      	str	r3, [sp, #20]
 800888c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008958 <_svfiprintf_r+0x1fc>
 8008890:	7821      	ldrb	r1, [r4, #0]
 8008892:	2203      	movs	r2, #3
 8008894:	4650      	mov	r0, sl
 8008896:	f7f7 fcab 	bl	80001f0 <memchr>
 800889a:	b140      	cbz	r0, 80088ae <_svfiprintf_r+0x152>
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	eba0 000a 	sub.w	r0, r0, sl
 80088a2:	fa03 f000 	lsl.w	r0, r3, r0
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	4303      	orrs	r3, r0
 80088aa:	3401      	adds	r4, #1
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b2:	4826      	ldr	r0, [pc, #152]	; (800894c <_svfiprintf_r+0x1f0>)
 80088b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b8:	2206      	movs	r2, #6
 80088ba:	f7f7 fc99 	bl	80001f0 <memchr>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d038      	beq.n	8008934 <_svfiprintf_r+0x1d8>
 80088c2:	4b23      	ldr	r3, [pc, #140]	; (8008950 <_svfiprintf_r+0x1f4>)
 80088c4:	bb1b      	cbnz	r3, 800890e <_svfiprintf_r+0x1b2>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	3307      	adds	r3, #7
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	3308      	adds	r3, #8
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	4433      	add	r3, r6
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	e767      	b.n	80087aa <_svfiprintf_r+0x4e>
 80088da:	fb0c 3202 	mla	r2, ip, r2, r3
 80088de:	460c      	mov	r4, r1
 80088e0:	2001      	movs	r0, #1
 80088e2:	e7a5      	b.n	8008830 <_svfiprintf_r+0xd4>
 80088e4:	2300      	movs	r3, #0
 80088e6:	3401      	adds	r4, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	4619      	mov	r1, r3
 80088ec:	f04f 0c0a 	mov.w	ip, #10
 80088f0:	4620      	mov	r0, r4
 80088f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f6:	3a30      	subs	r2, #48	; 0x30
 80088f8:	2a09      	cmp	r2, #9
 80088fa:	d903      	bls.n	8008904 <_svfiprintf_r+0x1a8>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0c5      	beq.n	800888c <_svfiprintf_r+0x130>
 8008900:	9105      	str	r1, [sp, #20]
 8008902:	e7c3      	b.n	800888c <_svfiprintf_r+0x130>
 8008904:	fb0c 2101 	mla	r1, ip, r1, r2
 8008908:	4604      	mov	r4, r0
 800890a:	2301      	movs	r3, #1
 800890c:	e7f0      	b.n	80088f0 <_svfiprintf_r+0x194>
 800890e:	ab03      	add	r3, sp, #12
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	462a      	mov	r2, r5
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <_svfiprintf_r+0x1f8>)
 8008916:	a904      	add	r1, sp, #16
 8008918:	4638      	mov	r0, r7
 800891a:	f7fd ffb7 	bl	800688c <_printf_float>
 800891e:	1c42      	adds	r2, r0, #1
 8008920:	4606      	mov	r6, r0
 8008922:	d1d6      	bne.n	80088d2 <_svfiprintf_r+0x176>
 8008924:	89ab      	ldrh	r3, [r5, #12]
 8008926:	065b      	lsls	r3, r3, #25
 8008928:	f53f af2c 	bmi.w	8008784 <_svfiprintf_r+0x28>
 800892c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892e:	b01d      	add	sp, #116	; 0x74
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <_svfiprintf_r+0x1f8>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4638      	mov	r0, r7
 8008940:	f7fe fa48 	bl	8006dd4 <_printf_i>
 8008944:	e7eb      	b.n	800891e <_svfiprintf_r+0x1c2>
 8008946:	bf00      	nop
 8008948:	0800a264 	.word	0x0800a264
 800894c:	0800a26e 	.word	0x0800a26e
 8008950:	0800688d 	.word	0x0800688d
 8008954:	080086a5 	.word	0x080086a5
 8008958:	0800a26a 	.word	0x0800a26a

0800895c <_sbrk_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	; (8008978 <_sbrk_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f9 fbca 	bl	8002100 <_sbrk>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_sbrk_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_sbrk_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200004c8 	.word	0x200004c8

0800897c <__assert_func>:
 800897c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800897e:	4614      	mov	r4, r2
 8008980:	461a      	mov	r2, r3
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <__assert_func+0x2c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4605      	mov	r5, r0
 8008988:	68d8      	ldr	r0, [r3, #12]
 800898a:	b14c      	cbz	r4, 80089a0 <__assert_func+0x24>
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <__assert_func+0x30>)
 800898e:	9100      	str	r1, [sp, #0]
 8008990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008994:	4906      	ldr	r1, [pc, #24]	; (80089b0 <__assert_func+0x34>)
 8008996:	462b      	mov	r3, r5
 8008998:	f000 f80e 	bl	80089b8 <fiprintf>
 800899c:	f000 faac 	bl	8008ef8 <abort>
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <__assert_func+0x38>)
 80089a2:	461c      	mov	r4, r3
 80089a4:	e7f3      	b.n	800898e <__assert_func+0x12>
 80089a6:	bf00      	nop
 80089a8:	20000028 	.word	0x20000028
 80089ac:	0800a275 	.word	0x0800a275
 80089b0:	0800a282 	.word	0x0800a282
 80089b4:	0800a2b0 	.word	0x0800a2b0

080089b8 <fiprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b503      	push	{r0, r1, lr}
 80089bc:	4601      	mov	r1, r0
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <fiprintf+0x20>)
 80089c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	f000 f897 	bl	8008afc <_vfiprintf_r>
 80089ce:	b002      	add	sp, #8
 80089d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d4:	b003      	add	sp, #12
 80089d6:	4770      	bx	lr
 80089d8:	20000028 	.word	0x20000028

080089dc <__ascii_mbtowc>:
 80089dc:	b082      	sub	sp, #8
 80089de:	b901      	cbnz	r1, 80089e2 <__ascii_mbtowc+0x6>
 80089e0:	a901      	add	r1, sp, #4
 80089e2:	b142      	cbz	r2, 80089f6 <__ascii_mbtowc+0x1a>
 80089e4:	b14b      	cbz	r3, 80089fa <__ascii_mbtowc+0x1e>
 80089e6:	7813      	ldrb	r3, [r2, #0]
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	1e10      	subs	r0, r2, #0
 80089ee:	bf18      	it	ne
 80089f0:	2001      	movne	r0, #1
 80089f2:	b002      	add	sp, #8
 80089f4:	4770      	bx	lr
 80089f6:	4610      	mov	r0, r2
 80089f8:	e7fb      	b.n	80089f2 <__ascii_mbtowc+0x16>
 80089fa:	f06f 0001 	mvn.w	r0, #1
 80089fe:	e7f8      	b.n	80089f2 <__ascii_mbtowc+0x16>

08008a00 <memmove>:
 8008a00:	4288      	cmp	r0, r1
 8008a02:	b510      	push	{r4, lr}
 8008a04:	eb01 0402 	add.w	r4, r1, r2
 8008a08:	d902      	bls.n	8008a10 <memmove+0x10>
 8008a0a:	4284      	cmp	r4, r0
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	d807      	bhi.n	8008a20 <memmove+0x20>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	42a1      	cmp	r1, r4
 8008a14:	d008      	beq.n	8008a28 <memmove+0x28>
 8008a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1e:	e7f8      	b.n	8008a12 <memmove+0x12>
 8008a20:	4402      	add	r2, r0
 8008a22:	4601      	mov	r1, r0
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d100      	bne.n	8008a2a <memmove+0x2a>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a32:	e7f7      	b.n	8008a24 <memmove+0x24>

08008a34 <__malloc_lock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__malloc_lock+0x8>)
 8008a36:	f000 bc1f 	b.w	8009278 <__retarget_lock_acquire_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	200004cc 	.word	0x200004cc

08008a40 <__malloc_unlock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__malloc_unlock+0x8>)
 8008a42:	f000 bc1a 	b.w	800927a <__retarget_lock_release_recursive>
 8008a46:	bf00      	nop
 8008a48:	200004cc 	.word	0x200004cc

08008a4c <_realloc_r>:
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a50:	4680      	mov	r8, r0
 8008a52:	4614      	mov	r4, r2
 8008a54:	460e      	mov	r6, r1
 8008a56:	b921      	cbnz	r1, 8008a62 <_realloc_r+0x16>
 8008a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	f7ff bdad 	b.w	80085bc <_malloc_r>
 8008a62:	b92a      	cbnz	r2, 8008a70 <_realloc_r+0x24>
 8008a64:	f7ff fd3e 	bl	80084e4 <_free_r>
 8008a68:	4625      	mov	r5, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a70:	f000 fc6a 	bl	8009348 <_malloc_usable_size_r>
 8008a74:	4284      	cmp	r4, r0
 8008a76:	4607      	mov	r7, r0
 8008a78:	d802      	bhi.n	8008a80 <_realloc_r+0x34>
 8008a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a7e:	d812      	bhi.n	8008aa6 <_realloc_r+0x5a>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4640      	mov	r0, r8
 8008a84:	f7ff fd9a 	bl	80085bc <_malloc_r>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d0ed      	beq.n	8008a6a <_realloc_r+0x1e>
 8008a8e:	42bc      	cmp	r4, r7
 8008a90:	4622      	mov	r2, r4
 8008a92:	4631      	mov	r1, r6
 8008a94:	bf28      	it	cs
 8008a96:	463a      	movcs	r2, r7
 8008a98:	f7ff f97c 	bl	8007d94 <memcpy>
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f7ff fd20 	bl	80084e4 <_free_r>
 8008aa4:	e7e1      	b.n	8008a6a <_realloc_r+0x1e>
 8008aa6:	4635      	mov	r5, r6
 8008aa8:	e7df      	b.n	8008a6a <_realloc_r+0x1e>

08008aaa <__sfputc_r>:
 8008aaa:	6893      	ldr	r3, [r2, #8]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	b410      	push	{r4}
 8008ab2:	6093      	str	r3, [r2, #8]
 8008ab4:	da08      	bge.n	8008ac8 <__sfputc_r+0x1e>
 8008ab6:	6994      	ldr	r4, [r2, #24]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	db01      	blt.n	8008ac0 <__sfputc_r+0x16>
 8008abc:	290a      	cmp	r1, #10
 8008abe:	d103      	bne.n	8008ac8 <__sfputc_r+0x1e>
 8008ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac4:	f000 b94a 	b.w	8008d5c <__swbuf_r>
 8008ac8:	6813      	ldr	r3, [r2, #0]
 8008aca:	1c58      	adds	r0, r3, #1
 8008acc:	6010      	str	r0, [r2, #0]
 8008ace:	7019      	strb	r1, [r3, #0]
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <__sfputs_r>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	4614      	mov	r4, r2
 8008ae0:	18d5      	adds	r5, r2, r3
 8008ae2:	42ac      	cmp	r4, r5
 8008ae4:	d101      	bne.n	8008aea <__sfputs_r+0x12>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e007      	b.n	8008afa <__sfputs_r+0x22>
 8008aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aee:	463a      	mov	r2, r7
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff ffda 	bl	8008aaa <__sfputc_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d1f3      	bne.n	8008ae2 <__sfputs_r+0xa>
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008afc <_vfiprintf_r>:
 8008afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b00:	460d      	mov	r5, r1
 8008b02:	b09d      	sub	sp, #116	; 0x74
 8008b04:	4614      	mov	r4, r2
 8008b06:	4698      	mov	r8, r3
 8008b08:	4606      	mov	r6, r0
 8008b0a:	b118      	cbz	r0, 8008b14 <_vfiprintf_r+0x18>
 8008b0c:	6983      	ldr	r3, [r0, #24]
 8008b0e:	b90b      	cbnz	r3, 8008b14 <_vfiprintf_r+0x18>
 8008b10:	f000 fb14 	bl	800913c <__sinit>
 8008b14:	4b89      	ldr	r3, [pc, #548]	; (8008d3c <_vfiprintf_r+0x240>)
 8008b16:	429d      	cmp	r5, r3
 8008b18:	d11b      	bne.n	8008b52 <_vfiprintf_r+0x56>
 8008b1a:	6875      	ldr	r5, [r6, #4]
 8008b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_vfiprintf_r+0x32>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_vfiprintf_r+0x32>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f000 fba5 	bl	8009278 <__retarget_lock_acquire_recursive>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	d501      	bpl.n	8008b38 <_vfiprintf_r+0x3c>
 8008b34:	692b      	ldr	r3, [r5, #16]
 8008b36:	b9eb      	cbnz	r3, 8008b74 <_vfiprintf_r+0x78>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f96e 	bl	8008e1c <__swsetup_r>
 8008b40:	b1c0      	cbz	r0, 8008b74 <_vfiprintf_r+0x78>
 8008b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b44:	07dc      	lsls	r4, r3, #31
 8008b46:	d50e      	bpl.n	8008b66 <_vfiprintf_r+0x6a>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	b01d      	add	sp, #116	; 0x74
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	4b7b      	ldr	r3, [pc, #492]	; (8008d40 <_vfiprintf_r+0x244>)
 8008b54:	429d      	cmp	r5, r3
 8008b56:	d101      	bne.n	8008b5c <_vfiprintf_r+0x60>
 8008b58:	68b5      	ldr	r5, [r6, #8]
 8008b5a:	e7df      	b.n	8008b1c <_vfiprintf_r+0x20>
 8008b5c:	4b79      	ldr	r3, [pc, #484]	; (8008d44 <_vfiprintf_r+0x248>)
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	bf08      	it	eq
 8008b62:	68f5      	ldreq	r5, [r6, #12]
 8008b64:	e7da      	b.n	8008b1c <_vfiprintf_r+0x20>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	0598      	lsls	r0, r3, #22
 8008b6a:	d4ed      	bmi.n	8008b48 <_vfiprintf_r+0x4c>
 8008b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b6e:	f000 fb84 	bl	800927a <__retarget_lock_release_recursive>
 8008b72:	e7e9      	b.n	8008b48 <_vfiprintf_r+0x4c>
 8008b74:	2300      	movs	r3, #0
 8008b76:	9309      	str	r3, [sp, #36]	; 0x24
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b82:	2330      	movs	r3, #48	; 0x30
 8008b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d48 <_vfiprintf_r+0x24c>
 8008b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b8c:	f04f 0901 	mov.w	r9, #1
 8008b90:	4623      	mov	r3, r4
 8008b92:	469a      	mov	sl, r3
 8008b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b98:	b10a      	cbz	r2, 8008b9e <_vfiprintf_r+0xa2>
 8008b9a:	2a25      	cmp	r2, #37	; 0x25
 8008b9c:	d1f9      	bne.n	8008b92 <_vfiprintf_r+0x96>
 8008b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba2:	d00b      	beq.n	8008bbc <_vfiprintf_r+0xc0>
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4630      	mov	r0, r6
 8008bac:	f7ff ff94 	bl	8008ad8 <__sfputs_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	f000 80aa 	beq.w	8008d0a <_vfiprintf_r+0x20e>
 8008bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb8:	445a      	add	r2, fp
 8008bba:	9209      	str	r2, [sp, #36]	; 0x24
 8008bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 80a2 	beq.w	8008d0a <_vfiprintf_r+0x20e>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd0:	f10a 0a01 	add.w	sl, sl, #1
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	9307      	str	r3, [sp, #28]
 8008bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bde:	4654      	mov	r4, sl
 8008be0:	2205      	movs	r2, #5
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4858      	ldr	r0, [pc, #352]	; (8008d48 <_vfiprintf_r+0x24c>)
 8008be8:	f7f7 fb02 	bl	80001f0 <memchr>
 8008bec:	9a04      	ldr	r2, [sp, #16]
 8008bee:	b9d8      	cbnz	r0, 8008c28 <_vfiprintf_r+0x12c>
 8008bf0:	06d1      	lsls	r1, r2, #27
 8008bf2:	bf44      	itt	mi
 8008bf4:	2320      	movmi	r3, #32
 8008bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfa:	0713      	lsls	r3, r2, #28
 8008bfc:	bf44      	itt	mi
 8008bfe:	232b      	movmi	r3, #43	; 0x2b
 8008c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0a:	d015      	beq.n	8008c38 <_vfiprintf_r+0x13c>
 8008c0c:	9a07      	ldr	r2, [sp, #28]
 8008c0e:	4654      	mov	r4, sl
 8008c10:	2000      	movs	r0, #0
 8008c12:	f04f 0c0a 	mov.w	ip, #10
 8008c16:	4621      	mov	r1, r4
 8008c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1c:	3b30      	subs	r3, #48	; 0x30
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d94e      	bls.n	8008cc0 <_vfiprintf_r+0x1c4>
 8008c22:	b1b0      	cbz	r0, 8008c52 <_vfiprintf_r+0x156>
 8008c24:	9207      	str	r2, [sp, #28]
 8008c26:	e014      	b.n	8008c52 <_vfiprintf_r+0x156>
 8008c28:	eba0 0308 	sub.w	r3, r0, r8
 8008c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	46a2      	mov	sl, r4
 8008c36:	e7d2      	b.n	8008bde <_vfiprintf_r+0xe2>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	1d19      	adds	r1, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	9103      	str	r1, [sp, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfbb      	ittet	lt
 8008c44:	425b      	neglt	r3, r3
 8008c46:	f042 0202 	orrlt.w	r2, r2, #2
 8008c4a:	9307      	strge	r3, [sp, #28]
 8008c4c:	9307      	strlt	r3, [sp, #28]
 8008c4e:	bfb8      	it	lt
 8008c50:	9204      	strlt	r2, [sp, #16]
 8008c52:	7823      	ldrb	r3, [r4, #0]
 8008c54:	2b2e      	cmp	r3, #46	; 0x2e
 8008c56:	d10c      	bne.n	8008c72 <_vfiprintf_r+0x176>
 8008c58:	7863      	ldrb	r3, [r4, #1]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d135      	bne.n	8008cca <_vfiprintf_r+0x1ce>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	9203      	str	r2, [sp, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfb8      	it	lt
 8008c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c6e:	3402      	adds	r4, #2
 8008c70:	9305      	str	r3, [sp, #20]
 8008c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d58 <_vfiprintf_r+0x25c>
 8008c76:	7821      	ldrb	r1, [r4, #0]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	f7f7 fab8 	bl	80001f0 <memchr>
 8008c80:	b140      	cbz	r0, 8008c94 <_vfiprintf_r+0x198>
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	eba0 000a 	sub.w	r0, r0, sl
 8008c88:	fa03 f000 	lsl.w	r0, r3, r0
 8008c8c:	9b04      	ldr	r3, [sp, #16]
 8008c8e:	4303      	orrs	r3, r0
 8008c90:	3401      	adds	r4, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c98:	482c      	ldr	r0, [pc, #176]	; (8008d4c <_vfiprintf_r+0x250>)
 8008c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c9e:	2206      	movs	r2, #6
 8008ca0:	f7f7 faa6 	bl	80001f0 <memchr>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d03f      	beq.n	8008d28 <_vfiprintf_r+0x22c>
 8008ca8:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <_vfiprintf_r+0x254>)
 8008caa:	bb1b      	cbnz	r3, 8008cf4 <_vfiprintf_r+0x1f8>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	3307      	adds	r3, #7
 8008cb0:	f023 0307 	bic.w	r3, r3, #7
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cba:	443b      	add	r3, r7
 8008cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbe:	e767      	b.n	8008b90 <_vfiprintf_r+0x94>
 8008cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7a5      	b.n	8008c16 <_vfiprintf_r+0x11a>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f04f 0c0a 	mov.w	ip, #10
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cdc:	3a30      	subs	r2, #48	; 0x30
 8008cde:	2a09      	cmp	r2, #9
 8008ce0:	d903      	bls.n	8008cea <_vfiprintf_r+0x1ee>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c5      	beq.n	8008c72 <_vfiprintf_r+0x176>
 8008ce6:	9105      	str	r1, [sp, #20]
 8008ce8:	e7c3      	b.n	8008c72 <_vfiprintf_r+0x176>
 8008cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cee:	4604      	mov	r4, r0
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e7f0      	b.n	8008cd6 <_vfiprintf_r+0x1da>
 8008cf4:	ab03      	add	r3, sp, #12
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	462a      	mov	r2, r5
 8008cfa:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <_vfiprintf_r+0x258>)
 8008cfc:	a904      	add	r1, sp, #16
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7fd fdc4 	bl	800688c <_printf_float>
 8008d04:	4607      	mov	r7, r0
 8008d06:	1c78      	adds	r0, r7, #1
 8008d08:	d1d6      	bne.n	8008cb8 <_vfiprintf_r+0x1bc>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0c:	07d9      	lsls	r1, r3, #31
 8008d0e:	d405      	bmi.n	8008d1c <_vfiprintf_r+0x220>
 8008d10:	89ab      	ldrh	r3, [r5, #12]
 8008d12:	059a      	lsls	r2, r3, #22
 8008d14:	d402      	bmi.n	8008d1c <_vfiprintf_r+0x220>
 8008d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d18:	f000 faaf 	bl	800927a <__retarget_lock_release_recursive>
 8008d1c:	89ab      	ldrh	r3, [r5, #12]
 8008d1e:	065b      	lsls	r3, r3, #25
 8008d20:	f53f af12 	bmi.w	8008b48 <_vfiprintf_r+0x4c>
 8008d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d26:	e711      	b.n	8008b4c <_vfiprintf_r+0x50>
 8008d28:	ab03      	add	r3, sp, #12
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <_vfiprintf_r+0x258>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7fe f84e 	bl	8006dd4 <_printf_i>
 8008d38:	e7e4      	b.n	8008d04 <_vfiprintf_r+0x208>
 8008d3a:	bf00      	nop
 8008d3c:	0800a3dc 	.word	0x0800a3dc
 8008d40:	0800a3fc 	.word	0x0800a3fc
 8008d44:	0800a3bc 	.word	0x0800a3bc
 8008d48:	0800a264 	.word	0x0800a264
 8008d4c:	0800a26e 	.word	0x0800a26e
 8008d50:	0800688d 	.word	0x0800688d
 8008d54:	08008ad9 	.word	0x08008ad9
 8008d58:	0800a26a 	.word	0x0800a26a

08008d5c <__swbuf_r>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	460e      	mov	r6, r1
 8008d60:	4614      	mov	r4, r2
 8008d62:	4605      	mov	r5, r0
 8008d64:	b118      	cbz	r0, 8008d6e <__swbuf_r+0x12>
 8008d66:	6983      	ldr	r3, [r0, #24]
 8008d68:	b90b      	cbnz	r3, 8008d6e <__swbuf_r+0x12>
 8008d6a:	f000 f9e7 	bl	800913c <__sinit>
 8008d6e:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <__swbuf_r+0x98>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	d12b      	bne.n	8008dcc <__swbuf_r+0x70>
 8008d74:	686c      	ldr	r4, [r5, #4]
 8008d76:	69a3      	ldr	r3, [r4, #24]
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	071a      	lsls	r2, r3, #28
 8008d7e:	d52f      	bpl.n	8008de0 <__swbuf_r+0x84>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	b36b      	cbz	r3, 8008de0 <__swbuf_r+0x84>
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	6820      	ldr	r0, [r4, #0]
 8008d88:	1ac0      	subs	r0, r0, r3
 8008d8a:	6963      	ldr	r3, [r4, #20]
 8008d8c:	b2f6      	uxtb	r6, r6
 8008d8e:	4283      	cmp	r3, r0
 8008d90:	4637      	mov	r7, r6
 8008d92:	dc04      	bgt.n	8008d9e <__swbuf_r+0x42>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4628      	mov	r0, r5
 8008d98:	f000 f93c 	bl	8009014 <_fflush_r>
 8008d9c:	bb30      	cbnz	r0, 8008dec <__swbuf_r+0x90>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	6022      	str	r2, [r4, #0]
 8008daa:	701e      	strb	r6, [r3, #0]
 8008dac:	6963      	ldr	r3, [r4, #20]
 8008dae:	3001      	adds	r0, #1
 8008db0:	4283      	cmp	r3, r0
 8008db2:	d004      	beq.n	8008dbe <__swbuf_r+0x62>
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	07db      	lsls	r3, r3, #31
 8008db8:	d506      	bpl.n	8008dc8 <__swbuf_r+0x6c>
 8008dba:	2e0a      	cmp	r6, #10
 8008dbc:	d104      	bne.n	8008dc8 <__swbuf_r+0x6c>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f000 f927 	bl	8009014 <_fflush_r>
 8008dc6:	b988      	cbnz	r0, 8008dec <__swbuf_r+0x90>
 8008dc8:	4638      	mov	r0, r7
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <__swbuf_r+0x9c>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d101      	bne.n	8008dd6 <__swbuf_r+0x7a>
 8008dd2:	68ac      	ldr	r4, [r5, #8]
 8008dd4:	e7cf      	b.n	8008d76 <__swbuf_r+0x1a>
 8008dd6:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <__swbuf_r+0xa0>)
 8008dd8:	429c      	cmp	r4, r3
 8008dda:	bf08      	it	eq
 8008ddc:	68ec      	ldreq	r4, [r5, #12]
 8008dde:	e7ca      	b.n	8008d76 <__swbuf_r+0x1a>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f81a 	bl	8008e1c <__swsetup_r>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d0cb      	beq.n	8008d84 <__swbuf_r+0x28>
 8008dec:	f04f 37ff 	mov.w	r7, #4294967295
 8008df0:	e7ea      	b.n	8008dc8 <__swbuf_r+0x6c>
 8008df2:	bf00      	nop
 8008df4:	0800a3dc 	.word	0x0800a3dc
 8008df8:	0800a3fc 	.word	0x0800a3fc
 8008dfc:	0800a3bc 	.word	0x0800a3bc

08008e00 <__ascii_wctomb>:
 8008e00:	b149      	cbz	r1, 8008e16 <__ascii_wctomb+0x16>
 8008e02:	2aff      	cmp	r2, #255	; 0xff
 8008e04:	bf85      	ittet	hi
 8008e06:	238a      	movhi	r3, #138	; 0x8a
 8008e08:	6003      	strhi	r3, [r0, #0]
 8008e0a:	700a      	strbls	r2, [r1, #0]
 8008e0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e10:	bf98      	it	ls
 8008e12:	2001      	movls	r0, #1
 8008e14:	4770      	bx	lr
 8008e16:	4608      	mov	r0, r1
 8008e18:	4770      	bx	lr
	...

08008e1c <__swsetup_r>:
 8008e1c:	4b32      	ldr	r3, [pc, #200]	; (8008ee8 <__swsetup_r+0xcc>)
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	681d      	ldr	r5, [r3, #0]
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	b125      	cbz	r5, 8008e32 <__swsetup_r+0x16>
 8008e28:	69ab      	ldr	r3, [r5, #24]
 8008e2a:	b913      	cbnz	r3, 8008e32 <__swsetup_r+0x16>
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 f985 	bl	800913c <__sinit>
 8008e32:	4b2e      	ldr	r3, [pc, #184]	; (8008eec <__swsetup_r+0xd0>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	d10f      	bne.n	8008e58 <__swsetup_r+0x3c>
 8008e38:	686c      	ldr	r4, [r5, #4]
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e40:	0719      	lsls	r1, r3, #28
 8008e42:	d42c      	bmi.n	8008e9e <__swsetup_r+0x82>
 8008e44:	06dd      	lsls	r5, r3, #27
 8008e46:	d411      	bmi.n	8008e6c <__swsetup_r+0x50>
 8008e48:	2309      	movs	r3, #9
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	e03e      	b.n	8008ed6 <__swsetup_r+0xba>
 8008e58:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <__swsetup_r+0xd4>)
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <__swsetup_r+0x46>
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	e7eb      	b.n	8008e3a <__swsetup_r+0x1e>
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <__swsetup_r+0xd8>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	bf08      	it	eq
 8008e68:	68ec      	ldreq	r4, [r5, #12]
 8008e6a:	e7e6      	b.n	8008e3a <__swsetup_r+0x1e>
 8008e6c:	0758      	lsls	r0, r3, #29
 8008e6e:	d512      	bpl.n	8008e96 <__swsetup_r+0x7a>
 8008e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e72:	b141      	cbz	r1, 8008e86 <__swsetup_r+0x6a>
 8008e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d002      	beq.n	8008e82 <__swsetup_r+0x66>
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff fb31 	bl	80084e4 <_free_r>
 8008e82:	2300      	movs	r3, #0
 8008e84:	6363      	str	r3, [r4, #52]	; 0x34
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	f043 0308 	orr.w	r3, r3, #8
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	b94b      	cbnz	r3, 8008eb6 <__swsetup_r+0x9a>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eac:	d003      	beq.n	8008eb6 <__swsetup_r+0x9a>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f000 fa09 	bl	80092c8 <__smakebuf_r>
 8008eb6:	89a0      	ldrh	r0, [r4, #12]
 8008eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ebc:	f010 0301 	ands.w	r3, r0, #1
 8008ec0:	d00a      	beq.n	8008ed8 <__swsetup_r+0xbc>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60a3      	str	r3, [r4, #8]
 8008ec6:	6963      	ldr	r3, [r4, #20]
 8008ec8:	425b      	negs	r3, r3
 8008eca:	61a3      	str	r3, [r4, #24]
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	b943      	cbnz	r3, 8008ee2 <__swsetup_r+0xc6>
 8008ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ed4:	d1ba      	bne.n	8008e4c <__swsetup_r+0x30>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	0781      	lsls	r1, r0, #30
 8008eda:	bf58      	it	pl
 8008edc:	6963      	ldrpl	r3, [r4, #20]
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	e7f4      	b.n	8008ecc <__swsetup_r+0xb0>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e7f7      	b.n	8008ed6 <__swsetup_r+0xba>
 8008ee6:	bf00      	nop
 8008ee8:	20000028 	.word	0x20000028
 8008eec:	0800a3dc 	.word	0x0800a3dc
 8008ef0:	0800a3fc 	.word	0x0800a3fc
 8008ef4:	0800a3bc 	.word	0x0800a3bc

08008ef8 <abort>:
 8008ef8:	b508      	push	{r3, lr}
 8008efa:	2006      	movs	r0, #6
 8008efc:	f000 fa54 	bl	80093a8 <raise>
 8008f00:	2001      	movs	r0, #1
 8008f02:	f7f9 f885 	bl	8002010 <_exit>
	...

08008f08 <__sflush_r>:
 8008f08:	898a      	ldrh	r2, [r1, #12]
 8008f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	4605      	mov	r5, r0
 8008f10:	0710      	lsls	r0, r2, #28
 8008f12:	460c      	mov	r4, r1
 8008f14:	d458      	bmi.n	8008fc8 <__sflush_r+0xc0>
 8008f16:	684b      	ldr	r3, [r1, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc05      	bgt.n	8008f28 <__sflush_r+0x20>
 8008f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc02      	bgt.n	8008f28 <__sflush_r+0x20>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d0f9      	beq.n	8008f22 <__sflush_r+0x1a>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f34:	682f      	ldr	r7, [r5, #0]
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	d032      	beq.n	8008fa0 <__sflush_r+0x98>
 8008f3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	075a      	lsls	r2, r3, #29
 8008f40:	d505      	bpl.n	8008f4e <__sflush_r+0x46>
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	1ac0      	subs	r0, r0, r3
 8008f46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f48:	b10b      	cbz	r3, 8008f4e <__sflush_r+0x46>
 8008f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f4c:	1ac0      	subs	r0, r0, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4602      	mov	r2, r0
 8008f52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f54:	6a21      	ldr	r1, [r4, #32]
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b0      	blx	r6
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	d106      	bne.n	8008f6e <__sflush_r+0x66>
 8008f60:	6829      	ldr	r1, [r5, #0]
 8008f62:	291d      	cmp	r1, #29
 8008f64:	d82c      	bhi.n	8008fc0 <__sflush_r+0xb8>
 8008f66:	4a2a      	ldr	r2, [pc, #168]	; (8009010 <__sflush_r+0x108>)
 8008f68:	40ca      	lsrs	r2, r1
 8008f6a:	07d6      	lsls	r6, r2, #31
 8008f6c:	d528      	bpl.n	8008fc0 <__sflush_r+0xb8>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	6062      	str	r2, [r4, #4]
 8008f72:	04d9      	lsls	r1, r3, #19
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	d504      	bpl.n	8008f84 <__sflush_r+0x7c>
 8008f7a:	1c42      	adds	r2, r0, #1
 8008f7c:	d101      	bne.n	8008f82 <__sflush_r+0x7a>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b903      	cbnz	r3, 8008f84 <__sflush_r+0x7c>
 8008f82:	6560      	str	r0, [r4, #84]	; 0x54
 8008f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	d0ca      	beq.n	8008f22 <__sflush_r+0x1a>
 8008f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d002      	beq.n	8008f9a <__sflush_r+0x92>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f7ff faa5 	bl	80084e4 <_free_r>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9e:	e7c1      	b.n	8008f24 <__sflush_r+0x1c>
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	1c41      	adds	r1, r0, #1
 8008faa:	d1c7      	bne.n	8008f3c <__sflush_r+0x34>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c4      	beq.n	8008f3c <__sflush_r+0x34>
 8008fb2:	2b1d      	cmp	r3, #29
 8008fb4:	d001      	beq.n	8008fba <__sflush_r+0xb2>
 8008fb6:	2b16      	cmp	r3, #22
 8008fb8:	d101      	bne.n	8008fbe <__sflush_r+0xb6>
 8008fba:	602f      	str	r7, [r5, #0]
 8008fbc:	e7b1      	b.n	8008f22 <__sflush_r+0x1a>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	e7ad      	b.n	8008f24 <__sflush_r+0x1c>
 8008fc8:	690f      	ldr	r7, [r1, #16]
 8008fca:	2f00      	cmp	r7, #0
 8008fcc:	d0a9      	beq.n	8008f22 <__sflush_r+0x1a>
 8008fce:	0793      	lsls	r3, r2, #30
 8008fd0:	680e      	ldr	r6, [r1, #0]
 8008fd2:	bf08      	it	eq
 8008fd4:	694b      	ldreq	r3, [r1, #20]
 8008fd6:	600f      	str	r7, [r1, #0]
 8008fd8:	bf18      	it	ne
 8008fda:	2300      	movne	r3, #0
 8008fdc:	eba6 0807 	sub.w	r8, r6, r7
 8008fe0:	608b      	str	r3, [r1, #8]
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	dd9c      	ble.n	8008f22 <__sflush_r+0x1a>
 8008fe8:	6a21      	ldr	r1, [r4, #32]
 8008fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fec:	4643      	mov	r3, r8
 8008fee:	463a      	mov	r2, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	dc06      	bgt.n	8009006 <__sflush_r+0xfe>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e78e      	b.n	8008f24 <__sflush_r+0x1c>
 8009006:	4407      	add	r7, r0
 8009008:	eba8 0800 	sub.w	r8, r8, r0
 800900c:	e7e9      	b.n	8008fe2 <__sflush_r+0xda>
 800900e:	bf00      	nop
 8009010:	20400001 	.word	0x20400001

08009014 <_fflush_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b913      	cbnz	r3, 8009024 <_fflush_r+0x10>
 800901e:	2500      	movs	r5, #0
 8009020:	4628      	mov	r0, r5
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	b118      	cbz	r0, 800902e <_fflush_r+0x1a>
 8009026:	6983      	ldr	r3, [r0, #24]
 8009028:	b90b      	cbnz	r3, 800902e <_fflush_r+0x1a>
 800902a:	f000 f887 	bl	800913c <__sinit>
 800902e:	4b14      	ldr	r3, [pc, #80]	; (8009080 <_fflush_r+0x6c>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d11b      	bne.n	800906c <_fflush_r+0x58>
 8009034:	686c      	ldr	r4, [r5, #4]
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0ef      	beq.n	800901e <_fflush_r+0xa>
 800903e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009040:	07d0      	lsls	r0, r2, #31
 8009042:	d404      	bmi.n	800904e <_fflush_r+0x3a>
 8009044:	0599      	lsls	r1, r3, #22
 8009046:	d402      	bmi.n	800904e <_fflush_r+0x3a>
 8009048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904a:	f000 f915 	bl	8009278 <__retarget_lock_acquire_recursive>
 800904e:	4628      	mov	r0, r5
 8009050:	4621      	mov	r1, r4
 8009052:	f7ff ff59 	bl	8008f08 <__sflush_r>
 8009056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009058:	07da      	lsls	r2, r3, #31
 800905a:	4605      	mov	r5, r0
 800905c:	d4e0      	bmi.n	8009020 <_fflush_r+0xc>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	059b      	lsls	r3, r3, #22
 8009062:	d4dd      	bmi.n	8009020 <_fflush_r+0xc>
 8009064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009066:	f000 f908 	bl	800927a <__retarget_lock_release_recursive>
 800906a:	e7d9      	b.n	8009020 <_fflush_r+0xc>
 800906c:	4b05      	ldr	r3, [pc, #20]	; (8009084 <_fflush_r+0x70>)
 800906e:	429c      	cmp	r4, r3
 8009070:	d101      	bne.n	8009076 <_fflush_r+0x62>
 8009072:	68ac      	ldr	r4, [r5, #8]
 8009074:	e7df      	b.n	8009036 <_fflush_r+0x22>
 8009076:	4b04      	ldr	r3, [pc, #16]	; (8009088 <_fflush_r+0x74>)
 8009078:	429c      	cmp	r4, r3
 800907a:	bf08      	it	eq
 800907c:	68ec      	ldreq	r4, [r5, #12]
 800907e:	e7da      	b.n	8009036 <_fflush_r+0x22>
 8009080:	0800a3dc 	.word	0x0800a3dc
 8009084:	0800a3fc 	.word	0x0800a3fc
 8009088:	0800a3bc 	.word	0x0800a3bc

0800908c <std>:
 800908c:	2300      	movs	r3, #0
 800908e:	b510      	push	{r4, lr}
 8009090:	4604      	mov	r4, r0
 8009092:	e9c0 3300 	strd	r3, r3, [r0]
 8009096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800909a:	6083      	str	r3, [r0, #8]
 800909c:	8181      	strh	r1, [r0, #12]
 800909e:	6643      	str	r3, [r0, #100]	; 0x64
 80090a0:	81c2      	strh	r2, [r0, #14]
 80090a2:	6183      	str	r3, [r0, #24]
 80090a4:	4619      	mov	r1, r3
 80090a6:	2208      	movs	r2, #8
 80090a8:	305c      	adds	r0, #92	; 0x5c
 80090aa:	f7fd fb47 	bl	800673c <memset>
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x38>)
 80090b0:	6263      	str	r3, [r4, #36]	; 0x24
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x3c>)
 80090b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x40>)
 80090b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <std+0x44>)
 80090bc:	6224      	str	r4, [r4, #32]
 80090be:	6323      	str	r3, [r4, #48]	; 0x30
 80090c0:	bd10      	pop	{r4, pc}
 80090c2:	bf00      	nop
 80090c4:	080093e1 	.word	0x080093e1
 80090c8:	08009403 	.word	0x08009403
 80090cc:	0800943b 	.word	0x0800943b
 80090d0:	0800945f 	.word	0x0800945f

080090d4 <_cleanup_r>:
 80090d4:	4901      	ldr	r1, [pc, #4]	; (80090dc <_cleanup_r+0x8>)
 80090d6:	f000 b8af 	b.w	8009238 <_fwalk_reent>
 80090da:	bf00      	nop
 80090dc:	08009015 	.word	0x08009015

080090e0 <__sfmoreglue>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	2268      	movs	r2, #104	; 0x68
 80090e4:	1e4d      	subs	r5, r1, #1
 80090e6:	4355      	muls	r5, r2
 80090e8:	460e      	mov	r6, r1
 80090ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ee:	f7ff fa65 	bl	80085bc <_malloc_r>
 80090f2:	4604      	mov	r4, r0
 80090f4:	b140      	cbz	r0, 8009108 <__sfmoreglue+0x28>
 80090f6:	2100      	movs	r1, #0
 80090f8:	e9c0 1600 	strd	r1, r6, [r0]
 80090fc:	300c      	adds	r0, #12
 80090fe:	60a0      	str	r0, [r4, #8]
 8009100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009104:	f7fd fb1a 	bl	800673c <memset>
 8009108:	4620      	mov	r0, r4
 800910a:	bd70      	pop	{r4, r5, r6, pc}

0800910c <__sfp_lock_acquire>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__sfp_lock_acquire+0x8>)
 800910e:	f000 b8b3 	b.w	8009278 <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	200004cd 	.word	0x200004cd

08009118 <__sfp_lock_release>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sfp_lock_release+0x8>)
 800911a:	f000 b8ae 	b.w	800927a <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	200004cd 	.word	0x200004cd

08009124 <__sinit_lock_acquire>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sinit_lock_acquire+0x8>)
 8009126:	f000 b8a7 	b.w	8009278 <__retarget_lock_acquire_recursive>
 800912a:	bf00      	nop
 800912c:	200004ce 	.word	0x200004ce

08009130 <__sinit_lock_release>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__sinit_lock_release+0x8>)
 8009132:	f000 b8a2 	b.w	800927a <__retarget_lock_release_recursive>
 8009136:	bf00      	nop
 8009138:	200004ce 	.word	0x200004ce

0800913c <__sinit>:
 800913c:	b510      	push	{r4, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	f7ff fff0 	bl	8009124 <__sinit_lock_acquire>
 8009144:	69a3      	ldr	r3, [r4, #24]
 8009146:	b11b      	cbz	r3, 8009150 <__sinit+0x14>
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f7ff bff0 	b.w	8009130 <__sinit_lock_release>
 8009150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009154:	6523      	str	r3, [r4, #80]	; 0x50
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <__sinit+0x68>)
 8009158:	4a13      	ldr	r2, [pc, #76]	; (80091a8 <__sinit+0x6c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	62a2      	str	r2, [r4, #40]	; 0x28
 800915e:	42a3      	cmp	r3, r4
 8009160:	bf04      	itt	eq
 8009162:	2301      	moveq	r3, #1
 8009164:	61a3      	streq	r3, [r4, #24]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f820 	bl	80091ac <__sfp>
 800916c:	6060      	str	r0, [r4, #4]
 800916e:	4620      	mov	r0, r4
 8009170:	f000 f81c 	bl	80091ac <__sfp>
 8009174:	60a0      	str	r0, [r4, #8]
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f818 	bl	80091ac <__sfp>
 800917c:	2200      	movs	r2, #0
 800917e:	60e0      	str	r0, [r4, #12]
 8009180:	2104      	movs	r1, #4
 8009182:	6860      	ldr	r0, [r4, #4]
 8009184:	f7ff ff82 	bl	800908c <std>
 8009188:	68a0      	ldr	r0, [r4, #8]
 800918a:	2201      	movs	r2, #1
 800918c:	2109      	movs	r1, #9
 800918e:	f7ff ff7d 	bl	800908c <std>
 8009192:	68e0      	ldr	r0, [r4, #12]
 8009194:	2202      	movs	r2, #2
 8009196:	2112      	movs	r1, #18
 8009198:	f7ff ff78 	bl	800908c <std>
 800919c:	2301      	movs	r3, #1
 800919e:	61a3      	str	r3, [r4, #24]
 80091a0:	e7d2      	b.n	8009148 <__sinit+0xc>
 80091a2:	bf00      	nop
 80091a4:	0800a040 	.word	0x0800a040
 80091a8:	080090d5 	.word	0x080090d5

080091ac <__sfp>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	4607      	mov	r7, r0
 80091b0:	f7ff ffac 	bl	800910c <__sfp_lock_acquire>
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <__sfp+0x84>)
 80091b6:	681e      	ldr	r6, [r3, #0]
 80091b8:	69b3      	ldr	r3, [r6, #24]
 80091ba:	b913      	cbnz	r3, 80091c2 <__sfp+0x16>
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff ffbd 	bl	800913c <__sinit>
 80091c2:	3648      	adds	r6, #72	; 0x48
 80091c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	d503      	bpl.n	80091d4 <__sfp+0x28>
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	b30b      	cbz	r3, 8009214 <__sfp+0x68>
 80091d0:	6836      	ldr	r6, [r6, #0]
 80091d2:	e7f7      	b.n	80091c4 <__sfp+0x18>
 80091d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d8:	b9d5      	cbnz	r5, 8009210 <__sfp+0x64>
 80091da:	4b16      	ldr	r3, [pc, #88]	; (8009234 <__sfp+0x88>)
 80091dc:	60e3      	str	r3, [r4, #12]
 80091de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091e2:	6665      	str	r5, [r4, #100]	; 0x64
 80091e4:	f000 f847 	bl	8009276 <__retarget_lock_init_recursive>
 80091e8:	f7ff ff96 	bl	8009118 <__sfp_lock_release>
 80091ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f4:	6025      	str	r5, [r4, #0]
 80091f6:	61a5      	str	r5, [r4, #24]
 80091f8:	2208      	movs	r2, #8
 80091fa:	4629      	mov	r1, r5
 80091fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009200:	f7fd fa9c 	bl	800673c <memset>
 8009204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800920c:	4620      	mov	r0, r4
 800920e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009210:	3468      	adds	r4, #104	; 0x68
 8009212:	e7d9      	b.n	80091c8 <__sfp+0x1c>
 8009214:	2104      	movs	r1, #4
 8009216:	4638      	mov	r0, r7
 8009218:	f7ff ff62 	bl	80090e0 <__sfmoreglue>
 800921c:	4604      	mov	r4, r0
 800921e:	6030      	str	r0, [r6, #0]
 8009220:	2800      	cmp	r0, #0
 8009222:	d1d5      	bne.n	80091d0 <__sfp+0x24>
 8009224:	f7ff ff78 	bl	8009118 <__sfp_lock_release>
 8009228:	230c      	movs	r3, #12
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	e7ee      	b.n	800920c <__sfp+0x60>
 800922e:	bf00      	nop
 8009230:	0800a040 	.word	0x0800a040
 8009234:	ffff0001 	.word	0xffff0001

08009238 <_fwalk_reent>:
 8009238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923c:	4606      	mov	r6, r0
 800923e:	4688      	mov	r8, r1
 8009240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009244:	2700      	movs	r7, #0
 8009246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800924a:	f1b9 0901 	subs.w	r9, r9, #1
 800924e:	d505      	bpl.n	800925c <_fwalk_reent+0x24>
 8009250:	6824      	ldr	r4, [r4, #0]
 8009252:	2c00      	cmp	r4, #0
 8009254:	d1f7      	bne.n	8009246 <_fwalk_reent+0xe>
 8009256:	4638      	mov	r0, r7
 8009258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925c:	89ab      	ldrh	r3, [r5, #12]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d907      	bls.n	8009272 <_fwalk_reent+0x3a>
 8009262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009266:	3301      	adds	r3, #1
 8009268:	d003      	beq.n	8009272 <_fwalk_reent+0x3a>
 800926a:	4629      	mov	r1, r5
 800926c:	4630      	mov	r0, r6
 800926e:	47c0      	blx	r8
 8009270:	4307      	orrs	r7, r0
 8009272:	3568      	adds	r5, #104	; 0x68
 8009274:	e7e9      	b.n	800924a <_fwalk_reent+0x12>

08009276 <__retarget_lock_init_recursive>:
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_acquire_recursive>:
 8009278:	4770      	bx	lr

0800927a <__retarget_lock_release_recursive>:
 800927a:	4770      	bx	lr

0800927c <__swhatbuf_r>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	460e      	mov	r6, r1
 8009280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009284:	2900      	cmp	r1, #0
 8009286:	b096      	sub	sp, #88	; 0x58
 8009288:	4614      	mov	r4, r2
 800928a:	461d      	mov	r5, r3
 800928c:	da08      	bge.n	80092a0 <__swhatbuf_r+0x24>
 800928e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	061a      	lsls	r2, r3, #24
 8009298:	d410      	bmi.n	80092bc <__swhatbuf_r+0x40>
 800929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929e:	e00e      	b.n	80092be <__swhatbuf_r+0x42>
 80092a0:	466a      	mov	r2, sp
 80092a2:	f000 f903 	bl	80094ac <_fstat_r>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	dbf1      	blt.n	800928e <__swhatbuf_r+0x12>
 80092aa:	9a01      	ldr	r2, [sp, #4]
 80092ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b4:	425a      	negs	r2, r3
 80092b6:	415a      	adcs	r2, r3
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	e7ee      	b.n	800929a <__swhatbuf_r+0x1e>
 80092bc:	2340      	movs	r3, #64	; 0x40
 80092be:	2000      	movs	r0, #0
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	b016      	add	sp, #88	; 0x58
 80092c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c8 <__smakebuf_r>:
 80092c8:	898b      	ldrh	r3, [r1, #12]
 80092ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092cc:	079d      	lsls	r5, r3, #30
 80092ce:	4606      	mov	r6, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	d507      	bpl.n	80092e4 <__smakebuf_r+0x1c>
 80092d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	2301      	movs	r3, #1
 80092de:	6163      	str	r3, [r4, #20]
 80092e0:	b002      	add	sp, #8
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	ab01      	add	r3, sp, #4
 80092e6:	466a      	mov	r2, sp
 80092e8:	f7ff ffc8 	bl	800927c <__swhatbuf_r>
 80092ec:	9900      	ldr	r1, [sp, #0]
 80092ee:	4605      	mov	r5, r0
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff f963 	bl	80085bc <_malloc_r>
 80092f6:	b948      	cbnz	r0, 800930c <__smakebuf_r+0x44>
 80092f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fc:	059a      	lsls	r2, r3, #22
 80092fe:	d4ef      	bmi.n	80092e0 <__smakebuf_r+0x18>
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	f043 0302 	orr.w	r3, r3, #2
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	e7e3      	b.n	80092d4 <__smakebuf_r+0xc>
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <__smakebuf_r+0x7c>)
 800930e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	9b00      	ldr	r3, [sp, #0]
 800931c:	6163      	str	r3, [r4, #20]
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	6120      	str	r0, [r4, #16]
 8009322:	b15b      	cbz	r3, 800933c <__smakebuf_r+0x74>
 8009324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009328:	4630      	mov	r0, r6
 800932a:	f000 f8d1 	bl	80094d0 <_isatty_r>
 800932e:	b128      	cbz	r0, 800933c <__smakebuf_r+0x74>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	89a0      	ldrh	r0, [r4, #12]
 800933e:	4305      	orrs	r5, r0
 8009340:	81a5      	strh	r5, [r4, #12]
 8009342:	e7cd      	b.n	80092e0 <__smakebuf_r+0x18>
 8009344:	080090d5 	.word	0x080090d5

08009348 <_malloc_usable_size_r>:
 8009348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934c:	1f18      	subs	r0, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfbc      	itt	lt
 8009352:	580b      	ldrlt	r3, [r1, r0]
 8009354:	18c0      	addlt	r0, r0, r3
 8009356:	4770      	bx	lr

08009358 <_raise_r>:
 8009358:	291f      	cmp	r1, #31
 800935a:	b538      	push	{r3, r4, r5, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	460d      	mov	r5, r1
 8009360:	d904      	bls.n	800936c <_raise_r+0x14>
 8009362:	2316      	movs	r3, #22
 8009364:	6003      	str	r3, [r0, #0]
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800936e:	b112      	cbz	r2, 8009376 <_raise_r+0x1e>
 8009370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009374:	b94b      	cbnz	r3, 800938a <_raise_r+0x32>
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f830 	bl	80093dc <_getpid_r>
 800937c:	462a      	mov	r2, r5
 800937e:	4601      	mov	r1, r0
 8009380:	4620      	mov	r0, r4
 8009382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009386:	f000 b817 	b.w	80093b8 <_kill_r>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d00a      	beq.n	80093a4 <_raise_r+0x4c>
 800938e:	1c59      	adds	r1, r3, #1
 8009390:	d103      	bne.n	800939a <_raise_r+0x42>
 8009392:	2316      	movs	r3, #22
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	2001      	movs	r0, #1
 8009398:	e7e7      	b.n	800936a <_raise_r+0x12>
 800939a:	2400      	movs	r4, #0
 800939c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093a0:	4628      	mov	r0, r5
 80093a2:	4798      	blx	r3
 80093a4:	2000      	movs	r0, #0
 80093a6:	e7e0      	b.n	800936a <_raise_r+0x12>

080093a8 <raise>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <raise+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f7ff bfd3 	b.w	8009358 <_raise_r>
 80093b2:	bf00      	nop
 80093b4:	20000028 	.word	0x20000028

080093b8 <_kill_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d07      	ldr	r5, [pc, #28]	; (80093d8 <_kill_r+0x20>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f7f8 fe13 	bl	8001ff0 <_kill>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d102      	bne.n	80093d4 <_kill_r+0x1c>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	b103      	cbz	r3, 80093d4 <_kill_r+0x1c>
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	bd38      	pop	{r3, r4, r5, pc}
 80093d6:	bf00      	nop
 80093d8:	200004c8 	.word	0x200004c8

080093dc <_getpid_r>:
 80093dc:	f7f8 be00 	b.w	8001fe0 <_getpid>

080093e0 <__sread>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	f000 f894 	bl	8009514 <_read_r>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	bfab      	itete	ge
 80093f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093f2:	89a3      	ldrhlt	r3, [r4, #12]
 80093f4:	181b      	addge	r3, r3, r0
 80093f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093fa:	bfac      	ite	ge
 80093fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80093fe:	81a3      	strhlt	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__swrite>:
 8009402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009406:	461f      	mov	r7, r3
 8009408:	898b      	ldrh	r3, [r1, #12]
 800940a:	05db      	lsls	r3, r3, #23
 800940c:	4605      	mov	r5, r0
 800940e:	460c      	mov	r4, r1
 8009410:	4616      	mov	r6, r2
 8009412:	d505      	bpl.n	8009420 <__swrite+0x1e>
 8009414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009418:	2302      	movs	r3, #2
 800941a:	2200      	movs	r2, #0
 800941c:	f000 f868 	bl	80094f0 <_lseek_r>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	4632      	mov	r2, r6
 800942e:	463b      	mov	r3, r7
 8009430:	4628      	mov	r0, r5
 8009432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	f000 b817 	b.w	8009468 <_write_r>

0800943a <__sseek>:
 800943a:	b510      	push	{r4, lr}
 800943c:	460c      	mov	r4, r1
 800943e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009442:	f000 f855 	bl	80094f0 <_lseek_r>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	bf15      	itete	ne
 800944c:	6560      	strne	r0, [r4, #84]	; 0x54
 800944e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009456:	81a3      	strheq	r3, [r4, #12]
 8009458:	bf18      	it	ne
 800945a:	81a3      	strhne	r3, [r4, #12]
 800945c:	bd10      	pop	{r4, pc}

0800945e <__sclose>:
 800945e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009462:	f000 b813 	b.w	800948c <_close_r>
	...

08009468 <_write_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_write_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f8 fdf1 	bl	800205e <_write>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_write_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_write_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	200004c8 	.word	0x200004c8

0800948c <_close_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_close_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f8 fdfd 	bl	8002096 <_close>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_close_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_close_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	200004c8 	.word	0x200004c8

080094ac <_fstat_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	; (80094cc <_fstat_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7f8 fdf8 	bl	80020ae <_fstat>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_fstat_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_fstat_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	200004c8 	.word	0x200004c8

080094d0 <_isatty_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	; (80094ec <_isatty_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f8 fdf7 	bl	80020ce <_isatty>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_isatty_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_isatty_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200004c8 	.word	0x200004c8

080094f0 <_lseek_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d07      	ldr	r5, [pc, #28]	; (8009510 <_lseek_r+0x20>)
 80094f4:	4604      	mov	r4, r0
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	602a      	str	r2, [r5, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f7f8 fdf0 	bl	80020e4 <_lseek>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_lseek_r+0x1e>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_lseek_r+0x1e>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200004c8 	.word	0x200004c8

08009514 <_read_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d07      	ldr	r5, [pc, #28]	; (8009534 <_read_r+0x20>)
 8009518:	4604      	mov	r4, r0
 800951a:	4608      	mov	r0, r1
 800951c:	4611      	mov	r1, r2
 800951e:	2200      	movs	r2, #0
 8009520:	602a      	str	r2, [r5, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f7f8 fd7e 	bl	8002024 <_read>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_read_r+0x1e>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_read_r+0x1e>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	200004c8 	.word	0x200004c8

08009538 <sinf>:
 8009538:	ee10 3a10 	vmov	r3, s0
 800953c:	b507      	push	{r0, r1, r2, lr}
 800953e:	4a1f      	ldr	r2, [pc, #124]	; (80095bc <sinf+0x84>)
 8009540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009544:	4293      	cmp	r3, r2
 8009546:	dc07      	bgt.n	8009558 <sinf+0x20>
 8009548:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80095c0 <sinf+0x88>
 800954c:	2000      	movs	r0, #0
 800954e:	b003      	add	sp, #12
 8009550:	f85d eb04 	ldr.w	lr, [sp], #4
 8009554:	f000 bc48 	b.w	8009de8 <__kernel_sinf>
 8009558:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800955c:	db04      	blt.n	8009568 <sinf+0x30>
 800955e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009562:	b003      	add	sp, #12
 8009564:	f85d fb04 	ldr.w	pc, [sp], #4
 8009568:	4668      	mov	r0, sp
 800956a:	f000 f82b 	bl	80095c4 <__ieee754_rem_pio2f>
 800956e:	f000 0003 	and.w	r0, r0, #3
 8009572:	2801      	cmp	r0, #1
 8009574:	d00a      	beq.n	800958c <sinf+0x54>
 8009576:	2802      	cmp	r0, #2
 8009578:	d00f      	beq.n	800959a <sinf+0x62>
 800957a:	b9c0      	cbnz	r0, 80095ae <sinf+0x76>
 800957c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009580:	ed9d 0a00 	vldr	s0, [sp]
 8009584:	2001      	movs	r0, #1
 8009586:	f000 fc2f 	bl	8009de8 <__kernel_sinf>
 800958a:	e7ea      	b.n	8009562 <sinf+0x2a>
 800958c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009590:	ed9d 0a00 	vldr	s0, [sp]
 8009594:	f000 f952 	bl	800983c <__kernel_cosf>
 8009598:	e7e3      	b.n	8009562 <sinf+0x2a>
 800959a:	eddd 0a01 	vldr	s1, [sp, #4]
 800959e:	ed9d 0a00 	vldr	s0, [sp]
 80095a2:	2001      	movs	r0, #1
 80095a4:	f000 fc20 	bl	8009de8 <__kernel_sinf>
 80095a8:	eeb1 0a40 	vneg.f32	s0, s0
 80095ac:	e7d9      	b.n	8009562 <sinf+0x2a>
 80095ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80095b2:	ed9d 0a00 	vldr	s0, [sp]
 80095b6:	f000 f941 	bl	800983c <__kernel_cosf>
 80095ba:	e7f5      	b.n	80095a8 <sinf+0x70>
 80095bc:	3f490fd8 	.word	0x3f490fd8
 80095c0:	00000000 	.word	0x00000000

080095c4 <__ieee754_rem_pio2f>:
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	ee10 6a10 	vmov	r6, s0
 80095ca:	4b8e      	ldr	r3, [pc, #568]	; (8009804 <__ieee754_rem_pio2f+0x240>)
 80095cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80095d0:	429d      	cmp	r5, r3
 80095d2:	b087      	sub	sp, #28
 80095d4:	eef0 7a40 	vmov.f32	s15, s0
 80095d8:	4604      	mov	r4, r0
 80095da:	dc05      	bgt.n	80095e8 <__ieee754_rem_pio2f+0x24>
 80095dc:	2300      	movs	r3, #0
 80095de:	ed80 0a00 	vstr	s0, [r0]
 80095e2:	6043      	str	r3, [r0, #4]
 80095e4:	2000      	movs	r0, #0
 80095e6:	e01a      	b.n	800961e <__ieee754_rem_pio2f+0x5a>
 80095e8:	4b87      	ldr	r3, [pc, #540]	; (8009808 <__ieee754_rem_pio2f+0x244>)
 80095ea:	429d      	cmp	r5, r3
 80095ec:	dc46      	bgt.n	800967c <__ieee754_rem_pio2f+0xb8>
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800980c <__ieee754_rem_pio2f+0x248>
 80095f4:	4b86      	ldr	r3, [pc, #536]	; (8009810 <__ieee754_rem_pio2f+0x24c>)
 80095f6:	f025 050f 	bic.w	r5, r5, #15
 80095fa:	dd1f      	ble.n	800963c <__ieee754_rem_pio2f+0x78>
 80095fc:	429d      	cmp	r5, r3
 80095fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009602:	d00e      	beq.n	8009622 <__ieee754_rem_pio2f+0x5e>
 8009604:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009814 <__ieee754_rem_pio2f+0x250>
 8009608:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800960c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009610:	ed80 0a00 	vstr	s0, [r0]
 8009614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009618:	2001      	movs	r0, #1
 800961a:	edc4 7a01 	vstr	s15, [r4, #4]
 800961e:	b007      	add	sp, #28
 8009620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009622:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009818 <__ieee754_rem_pio2f+0x254>
 8009626:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800981c <__ieee754_rem_pio2f+0x258>
 800962a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800962e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009632:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009636:	edc0 6a00 	vstr	s13, [r0]
 800963a:	e7eb      	b.n	8009614 <__ieee754_rem_pio2f+0x50>
 800963c:	429d      	cmp	r5, r3
 800963e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009642:	d00e      	beq.n	8009662 <__ieee754_rem_pio2f+0x9e>
 8009644:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009814 <__ieee754_rem_pio2f+0x250>
 8009648:	ee37 0a87 	vadd.f32	s0, s15, s14
 800964c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009650:	ed80 0a00 	vstr	s0, [r0]
 8009654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009660:	e7dd      	b.n	800961e <__ieee754_rem_pio2f+0x5a>
 8009662:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009818 <__ieee754_rem_pio2f+0x254>
 8009666:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800981c <__ieee754_rem_pio2f+0x258>
 800966a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800966e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009676:	edc0 6a00 	vstr	s13, [r0]
 800967a:	e7eb      	b.n	8009654 <__ieee754_rem_pio2f+0x90>
 800967c:	4b68      	ldr	r3, [pc, #416]	; (8009820 <__ieee754_rem_pio2f+0x25c>)
 800967e:	429d      	cmp	r5, r3
 8009680:	dc72      	bgt.n	8009768 <__ieee754_rem_pio2f+0x1a4>
 8009682:	f000 fbf9 	bl	8009e78 <fabsf>
 8009686:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009824 <__ieee754_rem_pio2f+0x260>
 800968a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800968e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800969a:	ee17 0a90 	vmov	r0, s15
 800969e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800980c <__ieee754_rem_pio2f+0x248>
 80096a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80096a6:	281f      	cmp	r0, #31
 80096a8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009814 <__ieee754_rem_pio2f+0x250>
 80096ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b0:	eeb1 6a47 	vneg.f32	s12, s14
 80096b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80096b8:	ee16 2a90 	vmov	r2, s13
 80096bc:	dc1c      	bgt.n	80096f8 <__ieee754_rem_pio2f+0x134>
 80096be:	495a      	ldr	r1, [pc, #360]	; (8009828 <__ieee754_rem_pio2f+0x264>)
 80096c0:	1e47      	subs	r7, r0, #1
 80096c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80096c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80096ca:	428b      	cmp	r3, r1
 80096cc:	d014      	beq.n	80096f8 <__ieee754_rem_pio2f+0x134>
 80096ce:	6022      	str	r2, [r4, #0]
 80096d0:	ed94 7a00 	vldr	s14, [r4]
 80096d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80096d8:	2e00      	cmp	r6, #0
 80096da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096de:	ed84 0a01 	vstr	s0, [r4, #4]
 80096e2:	da9c      	bge.n	800961e <__ieee754_rem_pio2f+0x5a>
 80096e4:	eeb1 7a47 	vneg.f32	s14, s14
 80096e8:	eeb1 0a40 	vneg.f32	s0, s0
 80096ec:	ed84 7a00 	vstr	s14, [r4]
 80096f0:	ed84 0a01 	vstr	s0, [r4, #4]
 80096f4:	4240      	negs	r0, r0
 80096f6:	e792      	b.n	800961e <__ieee754_rem_pio2f+0x5a>
 80096f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80096fc:	15eb      	asrs	r3, r5, #23
 80096fe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009702:	2d08      	cmp	r5, #8
 8009704:	dde3      	ble.n	80096ce <__ieee754_rem_pio2f+0x10a>
 8009706:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009818 <__ieee754_rem_pio2f+0x254>
 800970a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800981c <__ieee754_rem_pio2f+0x258>
 800970e:	eef0 6a40 	vmov.f32	s13, s0
 8009712:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009716:	ee30 0a66 	vsub.f32	s0, s0, s13
 800971a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800971e:	eef0 7a40 	vmov.f32	s15, s0
 8009722:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009726:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800972a:	ee15 2a90 	vmov	r2, s11
 800972e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009732:	1a5b      	subs	r3, r3, r1
 8009734:	2b19      	cmp	r3, #25
 8009736:	dc04      	bgt.n	8009742 <__ieee754_rem_pio2f+0x17e>
 8009738:	edc4 5a00 	vstr	s11, [r4]
 800973c:	eeb0 0a66 	vmov.f32	s0, s13
 8009740:	e7c6      	b.n	80096d0 <__ieee754_rem_pio2f+0x10c>
 8009742:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800982c <__ieee754_rem_pio2f+0x268>
 8009746:	eeb0 0a66 	vmov.f32	s0, s13
 800974a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800974e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009752:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009830 <__ieee754_rem_pio2f+0x26c>
 8009756:	eee6 7a25 	vfma.f32	s15, s12, s11
 800975a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800975e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009762:	ed84 7a00 	vstr	s14, [r4]
 8009766:	e7b3      	b.n	80096d0 <__ieee754_rem_pio2f+0x10c>
 8009768:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800976c:	db06      	blt.n	800977c <__ieee754_rem_pio2f+0x1b8>
 800976e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009772:	edc0 7a01 	vstr	s15, [r0, #4]
 8009776:	edc0 7a00 	vstr	s15, [r0]
 800977a:	e733      	b.n	80095e4 <__ieee754_rem_pio2f+0x20>
 800977c:	15ea      	asrs	r2, r5, #23
 800977e:	3a86      	subs	r2, #134	; 0x86
 8009780:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800978c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009834 <__ieee754_rem_pio2f+0x270>
 8009790:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009798:	ed8d 7a03 	vstr	s14, [sp, #12]
 800979c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80097a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80097a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 80097b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80097b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097bc:	edcd 7a05 	vstr	s15, [sp, #20]
 80097c0:	d11e      	bne.n	8009800 <__ieee754_rem_pio2f+0x23c>
 80097c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	bf14      	ite	ne
 80097cc:	2302      	movne	r3, #2
 80097ce:	2301      	moveq	r3, #1
 80097d0:	4919      	ldr	r1, [pc, #100]	; (8009838 <__ieee754_rem_pio2f+0x274>)
 80097d2:	9101      	str	r1, [sp, #4]
 80097d4:	2102      	movs	r1, #2
 80097d6:	9100      	str	r1, [sp, #0]
 80097d8:	a803      	add	r0, sp, #12
 80097da:	4621      	mov	r1, r4
 80097dc:	f000 f88e 	bl	80098fc <__kernel_rem_pio2f>
 80097e0:	2e00      	cmp	r6, #0
 80097e2:	f6bf af1c 	bge.w	800961e <__ieee754_rem_pio2f+0x5a>
 80097e6:	edd4 7a00 	vldr	s15, [r4]
 80097ea:	eef1 7a67 	vneg.f32	s15, s15
 80097ee:	edc4 7a00 	vstr	s15, [r4]
 80097f2:	edd4 7a01 	vldr	s15, [r4, #4]
 80097f6:	eef1 7a67 	vneg.f32	s15, s15
 80097fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80097fe:	e779      	b.n	80096f4 <__ieee754_rem_pio2f+0x130>
 8009800:	2303      	movs	r3, #3
 8009802:	e7e5      	b.n	80097d0 <__ieee754_rem_pio2f+0x20c>
 8009804:	3f490fd8 	.word	0x3f490fd8
 8009808:	4016cbe3 	.word	0x4016cbe3
 800980c:	3fc90f80 	.word	0x3fc90f80
 8009810:	3fc90fd0 	.word	0x3fc90fd0
 8009814:	37354443 	.word	0x37354443
 8009818:	37354400 	.word	0x37354400
 800981c:	2e85a308 	.word	0x2e85a308
 8009820:	43490f80 	.word	0x43490f80
 8009824:	3f22f984 	.word	0x3f22f984
 8009828:	0800a41c 	.word	0x0800a41c
 800982c:	2e85a300 	.word	0x2e85a300
 8009830:	248d3132 	.word	0x248d3132
 8009834:	43800000 	.word	0x43800000
 8009838:	0800a49c 	.word	0x0800a49c

0800983c <__kernel_cosf>:
 800983c:	ee10 3a10 	vmov	r3, s0
 8009840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009844:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009848:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800984c:	da05      	bge.n	800985a <__kernel_cosf+0x1e>
 800984e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009852:	ee17 2a90 	vmov	r2, s15
 8009856:	2a00      	cmp	r2, #0
 8009858:	d03d      	beq.n	80098d6 <__kernel_cosf+0x9a>
 800985a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800985e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80098dc <__kernel_cosf+0xa0>
 8009862:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80098e0 <__kernel_cosf+0xa4>
 8009866:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80098e4 <__kernel_cosf+0xa8>
 800986a:	4a1f      	ldr	r2, [pc, #124]	; (80098e8 <__kernel_cosf+0xac>)
 800986c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009870:	4293      	cmp	r3, r2
 8009872:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80098ec <__kernel_cosf+0xb0>
 8009876:	eee7 7a25 	vfma.f32	s15, s14, s11
 800987a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80098f0 <__kernel_cosf+0xb4>
 800987e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009882:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80098f4 <__kernel_cosf+0xb8>
 8009886:	eee7 7a25 	vfma.f32	s15, s14, s11
 800988a:	eeb0 7a66 	vmov.f32	s14, s13
 800988e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009892:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009896:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800989a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800989e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80098a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80098a6:	dc04      	bgt.n	80098b2 <__kernel_cosf+0x76>
 80098a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80098ac:	ee36 0a47 	vsub.f32	s0, s12, s14
 80098b0:	4770      	bx	lr
 80098b2:	4a11      	ldr	r2, [pc, #68]	; (80098f8 <__kernel_cosf+0xbc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bfda      	itte	le
 80098b8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80098bc:	ee06 3a90 	vmovle	s13, r3
 80098c0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80098c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80098c8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80098cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80098d4:	4770      	bx	lr
 80098d6:	eeb0 0a46 	vmov.f32	s0, s12
 80098da:	4770      	bx	lr
 80098dc:	ad47d74e 	.word	0xad47d74e
 80098e0:	310f74f6 	.word	0x310f74f6
 80098e4:	3d2aaaab 	.word	0x3d2aaaab
 80098e8:	3e999999 	.word	0x3e999999
 80098ec:	b493f27c 	.word	0xb493f27c
 80098f0:	37d00d01 	.word	0x37d00d01
 80098f4:	bab60b61 	.word	0xbab60b61
 80098f8:	3f480000 	.word	0x3f480000

080098fc <__kernel_rem_pio2f>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	ed2d 8b04 	vpush	{d8-d9}
 8009904:	b0d9      	sub	sp, #356	; 0x164
 8009906:	4688      	mov	r8, r1
 8009908:	9002      	str	r0, [sp, #8]
 800990a:	49bb      	ldr	r1, [pc, #748]	; (8009bf8 <__kernel_rem_pio2f+0x2fc>)
 800990c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009914:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009918:	1e59      	subs	r1, r3, #1
 800991a:	1d13      	adds	r3, r2, #4
 800991c:	db27      	blt.n	800996e <__kernel_rem_pio2f+0x72>
 800991e:	f1b2 0b03 	subs.w	fp, r2, #3
 8009922:	bf48      	it	mi
 8009924:	f102 0b04 	addmi.w	fp, r2, #4
 8009928:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800992c:	1c45      	adds	r5, r0, #1
 800992e:	00ec      	lsls	r4, r5, #3
 8009930:	1a47      	subs	r7, r0, r1
 8009932:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009936:	9403      	str	r4, [sp, #12]
 8009938:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800993c:	eb0a 0c01 	add.w	ip, sl, r1
 8009940:	ae1c      	add	r6, sp, #112	; 0x70
 8009942:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009946:	2400      	movs	r4, #0
 8009948:	4564      	cmp	r4, ip
 800994a:	dd12      	ble.n	8009972 <__kernel_rem_pio2f+0x76>
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	ac1c      	add	r4, sp, #112	; 0x70
 8009950:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009954:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009958:	f04f 0c00 	mov.w	ip, #0
 800995c:	45d4      	cmp	ip, sl
 800995e:	dc27      	bgt.n	80099b0 <__kernel_rem_pio2f+0xb4>
 8009960:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009964:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009968:	4627      	mov	r7, r4
 800996a:	2600      	movs	r6, #0
 800996c:	e016      	b.n	800999c <__kernel_rem_pio2f+0xa0>
 800996e:	2000      	movs	r0, #0
 8009970:	e7dc      	b.n	800992c <__kernel_rem_pio2f+0x30>
 8009972:	42e7      	cmn	r7, r4
 8009974:	bf5d      	ittte	pl
 8009976:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800997a:	ee07 3a90 	vmovpl	s15, r3
 800997e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009982:	eef0 7a47 	vmovmi.f32	s15, s14
 8009986:	ece6 7a01 	vstmia	r6!, {s15}
 800998a:	3401      	adds	r4, #1
 800998c:	e7dc      	b.n	8009948 <__kernel_rem_pio2f+0x4c>
 800998e:	ecf9 6a01 	vldmia	r9!, {s13}
 8009992:	ed97 7a00 	vldr	s14, [r7]
 8009996:	eee6 7a87 	vfma.f32	s15, s13, s14
 800999a:	3601      	adds	r6, #1
 800999c:	428e      	cmp	r6, r1
 800999e:	f1a7 0704 	sub.w	r7, r7, #4
 80099a2:	ddf4      	ble.n	800998e <__kernel_rem_pio2f+0x92>
 80099a4:	eceb 7a01 	vstmia	fp!, {s15}
 80099a8:	f10c 0c01 	add.w	ip, ip, #1
 80099ac:	3404      	adds	r4, #4
 80099ae:	e7d5      	b.n	800995c <__kernel_rem_pio2f+0x60>
 80099b0:	ab08      	add	r3, sp, #32
 80099b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80099b6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009c04 <__kernel_rem_pio2f+0x308>
 80099ba:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009c00 <__kernel_rem_pio2f+0x304>
 80099be:	9304      	str	r3, [sp, #16]
 80099c0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80099c4:	4656      	mov	r6, sl
 80099c6:	00b3      	lsls	r3, r6, #2
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	ab58      	add	r3, sp, #352	; 0x160
 80099cc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80099d0:	ac08      	add	r4, sp, #32
 80099d2:	ab44      	add	r3, sp, #272	; 0x110
 80099d4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80099d8:	46a4      	mov	ip, r4
 80099da:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80099de:	4637      	mov	r7, r6
 80099e0:	2f00      	cmp	r7, #0
 80099e2:	f1a0 0004 	sub.w	r0, r0, #4
 80099e6:	dc4f      	bgt.n	8009a88 <__kernel_rem_pio2f+0x18c>
 80099e8:	4628      	mov	r0, r5
 80099ea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80099ee:	f000 fa8d 	bl	8009f0c <scalbnf>
 80099f2:	eeb0 8a40 	vmov.f32	s16, s0
 80099f6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80099fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80099fe:	f000 fa43 	bl	8009e88 <floorf>
 8009a02:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009a06:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009a0a:	2d00      	cmp	r5, #0
 8009a0c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009a10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009a14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009a18:	ee17 9a90 	vmov	r9, s15
 8009a1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009a20:	dd44      	ble.n	8009aac <__kernel_rem_pio2f+0x1b0>
 8009a22:	f106 3cff 	add.w	ip, r6, #4294967295
 8009a26:	ab08      	add	r3, sp, #32
 8009a28:	f1c5 0e08 	rsb	lr, r5, #8
 8009a2c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009a30:	fa47 f00e 	asr.w	r0, r7, lr
 8009a34:	4481      	add	r9, r0
 8009a36:	fa00 f00e 	lsl.w	r0, r0, lr
 8009a3a:	1a3f      	subs	r7, r7, r0
 8009a3c:	f1c5 0007 	rsb	r0, r5, #7
 8009a40:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009a44:	4107      	asrs	r7, r0
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	dd3f      	ble.n	8009aca <__kernel_rem_pio2f+0x1ce>
 8009a4a:	f04f 0e00 	mov.w	lr, #0
 8009a4e:	f109 0901 	add.w	r9, r9, #1
 8009a52:	4673      	mov	r3, lr
 8009a54:	4576      	cmp	r6, lr
 8009a56:	dc6b      	bgt.n	8009b30 <__kernel_rem_pio2f+0x234>
 8009a58:	2d00      	cmp	r5, #0
 8009a5a:	dd04      	ble.n	8009a66 <__kernel_rem_pio2f+0x16a>
 8009a5c:	2d01      	cmp	r5, #1
 8009a5e:	d078      	beq.n	8009b52 <__kernel_rem_pio2f+0x256>
 8009a60:	2d02      	cmp	r5, #2
 8009a62:	f000 8081 	beq.w	8009b68 <__kernel_rem_pio2f+0x26c>
 8009a66:	2f02      	cmp	r7, #2
 8009a68:	d12f      	bne.n	8009aca <__kernel_rem_pio2f+0x1ce>
 8009a6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a6e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009a72:	b353      	cbz	r3, 8009aca <__kernel_rem_pio2f+0x1ce>
 8009a74:	4628      	mov	r0, r5
 8009a76:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8009a7a:	f000 fa47 	bl	8009f0c <scalbnf>
 8009a7e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009a82:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009a86:	e020      	b.n	8009aca <__kernel_rem_pio2f+0x1ce>
 8009a88:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009a8c:	3f01      	subs	r7, #1
 8009a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a96:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009a9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a9e:	ecac 0a01 	vstmia	ip!, {s0}
 8009aa2:	ed90 0a00 	vldr	s0, [r0]
 8009aa6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009aaa:	e799      	b.n	80099e0 <__kernel_rem_pio2f+0xe4>
 8009aac:	d105      	bne.n	8009aba <__kernel_rem_pio2f+0x1be>
 8009aae:	1e70      	subs	r0, r6, #1
 8009ab0:	ab08      	add	r3, sp, #32
 8009ab2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8009ab6:	11ff      	asrs	r7, r7, #7
 8009ab8:	e7c5      	b.n	8009a46 <__kernel_rem_pio2f+0x14a>
 8009aba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009abe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac6:	da31      	bge.n	8009b2c <__kernel_rem_pio2f+0x230>
 8009ac8:	2700      	movs	r7, #0
 8009aca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad2:	f040 809b 	bne.w	8009c0c <__kernel_rem_pio2f+0x310>
 8009ad6:	1e74      	subs	r4, r6, #1
 8009ad8:	46a4      	mov	ip, r4
 8009ada:	2000      	movs	r0, #0
 8009adc:	45d4      	cmp	ip, sl
 8009ade:	da4a      	bge.n	8009b76 <__kernel_rem_pio2f+0x27a>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d07a      	beq.n	8009bda <__kernel_rem_pio2f+0x2de>
 8009ae4:	ab08      	add	r3, sp, #32
 8009ae6:	3d08      	subs	r5, #8
 8009ae8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8081 	beq.w	8009bf4 <__kernel_rem_pio2f+0x2f8>
 8009af2:	4628      	mov	r0, r5
 8009af4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009af8:	00a5      	lsls	r5, r4, #2
 8009afa:	f000 fa07 	bl	8009f0c <scalbnf>
 8009afe:	aa44      	add	r2, sp, #272	; 0x110
 8009b00:	1d2b      	adds	r3, r5, #4
 8009b02:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009c04 <__kernel_rem_pio2f+0x308>
 8009b06:	18d1      	adds	r1, r2, r3
 8009b08:	4622      	mov	r2, r4
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	f280 80ae 	bge.w	8009c6c <__kernel_rem_pio2f+0x370>
 8009b10:	4622      	mov	r2, r4
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	f2c0 80cc 	blt.w	8009cb0 <__kernel_rem_pio2f+0x3b4>
 8009b18:	a944      	add	r1, sp, #272	; 0x110
 8009b1a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8009b1e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009bfc <__kernel_rem_pio2f+0x300>
 8009b22:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009b26:	2000      	movs	r0, #0
 8009b28:	1aa1      	subs	r1, r4, r2
 8009b2a:	e0b6      	b.n	8009c9a <__kernel_rem_pio2f+0x39e>
 8009b2c:	2702      	movs	r7, #2
 8009b2e:	e78c      	b.n	8009a4a <__kernel_rem_pio2f+0x14e>
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	b94b      	cbnz	r3, 8009b48 <__kernel_rem_pio2f+0x24c>
 8009b34:	b118      	cbz	r0, 8009b3e <__kernel_rem_pio2f+0x242>
 8009b36:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f10e 0e01 	add.w	lr, lr, #1
 8009b42:	3404      	adds	r4, #4
 8009b44:	4603      	mov	r3, r0
 8009b46:	e785      	b.n	8009a54 <__kernel_rem_pio2f+0x158>
 8009b48:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8009b4c:	6020      	str	r0, [r4, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	e7f5      	b.n	8009b3e <__kernel_rem_pio2f+0x242>
 8009b52:	1e74      	subs	r4, r6, #1
 8009b54:	a808      	add	r0, sp, #32
 8009b56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009b5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009b5e:	f10d 0c20 	add.w	ip, sp, #32
 8009b62:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009b66:	e77e      	b.n	8009a66 <__kernel_rem_pio2f+0x16a>
 8009b68:	1e74      	subs	r4, r6, #1
 8009b6a:	a808      	add	r0, sp, #32
 8009b6c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009b70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009b74:	e7f3      	b.n	8009b5e <__kernel_rem_pio2f+0x262>
 8009b76:	ab08      	add	r3, sp, #32
 8009b78:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8009b7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b80:	4318      	orrs	r0, r3
 8009b82:	e7ab      	b.n	8009adc <__kernel_rem_pio2f+0x1e0>
 8009b84:	f10c 0c01 	add.w	ip, ip, #1
 8009b88:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8009b8c:	2c00      	cmp	r4, #0
 8009b8e:	d0f9      	beq.n	8009b84 <__kernel_rem_pio2f+0x288>
 8009b90:	9b05      	ldr	r3, [sp, #20]
 8009b92:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009b96:	eb0d 0003 	add.w	r0, sp, r3
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	18f4      	adds	r4, r6, r3
 8009b9e:	ab1c      	add	r3, sp, #112	; 0x70
 8009ba0:	1c77      	adds	r7, r6, #1
 8009ba2:	384c      	subs	r0, #76	; 0x4c
 8009ba4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ba8:	4466      	add	r6, ip
 8009baa:	42be      	cmp	r6, r7
 8009bac:	f6ff af0b 	blt.w	80099c6 <__kernel_rem_pio2f+0xca>
 8009bb0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8009bb4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc0:	f04f 0c00 	mov.w	ip, #0
 8009bc4:	ece4 7a01 	vstmia	r4!, {s15}
 8009bc8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009bcc:	46a1      	mov	r9, r4
 8009bce:	458c      	cmp	ip, r1
 8009bd0:	dd07      	ble.n	8009be2 <__kernel_rem_pio2f+0x2e6>
 8009bd2:	ece0 7a01 	vstmia	r0!, {s15}
 8009bd6:	3701      	adds	r7, #1
 8009bd8:	e7e7      	b.n	8009baa <__kernel_rem_pio2f+0x2ae>
 8009bda:	9804      	ldr	r0, [sp, #16]
 8009bdc:	f04f 0c01 	mov.w	ip, #1
 8009be0:	e7d2      	b.n	8009b88 <__kernel_rem_pio2f+0x28c>
 8009be2:	ecfe 6a01 	vldmia	lr!, {s13}
 8009be6:	ed39 7a01 	vldmdb	r9!, {s14}
 8009bea:	f10c 0c01 	add.w	ip, ip, #1
 8009bee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009bf2:	e7ec      	b.n	8009bce <__kernel_rem_pio2f+0x2d2>
 8009bf4:	3c01      	subs	r4, #1
 8009bf6:	e775      	b.n	8009ae4 <__kernel_rem_pio2f+0x1e8>
 8009bf8:	0800a7e0 	.word	0x0800a7e0
 8009bfc:	0800a7b4 	.word	0x0800a7b4
 8009c00:	43800000 	.word	0x43800000
 8009c04:	3b800000 	.word	0x3b800000
 8009c08:	00000000 	.word	0x00000000
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	eeb0 0a48 	vmov.f32	s0, s16
 8009c12:	1a98      	subs	r0, r3, r2
 8009c14:	f000 f97a 	bl	8009f0c <scalbnf>
 8009c18:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009c00 <__kernel_rem_pio2f+0x304>
 8009c1c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	db19      	blt.n	8009c5a <__kernel_rem_pio2f+0x35e>
 8009c26:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009c04 <__kernel_rem_pio2f+0x308>
 8009c2a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009c2e:	aa08      	add	r2, sp, #32
 8009c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c34:	1c74      	adds	r4, r6, #1
 8009c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c3a:	3508      	adds	r5, #8
 8009c3c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009c48:	ee10 3a10 	vmov	r3, s0
 8009c4c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009c50:	ee17 3a90 	vmov	r3, s15
 8009c54:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009c58:	e74b      	b.n	8009af2 <__kernel_rem_pio2f+0x1f6>
 8009c5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009c5e:	aa08      	add	r2, sp, #32
 8009c60:	ee10 3a10 	vmov	r3, s0
 8009c64:	4634      	mov	r4, r6
 8009c66:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009c6a:	e742      	b.n	8009af2 <__kernel_rem_pio2f+0x1f6>
 8009c6c:	a808      	add	r0, sp, #32
 8009c6e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009c72:	9001      	str	r0, [sp, #4]
 8009c74:	ee07 0a90 	vmov	s15, r0
 8009c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c7c:	3a01      	subs	r2, #1
 8009c7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009c82:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009c86:	ed61 7a01 	vstmdb	r1!, {s15}
 8009c8a:	e73e      	b.n	8009b0a <__kernel_rem_pio2f+0x20e>
 8009c8c:	ecfc 6a01 	vldmia	ip!, {s13}
 8009c90:	ecb6 7a01 	vldmia	r6!, {s14}
 8009c94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c98:	3001      	adds	r0, #1
 8009c9a:	4550      	cmp	r0, sl
 8009c9c:	dc01      	bgt.n	8009ca2 <__kernel_rem_pio2f+0x3a6>
 8009c9e:	4288      	cmp	r0, r1
 8009ca0:	ddf4      	ble.n	8009c8c <__kernel_rem_pio2f+0x390>
 8009ca2:	a858      	add	r0, sp, #352	; 0x160
 8009ca4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ca8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8009cac:	3a01      	subs	r2, #1
 8009cae:	e730      	b.n	8009b12 <__kernel_rem_pio2f+0x216>
 8009cb0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8009cb2:	2a02      	cmp	r2, #2
 8009cb4:	dc09      	bgt.n	8009cca <__kernel_rem_pio2f+0x3ce>
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	dc2a      	bgt.n	8009d10 <__kernel_rem_pio2f+0x414>
 8009cba:	d043      	beq.n	8009d44 <__kernel_rem_pio2f+0x448>
 8009cbc:	f009 0007 	and.w	r0, r9, #7
 8009cc0:	b059      	add	sp, #356	; 0x164
 8009cc2:	ecbd 8b04 	vpop	{d8-d9}
 8009cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d1f5      	bne.n	8009cbc <__kernel_rem_pio2f+0x3c0>
 8009cd0:	ab30      	add	r3, sp, #192	; 0xc0
 8009cd2:	442b      	add	r3, r5
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4620      	mov	r0, r4
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f1a1 0104 	sub.w	r1, r1, #4
 8009ce0:	dc51      	bgt.n	8009d86 <__kernel_rem_pio2f+0x48a>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	2901      	cmp	r1, #1
 8009ce6:	f1a2 0204 	sub.w	r2, r2, #4
 8009cea:	dc5c      	bgt.n	8009da6 <__kernel_rem_pio2f+0x4aa>
 8009cec:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	2c01      	cmp	r4, #1
 8009cf4:	dc67      	bgt.n	8009dc6 <__kernel_rem_pio2f+0x4ca>
 8009cf6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8009cfa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8009cfe:	2f00      	cmp	r7, #0
 8009d00:	d167      	bne.n	8009dd2 <__kernel_rem_pio2f+0x4d6>
 8009d02:	edc8 6a00 	vstr	s13, [r8]
 8009d06:	ed88 7a01 	vstr	s14, [r8, #4]
 8009d0a:	edc8 7a02 	vstr	s15, [r8, #8]
 8009d0e:	e7d5      	b.n	8009cbc <__kernel_rem_pio2f+0x3c0>
 8009d10:	aa30      	add	r2, sp, #192	; 0xc0
 8009d12:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009d16:	4413      	add	r3, r2
 8009d18:	4622      	mov	r2, r4
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	da24      	bge.n	8009d68 <__kernel_rem_pio2f+0x46c>
 8009d1e:	b34f      	cbz	r7, 8009d74 <__kernel_rem_pio2f+0x478>
 8009d20:	eef1 7a47 	vneg.f32	s15, s14
 8009d24:	edc8 7a00 	vstr	s15, [r8]
 8009d28:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8009d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d30:	aa31      	add	r2, sp, #196	; 0xc4
 8009d32:	2301      	movs	r3, #1
 8009d34:	429c      	cmp	r4, r3
 8009d36:	da20      	bge.n	8009d7a <__kernel_rem_pio2f+0x47e>
 8009d38:	b10f      	cbz	r7, 8009d3e <__kernel_rem_pio2f+0x442>
 8009d3a:	eef1 7a67 	vneg.f32	s15, s15
 8009d3e:	edc8 7a01 	vstr	s15, [r8, #4]
 8009d42:	e7bb      	b.n	8009cbc <__kernel_rem_pio2f+0x3c0>
 8009d44:	aa30      	add	r2, sp, #192	; 0xc0
 8009d46:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009c08 <__kernel_rem_pio2f+0x30c>
 8009d4a:	4413      	add	r3, r2
 8009d4c:	2c00      	cmp	r4, #0
 8009d4e:	da05      	bge.n	8009d5c <__kernel_rem_pio2f+0x460>
 8009d50:	b10f      	cbz	r7, 8009d56 <__kernel_rem_pio2f+0x45a>
 8009d52:	eef1 7a67 	vneg.f32	s15, s15
 8009d56:	edc8 7a00 	vstr	s15, [r8]
 8009d5a:	e7af      	b.n	8009cbc <__kernel_rem_pio2f+0x3c0>
 8009d5c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009d60:	3c01      	subs	r4, #1
 8009d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d66:	e7f1      	b.n	8009d4c <__kernel_rem_pio2f+0x450>
 8009d68:	ed73 7a01 	vldmdb	r3!, {s15}
 8009d6c:	3a01      	subs	r2, #1
 8009d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d72:	e7d2      	b.n	8009d1a <__kernel_rem_pio2f+0x41e>
 8009d74:	eef0 7a47 	vmov.f32	s15, s14
 8009d78:	e7d4      	b.n	8009d24 <__kernel_rem_pio2f+0x428>
 8009d7a:	ecb2 7a01 	vldmia	r2!, {s14}
 8009d7e:	3301      	adds	r3, #1
 8009d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d84:	e7d6      	b.n	8009d34 <__kernel_rem_pio2f+0x438>
 8009d86:	edd1 7a00 	vldr	s15, [r1]
 8009d8a:	edd1 6a01 	vldr	s13, [r1, #4]
 8009d8e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d92:	3801      	subs	r0, #1
 8009d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d98:	ed81 7a00 	vstr	s14, [r1]
 8009d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da0:	edc1 7a01 	vstr	s15, [r1, #4]
 8009da4:	e799      	b.n	8009cda <__kernel_rem_pio2f+0x3de>
 8009da6:	edd2 7a00 	vldr	s15, [r2]
 8009daa:	edd2 6a01 	vldr	s13, [r2, #4]
 8009dae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009db2:	3901      	subs	r1, #1
 8009db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009db8:	ed82 7a00 	vstr	s14, [r2]
 8009dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc0:	edc2 7a01 	vstr	s15, [r2, #4]
 8009dc4:	e78e      	b.n	8009ce4 <__kernel_rem_pio2f+0x3e8>
 8009dc6:	ed33 7a01 	vldmdb	r3!, {s14}
 8009dca:	3c01      	subs	r4, #1
 8009dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dd0:	e78f      	b.n	8009cf2 <__kernel_rem_pio2f+0x3f6>
 8009dd2:	eef1 6a66 	vneg.f32	s13, s13
 8009dd6:	eeb1 7a47 	vneg.f32	s14, s14
 8009dda:	edc8 6a00 	vstr	s13, [r8]
 8009dde:	ed88 7a01 	vstr	s14, [r8, #4]
 8009de2:	eef1 7a67 	vneg.f32	s15, s15
 8009de6:	e790      	b.n	8009d0a <__kernel_rem_pio2f+0x40e>

08009de8 <__kernel_sinf>:
 8009de8:	ee10 3a10 	vmov	r3, s0
 8009dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009df0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009df4:	da04      	bge.n	8009e00 <__kernel_sinf+0x18>
 8009df6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009dfa:	ee17 3a90 	vmov	r3, s15
 8009dfe:	b35b      	cbz	r3, 8009e58 <__kernel_sinf+0x70>
 8009e00:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009e04:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009e5c <__kernel_sinf+0x74>
 8009e08:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009e60 <__kernel_sinf+0x78>
 8009e0c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009e10:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009e64 <__kernel_sinf+0x7c>
 8009e14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e18:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009e68 <__kernel_sinf+0x80>
 8009e1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009e20:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009e6c <__kernel_sinf+0x84>
 8009e24:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009e28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009e2c:	b930      	cbnz	r0, 8009e3c <__kernel_sinf+0x54>
 8009e2e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009e70 <__kernel_sinf+0x88>
 8009e32:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009e36:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009e3a:	4770      	bx	lr
 8009e3c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009e40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009e44:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009e48:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009e4c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009e74 <__kernel_sinf+0x8c>
 8009e50:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009e54:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009e60:	b2d72f34 	.word	0xb2d72f34
 8009e64:	3638ef1b 	.word	0x3638ef1b
 8009e68:	b9500d01 	.word	0xb9500d01
 8009e6c:	3c088889 	.word	0x3c088889
 8009e70:	be2aaaab 	.word	0xbe2aaaab
 8009e74:	3e2aaaab 	.word	0x3e2aaaab

08009e78 <fabsf>:
 8009e78:	ee10 3a10 	vmov	r3, s0
 8009e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e80:	ee00 3a10 	vmov	s0, r3
 8009e84:	4770      	bx	lr
	...

08009e88 <floorf>:
 8009e88:	ee10 3a10 	vmov	r3, s0
 8009e8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009e90:	3a7f      	subs	r2, #127	; 0x7f
 8009e92:	2a16      	cmp	r2, #22
 8009e94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e98:	dc2a      	bgt.n	8009ef0 <floorf+0x68>
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	da11      	bge.n	8009ec2 <floorf+0x3a>
 8009e9e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009f00 <floorf+0x78>
 8009ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ea6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	dd05      	ble.n	8009ebc <floorf+0x34>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da23      	bge.n	8009efc <floorf+0x74>
 8009eb4:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <floorf+0x7c>)
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	bf18      	it	ne
 8009eba:	4613      	movne	r3, r2
 8009ebc:	ee00 3a10 	vmov	s0, r3
 8009ec0:	4770      	bx	lr
 8009ec2:	4911      	ldr	r1, [pc, #68]	; (8009f08 <floorf+0x80>)
 8009ec4:	4111      	asrs	r1, r2
 8009ec6:	420b      	tst	r3, r1
 8009ec8:	d0fa      	beq.n	8009ec0 <floorf+0x38>
 8009eca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009f00 <floorf+0x78>
 8009ece:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ed2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eda:	ddef      	ble.n	8009ebc <floorf+0x34>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbe      	ittt	lt
 8009ee0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009ee4:	fa40 f202 	asrlt.w	r2, r0, r2
 8009ee8:	189b      	addlt	r3, r3, r2
 8009eea:	ea23 0301 	bic.w	r3, r3, r1
 8009eee:	e7e5      	b.n	8009ebc <floorf+0x34>
 8009ef0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009ef4:	d3e4      	bcc.n	8009ec0 <floorf+0x38>
 8009ef6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009efa:	4770      	bx	lr
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7dd      	b.n	8009ebc <floorf+0x34>
 8009f00:	7149f2ca 	.word	0x7149f2ca
 8009f04:	bf800000 	.word	0xbf800000
 8009f08:	007fffff 	.word	0x007fffff

08009f0c <scalbnf>:
 8009f0c:	ee10 3a10 	vmov	r3, s0
 8009f10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009f14:	d025      	beq.n	8009f62 <scalbnf+0x56>
 8009f16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009f1a:	d302      	bcc.n	8009f22 <scalbnf+0x16>
 8009f1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009f20:	4770      	bx	lr
 8009f22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009f26:	d122      	bne.n	8009f6e <scalbnf+0x62>
 8009f28:	4b2a      	ldr	r3, [pc, #168]	; (8009fd4 <scalbnf+0xc8>)
 8009f2a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009fd8 <scalbnf+0xcc>
 8009f2e:	4298      	cmp	r0, r3
 8009f30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f34:	db16      	blt.n	8009f64 <scalbnf+0x58>
 8009f36:	ee10 3a10 	vmov	r3, s0
 8009f3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f3e:	3a19      	subs	r2, #25
 8009f40:	4402      	add	r2, r0
 8009f42:	2afe      	cmp	r2, #254	; 0xfe
 8009f44:	dd15      	ble.n	8009f72 <scalbnf+0x66>
 8009f46:	ee10 3a10 	vmov	r3, s0
 8009f4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009fdc <scalbnf+0xd0>
 8009f4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009fe0 <scalbnf+0xd4>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	eeb0 7a67 	vmov.f32	s14, s15
 8009f58:	bfb8      	it	lt
 8009f5a:	eef0 7a66 	vmovlt.f32	s15, s13
 8009f5e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009f62:	4770      	bx	lr
 8009f64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009fe4 <scalbnf+0xd8>
 8009f68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f6c:	4770      	bx	lr
 8009f6e:	0dd2      	lsrs	r2, r2, #23
 8009f70:	e7e6      	b.n	8009f40 <scalbnf+0x34>
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	dd06      	ble.n	8009f84 <scalbnf+0x78>
 8009f76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009f7e:	ee00 3a10 	vmov	s0, r3
 8009f82:	4770      	bx	lr
 8009f84:	f112 0f16 	cmn.w	r2, #22
 8009f88:	da1a      	bge.n	8009fc0 <scalbnf+0xb4>
 8009f8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f8e:	4298      	cmp	r0, r3
 8009f90:	ee10 3a10 	vmov	r3, s0
 8009f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f98:	dd0a      	ble.n	8009fb0 <scalbnf+0xa4>
 8009f9a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009fdc <scalbnf+0xd0>
 8009f9e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009fe0 <scalbnf+0xd4>
 8009fa2:	eef0 7a40 	vmov.f32	s15, s0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bf18      	it	ne
 8009faa:	eeb0 0a47 	vmovne.f32	s0, s14
 8009fae:	e7db      	b.n	8009f68 <scalbnf+0x5c>
 8009fb0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009fe4 <scalbnf+0xd8>
 8009fb4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009fe8 <scalbnf+0xdc>
 8009fb8:	eef0 7a40 	vmov.f32	s15, s0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	e7f3      	b.n	8009fa8 <scalbnf+0x9c>
 8009fc0:	3219      	adds	r2, #25
 8009fc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fc6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009fca:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009fec <scalbnf+0xe0>
 8009fce:	ee07 3a10 	vmov	s14, r3
 8009fd2:	e7c4      	b.n	8009f5e <scalbnf+0x52>
 8009fd4:	ffff3cb0 	.word	0xffff3cb0
 8009fd8:	4c000000 	.word	0x4c000000
 8009fdc:	7149f2ca 	.word	0x7149f2ca
 8009fe0:	f149f2ca 	.word	0xf149f2ca
 8009fe4:	0da24260 	.word	0x0da24260
 8009fe8:	8da24260 	.word	0x8da24260
 8009fec:	33000000 	.word	0x33000000

08009ff0 <_init>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr

08009ffc <_fini>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr
